
Speedy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d8c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a64  08004f40  08004f40  00014f40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059a4  080059a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080059a4  080059a4  000159a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059ac  080059ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059ac  080059ac  000159ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059b0  080059b0  000159b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080059b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000070  08005a24  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08005a24  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdc1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c0b  00000000  00000000  0002be61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  0002da70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  0002e408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a91  00000000  00000000  0002ecf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a960  00000000  00000000  00058789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb3ee  00000000  00000000  000630e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015e4d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ba8  00000000  00000000  0015e52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004f24 	.word	0x08004f24

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004f24 	.word	0x08004f24

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <convert_stateuint_to_statechar>:
                                0x81ac77d65f11199b,0x043556f1d7a3c76b,0x3c11183b5924a509,0xf28fe6ed97f1fbfa,0x9ebabf2c1e153c6e,0x86e34570eae96fb1,
                                0x860e5e0a5a3e2ab3,0x771fe71c4e3d06fa,0x2965dcb999e71d0f,0x803e89d65266c825,0x2e4cc9789c10b36a,0xc6150eba94e2ea78,
                                0xa5fc3c531e0a2df4,0xf2f74ea7361d2b3d   };


void convert_stateuint_to_statechar(StateUint input, StateChar output) {
 8000588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800058c:	b087      	sub	sp, #28
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	6039      	str	r1, [r7, #0]
    for(int i = 0; i < 10; i++)
 8000594:	2100      	movs	r1, #0
 8000596:	6179      	str	r1, [r7, #20]
 8000598:	e027      	b.n	80005ea <convert_stateuint_to_statechar+0x62>
        output[i] = (input[0] >> (58 - 6 * i)) & 0x3f;
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80005a0:	697e      	ldr	r6, [r7, #20]
 80005a2:	4633      	mov	r3, r6
 80005a4:	461e      	mov	r6, r3
 80005a6:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80005aa:	eba6 060c 	sub.w	r6, r6, ip
 80005ae:	0076      	lsls	r6, r6, #1
 80005b0:	363a      	adds	r6, #58	; 0x3a
 80005b2:	f1c6 0e20 	rsb	lr, r6, #32
 80005b6:	f1a6 0c20 	sub.w	ip, r6, #32
 80005ba:	fa20 f806 	lsr.w	r8, r0, r6
 80005be:	fa01 fe0e 	lsl.w	lr, r1, lr
 80005c2:	ea48 080e 	orr.w	r8, r8, lr
 80005c6:	fa21 fc0c 	lsr.w	ip, r1, ip
 80005ca:	ea48 080c 	orr.w	r8, r8, ip
 80005ce:	fa21 f906 	lsr.w	r9, r1, r6
 80005d2:	fa5f f088 	uxtb.w	r0, r8
 80005d6:	6979      	ldr	r1, [r7, #20]
 80005d8:	683e      	ldr	r6, [r7, #0]
 80005da:	4431      	add	r1, r6
 80005dc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80005e0:	b2c0      	uxtb	r0, r0
 80005e2:	7008      	strb	r0, [r1, #0]
    for(int i = 0; i < 10; i++)
 80005e4:	6979      	ldr	r1, [r7, #20]
 80005e6:	3101      	adds	r1, #1
 80005e8:	6179      	str	r1, [r7, #20]
 80005ea:	6979      	ldr	r1, [r7, #20]
 80005ec:	2909      	cmp	r1, #9
 80005ee:	ddd4      	ble.n	800059a <convert_stateuint_to_statechar+0x12>
    output[10] = ((input[0] & 0xf) << 2) ^ (input[1] >> 62);
 80005f0:	6879      	ldr	r1, [r7, #4]
 80005f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80005f6:	b2c1      	uxtb	r1, r0
 80005f8:	0089      	lsls	r1, r1, #2
 80005fa:	b2c9      	uxtb	r1, r1
 80005fc:	f001 013c 	and.w	r1, r1, #60	; 0x3c
 8000600:	b2ce      	uxtb	r6, r1
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	3108      	adds	r1, #8
 8000606:	e9d1 8900 	ldrd	r8, r9, [r1]
 800060a:	f04f 0000 	mov.w	r0, #0
 800060e:	f04f 0100 	mov.w	r1, #0
 8000612:	ea4f 7099 	mov.w	r0, r9, lsr #30
 8000616:	2100      	movs	r1, #0
 8000618:	b2c0      	uxtb	r0, r0
 800061a:	6839      	ldr	r1, [r7, #0]
 800061c:	310a      	adds	r1, #10
 800061e:	4070      	eors	r0, r6
 8000620:	b2c0      	uxtb	r0, r0
 8000622:	7008      	strb	r0, [r1, #0]
    for(int i = 11; i < 21; i++)
 8000624:	210b      	movs	r1, #11
 8000626:	6139      	str	r1, [r7, #16]
 8000628:	e026      	b.n	8000678 <convert_stateuint_to_statechar+0xf0>
        output[i] = (input[1] >> (122 - 6 * i)) & 0x3f;
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	3108      	adds	r1, #8
 800062e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000632:	693b      	ldr	r3, [r7, #16]
 8000634:	461e      	mov	r6, r3
 8000636:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800063a:	eba6 060c 	sub.w	r6, r6, ip
 800063e:	0076      	lsls	r6, r6, #1
 8000640:	367a      	adds	r6, #122	; 0x7a
 8000642:	f1c6 0e20 	rsb	lr, r6, #32
 8000646:	f1a6 0c20 	sub.w	ip, r6, #32
 800064a:	fa20 f406 	lsr.w	r4, r0, r6
 800064e:	fa01 fe0e 	lsl.w	lr, r1, lr
 8000652:	ea44 040e 	orr.w	r4, r4, lr
 8000656:	fa21 fc0c 	lsr.w	ip, r1, ip
 800065a:	ea44 040c 	orr.w	r4, r4, ip
 800065e:	fa21 f506 	lsr.w	r5, r1, r6
 8000662:	b2e0      	uxtb	r0, r4
 8000664:	6939      	ldr	r1, [r7, #16]
 8000666:	683e      	ldr	r6, [r7, #0]
 8000668:	4431      	add	r1, r6
 800066a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800066e:	b2c0      	uxtb	r0, r0
 8000670:	7008      	strb	r0, [r1, #0]
    for(int i = 11; i < 21; i++)
 8000672:	6939      	ldr	r1, [r7, #16]
 8000674:	3101      	adds	r1, #1
 8000676:	6139      	str	r1, [r7, #16]
 8000678:	6939      	ldr	r1, [r7, #16]
 800067a:	2914      	cmp	r1, #20
 800067c:	ddd5      	ble.n	800062a <convert_stateuint_to_statechar+0xa2>
    output[21] = ((input[1] & 0x3) << 4) ^ (input[2] >> 60);
 800067e:	6879      	ldr	r1, [r7, #4]
 8000680:	3108      	adds	r1, #8
 8000682:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000686:	b2c1      	uxtb	r1, r0
 8000688:	0109      	lsls	r1, r1, #4
 800068a:	b2c9      	uxtb	r1, r1
 800068c:	f001 0130 	and.w	r1, r1, #48	; 0x30
 8000690:	b2ce      	uxtb	r6, r1
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	3110      	adds	r1, #16
 8000696:	e9d1 4500 	ldrd	r4, r5, [r1]
 800069a:	f04f 0000 	mov.w	r0, #0
 800069e:	f04f 0100 	mov.w	r1, #0
 80006a2:	0f28      	lsrs	r0, r5, #28
 80006a4:	2100      	movs	r1, #0
 80006a6:	b2c0      	uxtb	r0, r0
 80006a8:	6839      	ldr	r1, [r7, #0]
 80006aa:	3115      	adds	r1, #21
 80006ac:	4070      	eors	r0, r6
 80006ae:	b2c0      	uxtb	r0, r0
 80006b0:	7008      	strb	r0, [r1, #0]
    for(int i = 22; i < 32; i++)
 80006b2:	2116      	movs	r1, #22
 80006b4:	60f9      	str	r1, [r7, #12]
 80006b6:	e025      	b.n	8000704 <convert_stateuint_to_statechar+0x17c>
        output[i] = (input[2] >> (186 - 6 * i)) & 0x3f;
 80006b8:	6879      	ldr	r1, [r7, #4]
 80006ba:	3110      	adds	r1, #16
 80006bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80006c0:	68fd      	ldr	r5, [r7, #12]
 80006c2:	462c      	mov	r4, r5
 80006c4:	00ad      	lsls	r5, r5, #2
 80006c6:	1b64      	subs	r4, r4, r5
 80006c8:	0064      	lsls	r4, r4, #1
 80006ca:	34ba      	adds	r4, #186	; 0xba
 80006cc:	f1c4 0620 	rsb	r6, r4, #32
 80006d0:	f1a4 0520 	sub.w	r5, r4, #32
 80006d4:	fa20 fa04 	lsr.w	sl, r0, r4
 80006d8:	fa01 f606 	lsl.w	r6, r1, r6
 80006dc:	ea4a 0a06 	orr.w	sl, sl, r6
 80006e0:	fa21 f505 	lsr.w	r5, r1, r5
 80006e4:	ea4a 0a05 	orr.w	sl, sl, r5
 80006e8:	fa21 fb04 	lsr.w	fp, r1, r4
 80006ec:	fa5f f08a 	uxtb.w	r0, sl
 80006f0:	68f9      	ldr	r1, [r7, #12]
 80006f2:	683c      	ldr	r4, [r7, #0]
 80006f4:	4421      	add	r1, r4
 80006f6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80006fa:	b2c0      	uxtb	r0, r0
 80006fc:	7008      	strb	r0, [r1, #0]
    for(int i = 22; i < 32; i++)
 80006fe:	68f9      	ldr	r1, [r7, #12]
 8000700:	3101      	adds	r1, #1
 8000702:	60f9      	str	r1, [r7, #12]
 8000704:	68f9      	ldr	r1, [r7, #12]
 8000706:	291f      	cmp	r1, #31
 8000708:	ddd6      	ble.n	80006b8 <convert_stateuint_to_statechar+0x130>
}
 800070a:	bf00      	nop
 800070c:	bf00      	nop
 800070e:	371c      	adds	r7, #28
 8000710:	46bd      	mov	sp, r7
 8000712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000716 <convert_statebool_to_statechar>:

void convert_statebool_to_statechar(StateBool input, StateChar output) {
 8000716:	b480      	push	{r7}
 8000718:	b085      	sub	sp, #20
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	6039      	str	r1, [r7, #0]
    for(int i = 0; i < 32; i++) {
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	e032      	b.n	800078c <convert_statebool_to_statechar+0x76>
        output[i] = 0;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	4413      	add	r3, r2
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < 6; j++) {
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	e024      	b.n	8000780 <convert_statebool_to_statechar+0x6a>
            output[i] <<= 1;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	4413      	add	r3, r2
 800073c:	781a      	ldrb	r2, [r3, #0]
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	6839      	ldr	r1, [r7, #0]
 8000742:	440b      	add	r3, r1
 8000744:	0052      	lsls	r2, r2, #1
 8000746:	b2d2      	uxtb	r2, r2
 8000748:	701a      	strb	r2, [r3, #0]
            output[i] ^= input[6 * i + j];
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	683a      	ldr	r2, [r7, #0]
 800074e:	4413      	add	r3, r2
 8000750:	7819      	ldrb	r1, [r3, #0]
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	4613      	mov	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4413      	add	r3, r2
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	461a      	mov	r2, r3
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	4413      	add	r3, r2
 8000762:	461a      	mov	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4413      	add	r3, r2
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	4413      	add	r3, r2
 8000772:	ea81 0200 	eor.w	r2, r1, r0
 8000776:	b2d2      	uxtb	r2, r2
 8000778:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < 6; j++) {
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	3301      	adds	r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	2b05      	cmp	r3, #5
 8000784:	ddd7      	ble.n	8000736 <convert_statebool_to_statechar+0x20>
    for(int i = 0; i < 32; i++) {
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	3301      	adds	r3, #1
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	2b1f      	cmp	r3, #31
 8000790:	ddc9      	ble.n	8000726 <convert_statebool_to_statechar+0x10>
        }
    }
}
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <prepare_round_cons>:
    for(int i = 0; i < 16; i++)
        printf("%X%X%X", input[2 * i] >> 2, ((input[2 * i] & 3) << 2) ^ (input[2 * i + 1] >> 4), input[2 * i + 1] & 0xf);
    printf("\n");
}

void prepare_round_cons() {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
    StateUint RCuint;
    for(int r = 0; r < NR - 1; r++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
 80007aa:	e02e      	b.n	800080a <prepare_round_cons+0x6a>
        RCuint[0] = constants[3 * r];
 80007ac:	69fa      	ldr	r2, [r7, #28]
 80007ae:	4613      	mov	r3, r2
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	4413      	add	r3, r2
 80007b4:	4a19      	ldr	r2, [pc, #100]	; (800081c <prepare_round_cons+0x7c>)
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	4413      	add	r3, r2
 80007ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007be:	e9c7 2300 	strd	r2, r3, [r7]
        RCuint[1] = constants[3 * r + 1];
 80007c2:	69fa      	ldr	r2, [r7, #28]
 80007c4:	4613      	mov	r3, r2
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	4413      	add	r3, r2
 80007ca:	3301      	adds	r3, #1
 80007cc:	4a13      	ldr	r2, [pc, #76]	; (800081c <prepare_round_cons+0x7c>)
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	4413      	add	r3, r2
 80007d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
        RCuint[2] = constants[3 * r + 2];
 80007da:	69fa      	ldr	r2, [r7, #28]
 80007dc:	4613      	mov	r3, r2
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	4413      	add	r3, r2
 80007e2:	3302      	adds	r3, #2
 80007e4:	4a0d      	ldr	r2, [pc, #52]	; (800081c <prepare_round_cons+0x7c>)
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	4413      	add	r3, r2
 80007ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007ee:	e9c7 2304 	strd	r2, r3, [r7, #16]
        convert_stateuint_to_statechar(RCuint, RoundCons[r]);
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	015b      	lsls	r3, r3, #5
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <prepare_round_cons+0x80>)
 80007f8:	441a      	add	r2, r3
 80007fa:	463b      	mov	r3, r7
 80007fc:	4611      	mov	r1, r2
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fec2 	bl	8000588 <convert_stateuint_to_statechar>
    for(int r = 0; r < NR - 1; r++) {
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	3301      	adds	r3, #1
 8000808:	61fb      	str	r3, [r7, #28]
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	2b05      	cmp	r3, #5
 800080e:	ddcd      	ble.n	80007ac <prepare_round_cons+0xc>
    }
}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	3720      	adds	r7, #32
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	08005288 	.word	0x08005288
 8000820:	20000098 	.word	0x20000098

08000824 <prepare_round_keys>:

void prepare_round_keys(StateUint Key) {
 8000824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000826:	b0e9      	sub	sp, #420	; 0x1a4
 8000828:	af00      	add	r7, sp, #0
 800082a:	1d39      	adds	r1, r7, #4
 800082c:	6008      	str	r0, [r1, #0]
    StateBool TempRoundKeyState[2];

    for(int i = 0; i < 3; i++)
 800082e:	2100      	movs	r1, #0
 8000830:	f8c7 119c 	str.w	r1, [r7, #412]	; 0x19c
 8000834:	e045      	b.n	80008c2 <prepare_round_keys+0x9e>
        for(int j = 0; j < 64; j++)
 8000836:	2100      	movs	r1, #0
 8000838:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 800083c:	e038      	b.n	80008b0 <prepare_round_keys+0x8c>
            TempRoundKeyState[0][64 * i + j] = (Key[i] >> (63 - j)) & 1;
 800083e:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8000842:	00c9      	lsls	r1, r1, #3
 8000844:	1d38      	adds	r0, r7, #4
 8000846:	6800      	ldr	r0, [r0, #0]
 8000848:	4401      	add	r1, r0
 800084a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800084e:	f8d7 6198 	ldr.w	r6, [r7, #408]	; 0x198
 8000852:	f1c6 063f 	rsb	r6, r6, #63	; 0x3f
 8000856:	f1c6 0e20 	rsb	lr, r6, #32
 800085a:	f1a6 0c20 	sub.w	ip, r6, #32
 800085e:	fa20 f206 	lsr.w	r2, r0, r6
 8000862:	fa01 fe0e 	lsl.w	lr, r1, lr
 8000866:	ea42 020e 	orr.w	r2, r2, lr
 800086a:	fa21 fc0c 	lsr.w	ip, r1, ip
 800086e:	ea42 020c 	orr.w	r2, r2, ip
 8000872:	fa21 f306 	lsr.w	r3, r1, r6
 8000876:	f04f 0001 	mov.w	r0, #1
 800087a:	f04f 0100 	mov.w	r1, #0
 800087e:	ea02 0400 	and.w	r4, r2, r0
 8000882:	ea03 0501 	and.w	r5, r3, r1
 8000886:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800088a:	0188      	lsls	r0, r1, #6
 800088c:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 8000890:	4401      	add	r1, r0
 8000892:	ea44 0005 	orr.w	r0, r4, r5
 8000896:	2800      	cmp	r0, #0
 8000898:	bf14      	ite	ne
 800089a:	2001      	movne	r0, #1
 800089c:	2000      	moveq	r0, #0
 800089e:	b2c6      	uxtb	r6, r0
 80008a0:	f107 000c 	add.w	r0, r7, #12
 80008a4:	5446      	strb	r6, [r0, r1]
        for(int j = 0; j < 64; j++)
 80008a6:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 80008aa:	3101      	adds	r1, #1
 80008ac:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 80008b0:	f8d7 1198 	ldr.w	r1, [r7, #408]	; 0x198
 80008b4:	293f      	cmp	r1, #63	; 0x3f
 80008b6:	ddc2      	ble.n	800083e <prepare_round_keys+0x1a>
    for(int i = 0; i < 3; i++)
 80008b8:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 80008bc:	3101      	adds	r1, #1
 80008be:	f8c7 119c 	str.w	r1, [r7, #412]	; 0x19c
 80008c2:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 80008c6:	2902      	cmp	r1, #2
 80008c8:	ddb5      	ble.n	8000836 <prepare_round_keys+0x12>

    convert_statebool_to_statechar(TempRoundKeyState[0], RoundKeys[0]);
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	493f      	ldr	r1, [pc, #252]	; (80009cc <prepare_round_keys+0x1a8>)
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff20 	bl	8000716 <convert_statebool_to_statechar>

    for(int r = 1; r <= NR; r++) {
 80008d6:	2301      	movs	r3, #1
 80008d8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80008dc:	e06c      	b.n	80009b8 <prepare_round_keys+0x194>
        bool ind_new = (r % 2);
 80008de:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	bfb8      	it	lt
 80008ea:	425b      	neglt	r3, r3
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	bf14      	ite	ne
 80008f0:	2301      	movne	r3, #1
 80008f2:	2300      	moveq	r3, #0
 80008f4:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
        bool ind_old = !ind_new;
 80008f8:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	bf14      	ite	ne
 8000900:	2301      	movne	r3, #1
 8000902:	2300      	moveq	r3, #0
 8000904:	b2db      	uxtb	r3, r3
 8000906:	f083 0301 	eor.w	r3, r3, #1
 800090a:	b2db      	uxtb	r3, r3
 800090c:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
 8000910:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e

        for(int i = 0; i < 192; i++)
 800091c:	2300      	movs	r3, #0
 800091e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8000922:	e02e      	b.n	8000982 <prepare_round_keys+0x15e>
            TempRoundKeyState[ind_new][i] = TempRoundKeyState[ind_old][(7 * i + 1) % 192];
 8000924:	f897 018e 	ldrb.w	r0, [r7, #398]	; 0x18e
 8000928:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 800092c:	4613      	mov	r3, r2
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	1a9b      	subs	r3, r3, r2
 8000932:	1c59      	adds	r1, r3, #1
 8000934:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <prepare_round_keys+0x1ac>)
 8000936:	fb83 2301 	smull	r2, r3, r3, r1
 800093a:	115a      	asrs	r2, r3, #5
 800093c:	17cb      	asrs	r3, r1, #31
 800093e:	1ad2      	subs	r2, r2, r3
 8000940:	4613      	mov	r3, r2
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	4413      	add	r3, r2
 8000946:	019b      	lsls	r3, r3, #6
 8000948:	1aca      	subs	r2, r1, r3
 800094a:	f897 118f 	ldrb.w	r1, [r7, #399]	; 0x18f
 800094e:	f107 040c 	add.w	r4, r7, #12
 8000952:	4603      	mov	r3, r0
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	4403      	add	r3, r0
 8000958:	019b      	lsls	r3, r3, #6
 800095a:	4423      	add	r3, r4
 800095c:	4413      	add	r3, r2
 800095e:	7818      	ldrb	r0, [r3, #0]
 8000960:	f107 020c 	add.w	r2, r7, #12
 8000964:	460b      	mov	r3, r1
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	440b      	add	r3, r1
 800096a:	019b      	lsls	r3, r3, #6
 800096c:	441a      	add	r2, r3
 800096e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000972:	4413      	add	r3, r2
 8000974:	4602      	mov	r2, r0
 8000976:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i < 192; i++)
 8000978:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800097c:	3301      	adds	r3, #1
 800097e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8000982:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000986:	2bbf      	cmp	r3, #191	; 0xbf
 8000988:	ddcc      	ble.n	8000924 <prepare_round_keys+0x100>
        convert_statebool_to_statechar(TempRoundKeyState[ind_new], RoundKeys[r]);
 800098a:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 800098e:	f107 010c 	add.w	r1, r7, #12
 8000992:	4613      	mov	r3, r2
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	4413      	add	r3, r2
 8000998:	019b      	lsls	r3, r3, #6
 800099a:	18ca      	adds	r2, r1, r3
 800099c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80009a0:	015b      	lsls	r3, r3, #5
 80009a2:	490a      	ldr	r1, [pc, #40]	; (80009cc <prepare_round_keys+0x1a8>)
 80009a4:	440b      	add	r3, r1
 80009a6:	4619      	mov	r1, r3
 80009a8:	4610      	mov	r0, r2
 80009aa:	f7ff feb4 	bl	8000716 <convert_statebool_to_statechar>
    for(int r = 1; r <= NR; r++) {
 80009ae:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80009b2:	3301      	adds	r3, #1
 80009b4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80009b8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80009bc:	2b07      	cmp	r3, #7
 80009be:	dd8e      	ble.n	80008de <prepare_round_keys+0xba>
    }
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009cc:	20000158 	.word	0x20000158
 80009d0:	2aaaaaab 	.word	0x2aaaaaab

080009d4 <AK>:

void AK(StateChar input, int r) {
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	6039      	str	r1, [r7, #0]
    for(int i = 0; i < 32; i++)
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	e013      	b.n	8000a0c <AK+0x38>
        input[i] ^= RoundKeys[r][i];
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	7819      	ldrb	r1, [r3, #0]
 80009ec:	4a0c      	ldr	r2, [pc, #48]	; (8000a20 <AK+0x4c>)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	015b      	lsls	r3, r3, #5
 80009f2:	441a      	add	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4413      	add	r3, r2
 80009f8:	781a      	ldrb	r2, [r3, #0]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	4403      	add	r3, r0
 8000a00:	404a      	eors	r2, r1
 8000a02:	b2d2      	uxtb	r2, r2
 8000a04:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 32; i++)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2b1f      	cmp	r3, #31
 8000a10:	dde8      	ble.n	80009e4 <AK+0x10>
}
 8000a12:	bf00      	nop
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	20000158 	.word	0x20000158

08000a24 <AC>:

void AC(StateChar input, int r) {
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
    for(int i = 0; i < 32; i++)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	e013      	b.n	8000a5c <AC+0x38>
        input[i] ^= RoundCons[r][i];
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	7819      	ldrb	r1, [r3, #0]
 8000a3c:	4a0c      	ldr	r2, [pc, #48]	; (8000a70 <AC+0x4c>)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	015b      	lsls	r3, r3, #5
 8000a42:	441a      	add	r2, r3
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	4413      	add	r3, r2
 8000a48:	781a      	ldrb	r2, [r3, #0]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	4403      	add	r3, r0
 8000a50:	404a      	eors	r2, r1
 8000a52:	b2d2      	uxtb	r2, r2
 8000a54:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 32; i++)
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	2b1f      	cmp	r3, #31
 8000a60:	dde8      	ble.n	8000a34 <AC+0x10>
}
 8000a62:	bf00      	nop
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	20000098 	.word	0x20000098

08000a74 <SB>:

void SB(StateChar input) {
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 32; i++)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	e00d      	b.n	8000a9e <SB+0x2a>
        input[i] = S[(int)input[i]];
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	4413      	add	r3, r2
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <SB+0x40>)
 8000a94:	5c52      	ldrb	r2, [r2, r1]
 8000a96:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 32; i++)
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2b1f      	cmp	r3, #31
 8000aa2:	ddee      	ble.n	8000a82 <SB+0xe>
}
 8000aa4:	bf00      	nop
 8000aa6:	bf00      	nop
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	08005204 	.word	0x08005204

08000ab8 <SBI>:

void SBI(StateChar input) {
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 32; i++)
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	e00d      	b.n	8000ae2 <SBI+0x2a>
        input[i] = SI[(int)input[i]];
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	4413      	add	r3, r2
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <SBI+0x40>)
 8000ad8:	5c52      	ldrb	r2, [r2, r1]
 8000ada:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 32; i++)
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	2b1f      	cmp	r3, #31
 8000ae6:	ddee      	ble.n	8000ac6 <SBI+0xe>
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	08005244 	.word	0x08005244

08000afc <MC>:

void MC(StateChar input) {
 8000afc:	b4b0      	push	{r4, r5, r7}
 8000afe:	b095      	sub	sp, #84	; 0x54
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
    const int alphas[] = {1, 5, 9, 15, 21, 26};
 8000b04:	4b29      	ldr	r3, [pc, #164]	; (8000bac <MC+0xb0>)
 8000b06:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000b0a:	461d      	mov	r5, r3
 8000b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b10:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b14:	e884 0003 	stmia.w	r4, {r0, r1}

    StateChar temp;
    for(int i = 0; i < 32; i++)
 8000b18:	2300      	movs	r3, #0
 8000b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b1c:	e00c      	b.n	8000b38 <MC+0x3c>
        temp[i] = input[i];
 8000b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	4413      	add	r3, r2
 8000b24:	7819      	ldrb	r1, [r3, #0]
 8000b26:	f107 020c 	add.w	r2, r7, #12
 8000b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b2c:	4413      	add	r3, r2
 8000b2e:	460a      	mov	r2, r1
 8000b30:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 32; i++)
 8000b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b34:	3301      	adds	r3, #1
 8000b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b3a:	2b1f      	cmp	r3, #31
 8000b3c:	ddef      	ble.n	8000b1e <MC+0x22>

    for(int a = 0; a < (sizeof(alphas) / sizeof(alphas[0])); a++)
 8000b3e:	2300      	movs	r3, #0
 8000b40:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b42:	e02a      	b.n	8000b9a <MC+0x9e>
    {
        for(int i = 0; i < 32; i++)
 8000b44:	2300      	movs	r3, #0
 8000b46:	647b      	str	r3, [r7, #68]	; 0x44
 8000b48:	e021      	b.n	8000b8e <MC+0x92>
            input[i] ^= temp[(i + alphas[a]) % 32];
 8000b4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	4413      	add	r3, r2
 8000b50:	7819      	ldrb	r1, [r3, #0]
 8000b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000b5a:	4413      	add	r3, r2
 8000b5c:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8000b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b62:	4413      	add	r3, r2
 8000b64:	425a      	negs	r2, r3
 8000b66:	f003 031f 	and.w	r3, r3, #31
 8000b6a:	f002 021f 	and.w	r2, r2, #31
 8000b6e:	bf58      	it	pl
 8000b70:	4253      	negpl	r3, r2
 8000b72:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000b76:	4413      	add	r3, r2
 8000b78:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 8000b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	4403      	add	r3, r0
 8000b82:	404a      	eors	r2, r1
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i < 32; i++)
 8000b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	647b      	str	r3, [r7, #68]	; 0x44
 8000b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b90:	2b1f      	cmp	r3, #31
 8000b92:	ddda      	ble.n	8000b4a <MC+0x4e>
    for(int a = 0; a < (sizeof(alphas) / sizeof(alphas[0])); a++)
 8000b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b96:	3301      	adds	r3, #1
 8000b98:	64bb      	str	r3, [r7, #72]	; 0x48
 8000b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b9c:	2b05      	cmp	r3, #5
 8000b9e:	d9d1      	bls.n	8000b44 <MC+0x48>
    }
}
 8000ba0:	bf00      	nop
 8000ba2:	bf00      	nop
 8000ba4:	3754      	adds	r7, #84	; 0x54
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bcb0      	pop	{r4, r5, r7}
 8000baa:	4770      	bx	lr
 8000bac:	08004f48 	.word	0x08004f48

08000bb0 <MCI>:

void MCI(StateChar input) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b0a0      	sub	sp, #128	; 0x80
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
    const int alphas[] = {4, 5, 6, 7, 10, 12, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28};
 8000bb8:	4a28      	ldr	r2, [pc, #160]	; (8000c5c <MCI+0xac>)
 8000bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	2248      	movs	r2, #72	; 0x48
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f003 fd78 	bl	80046b8 <memcpy>

    StateChar temp;
    for(int i = 0; i < 32; i++)
 8000bc8:	2300      	movs	r3, #0
 8000bca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000bcc:	e00c      	b.n	8000be8 <MCI+0x38>
        temp[i] = input[i];
 8000bce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	7819      	ldrb	r1, [r3, #0]
 8000bd6:	f107 020c 	add.w	r2, r7, #12
 8000bda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000bdc:	4413      	add	r3, r2
 8000bde:	460a      	mov	r2, r1
 8000be0:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 32; i++)
 8000be2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000be4:	3301      	adds	r3, #1
 8000be6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000be8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000bea:	2b1f      	cmp	r3, #31
 8000bec:	ddef      	ble.n	8000bce <MCI+0x1e>

    for(int a = 0; a < (sizeof(alphas) / sizeof(alphas[0])); a++)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8000bf2:	e02a      	b.n	8000c4a <MCI+0x9a>
    {
        for(int i = 0; i < 32; i++)
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	677b      	str	r3, [r7, #116]	; 0x74
 8000bf8:	e021      	b.n	8000c3e <MCI+0x8e>
            input[i] ^= temp[(i + alphas[a]) % 32];
 8000bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	4413      	add	r3, r2
 8000c00:	7819      	ldrb	r1, [r3, #0]
 8000c02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000c0a:	4413      	add	r3, r2
 8000c0c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8000c10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c12:	4413      	add	r3, r2
 8000c14:	425a      	negs	r2, r3
 8000c16:	f003 031f 	and.w	r3, r3, #31
 8000c1a:	f002 021f 	and.w	r2, r2, #31
 8000c1e:	bf58      	it	pl
 8000c20:	4253      	negpl	r3, r2
 8000c22:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000c26:	4413      	add	r3, r2
 8000c28:	f813 2c74 	ldrb.w	r2, [r3, #-116]
 8000c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	4403      	add	r3, r0
 8000c32:	404a      	eors	r2, r1
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i < 32; i++)
 8000c38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	677b      	str	r3, [r7, #116]	; 0x74
 8000c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c40:	2b1f      	cmp	r3, #31
 8000c42:	ddda      	ble.n	8000bfa <MCI+0x4a>
    for(int a = 0; a < (sizeof(alphas) / sizeof(alphas[0])); a++)
 8000c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c46:	3301      	adds	r3, #1
 8000c48:	67bb      	str	r3, [r7, #120]	; 0x78
 8000c4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c4c:	2b11      	cmp	r3, #17
 8000c4e:	d9d1      	bls.n	8000bf4 <MCI+0x44>
    }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	3780      	adds	r7, #128	; 0x80
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	08004f60 	.word	0x08004f60

08000c60 <SC>:

void SC(StateChar input) {
 8000c60:	b480      	push	{r7}
 8000c62:	b0b7      	sub	sp, #220	; 0xdc
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
    bool temp[32][6];
    for(int i = 0; i < 32; i++)
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000c6e:	e03e      	b.n	8000cee <SC+0x8e>
        for(int j = 0; j < 6; j++)
 8000c70:	2300      	movs	r3, #0
 8000c72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000c76:	e031      	b.n	8000cdc <SC+0x7c>
            temp[i][j] = ((input[(i + j) % 32] >> (5 - j)) & 1);
 8000c78:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000c7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000c80:	4413      	add	r3, r2
 8000c82:	425a      	negs	r2, r3
 8000c84:	f003 031f 	and.w	r3, r3, #31
 8000c88:	f002 021f 	and.w	r2, r2, #31
 8000c8c:	bf58      	it	pl
 8000c8e:	4253      	negpl	r3, r2
 8000c90:	461a      	mov	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000c9e:	f1c3 0305 	rsb	r3, r3, #5
 8000ca2:	fa42 f303 	asr.w	r3, r2, r3
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	bf14      	ite	ne
 8000cae:	2301      	movne	r3, #1
 8000cb0:	2300      	moveq	r3, #0
 8000cb2:	b2d9      	uxtb	r1, r3
 8000cb4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000cb8:	4613      	mov	r3, r2
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	4413      	add	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000cc4:	441a      	add	r2, r3
 8000cc6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000cca:	4413      	add	r3, r2
 8000ccc:	3bd0      	subs	r3, #208	; 0xd0
 8000cce:	460a      	mov	r2, r1
 8000cd0:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < 6; j++)
 8000cd2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000cdc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000ce0:	2b05      	cmp	r3, #5
 8000ce2:	ddc9      	ble.n	8000c78 <SC+0x18>
    for(int i = 0; i < 32; i++)
 8000ce4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000ce8:	3301      	adds	r3, #1
 8000cea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000cee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000cf2:	2b1f      	cmp	r3, #31
 8000cf4:	ddbc      	ble.n	8000c70 <SC+0x10>

    for(int i = 0; i < 32; i++) {
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000cfc:	e03f      	b.n	8000d7e <SC+0x11e>
        input[i] = 0;
 8000cfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < 6; j++) {
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000d10:	e02c      	b.n	8000d6c <SC+0x10c>
            input[i] <<= 1;
 8000d12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781a      	ldrb	r2, [r3, #0]
 8000d1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000d20:	6879      	ldr	r1, [r7, #4]
 8000d22:	440b      	add	r3, r1
 8000d24:	0052      	lsls	r2, r2, #1
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	701a      	strb	r2, [r3, #0]
            input[i] ^= temp[i][j];
 8000d2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	7819      	ldrb	r1, [r3, #0]
 8000d34:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000d38:	4613      	mov	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000d44:	441a      	add	r2, r3
 8000d46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000d4a:	4413      	add	r3, r2
 8000d4c:	3bd0      	subs	r3, #208	; 0xd0
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	ea81 0200 	eor.w	r2, r1, r0
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < 6; j++) {
 8000d62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000d66:	3301      	adds	r3, #1
 8000d68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000d6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000d70:	2b05      	cmp	r3, #5
 8000d72:	ddce      	ble.n	8000d12 <SC+0xb2>
    for(int i = 0; i < 32; i++) {
 8000d74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000d78:	3301      	adds	r3, #1
 8000d7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000d7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000d82:	2b1f      	cmp	r3, #31
 8000d84:	ddbb      	ble.n	8000cfe <SC+0x9e>
        }
    }
}
 8000d86:	bf00      	nop
 8000d88:	bf00      	nop
 8000d8a:	37dc      	adds	r7, #220	; 0xdc
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <SCI>:

void SCI(StateChar input) {
 8000d94:	b480      	push	{r7}
 8000d96:	b0b7      	sub	sp, #220	; 0xdc
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
    bool temp[32][6];
    for(int i = 0; i < 32; i++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000da2:	e03d      	b.n	8000e20 <SCI+0x8c>
        for(int j = 0; j < 6; j++)
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000daa:	e030      	b.n	8000e0e <SCI+0x7a>
            temp[(i + j) % 32][j] = ((input[i] >> (5 - j)) & 1);
 8000dac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	4413      	add	r3, r2
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000dbc:	f1c3 0305 	rsb	r3, r3, #5
 8000dc0:	fa42 f303 	asr.w	r3, r2, r3
 8000dc4:	f003 0101 	and.w	r1, r3, #1
 8000dc8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8000dcc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4258      	negs	r0, r3
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	f000 031f 	and.w	r3, r0, #31
 8000ddc:	bf58      	it	pl
 8000dde:	425a      	negpl	r2, r3
 8000de0:	2900      	cmp	r1, #0
 8000de2:	bf14      	ite	ne
 8000de4:	2301      	movne	r3, #1
 8000de6:	2300      	moveq	r3, #0
 8000de8:	b2d9      	uxtb	r1, r3
 8000dea:	4613      	mov	r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000df6:	441a      	add	r2, r3
 8000df8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000dfc:	4413      	add	r3, r2
 8000dfe:	3bd0      	subs	r3, #208	; 0xd0
 8000e00:	460a      	mov	r2, r1
 8000e02:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < 6; j++)
 8000e04:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000e08:	3301      	adds	r3, #1
 8000e0a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000e0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000e12:	2b05      	cmp	r3, #5
 8000e14:	ddca      	ble.n	8000dac <SCI+0x18>
    for(int i = 0; i < 32; i++)
 8000e16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000e20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000e24:	2b1f      	cmp	r3, #31
 8000e26:	ddbd      	ble.n	8000da4 <SCI+0x10>

    for(int i = 0; i < 32; i++) {
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000e2e:	e03f      	b.n	8000eb0 <SCI+0x11c>
        input[i] = 0;
 8000e30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	4413      	add	r3, r2
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < 6; j++) {
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000e42:	e02c      	b.n	8000e9e <SCI+0x10a>
            input[i] <<= 1;
 8000e44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	781a      	ldrb	r2, [r3, #0]
 8000e4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	440b      	add	r3, r1
 8000e56:	0052      	lsls	r2, r2, #1
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	701a      	strb	r2, [r3, #0]
            input[i] ^= temp[i][j];
 8000e5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	4413      	add	r3, r2
 8000e64:	7819      	ldrb	r1, [r3, #0]
 8000e66:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4413      	add	r3, r2
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8000e76:	441a      	add	r2, r3
 8000e78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000e7c:	4413      	add	r3, r2
 8000e7e:	3bd0      	subs	r3, #208	; 0xd0
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	ea81 0200 	eor.w	r2, r1, r0
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < 6; j++) {
 8000e94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000e98:	3301      	adds	r3, #1
 8000e9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000e9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000ea2:	2b05      	cmp	r3, #5
 8000ea4:	ddce      	ble.n	8000e44 <SCI+0xb0>
    for(int i = 0; i < 32; i++) {
 8000ea6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000eaa:	3301      	adds	r3, #1
 8000eac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000eb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000eb4:	2b1f      	cmp	r3, #31
 8000eb6:	ddbb      	ble.n	8000e30 <SCI+0x9c>
        }
    }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	37dc      	adds	r7, #220	; 0xdc
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
	...

08000ec8 <Encrypt>:

void Encrypt(StateUint Plaintext, StateUint Key, uint8_t *enc) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b094      	sub	sp, #80	; 0x50
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
    prepare_round_cons();
 8000ed4:	f7ff fc64 	bl	80007a0 <prepare_round_cons>
    prepare_round_keys(Key);
 8000ed8:	68b8      	ldr	r0, [r7, #8]
 8000eda:	f7ff fca3 	bl	8000824 <prepare_round_keys>

    StateChar TempState;
    convert_stateuint_to_statechar(Plaintext, TempState);
 8000ede:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	68f8      	ldr	r0, [r7, #12]
 8000ee6:	f7ff fb4f 	bl	8000588 <convert_stateuint_to_statechar>

    for(int r = 0; r < NR; r++) {
 8000eea:	2300      	movs	r3, #0
 8000eec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000eee:	e031      	b.n	8000f54 <Encrypt+0x8c>
        AK(TempState, r);
 8000ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fd6c 	bl	80009d4 <AK>
        SB(TempState);
 8000efc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fdb7 	bl	8000a74 <SB>
        SC(TempState);
 8000f06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fea8 	bl	8000c60 <SC>
        SB(TempState);
 8000f10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fdad 	bl	8000a74 <SB>

        if (r == (NR - 1))
 8000f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f1c:	2b06      	cmp	r3, #6
 8000f1e:	d106      	bne.n	8000f2e <Encrypt+0x66>
            AK(TempState, NR);
 8000f20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f24:	2107      	movs	r1, #7
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fd54 	bl	80009d4 <AK>
 8000f2c:	e00f      	b.n	8000f4e <Encrypt+0x86>
        else {
            SC(TempState);
 8000f2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fe94 	bl	8000c60 <SC>
            MC(TempState);
 8000f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fddd 	bl	8000afc <MC>
            AC(TempState, r);
 8000f42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f46:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fd6b 	bl	8000a24 <AC>
    for(int r = 0; r < NR; r++) {
 8000f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f50:	3301      	adds	r3, #1
 8000f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	ddca      	ble.n	8000ef0 <Encrypt+0x28>
        }
    }
    uint8_t pr[24] = {0};
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	f107 0318 	add.w	r3, r7, #24
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]
    print_state2(TempState, pr);
 8000f6e:	f107 0214 	add.w	r2, r7, #20
 8000f72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 f89f 	bl	80010bc <print_state2>
    serial_out2("Encryption pr := ", (uint8_t*)&pr);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	4808      	ldr	r0, [pc, #32]	; (8000fa8 <Encrypt+0xe0>)
 8000f86:	f000 fe45 	bl	8001c14 <serial_out2>
    memcpy(enc, pr, 48);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	2230      	movs	r2, #48	; 0x30
 8000f90:	4619      	mov	r1, r3
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f003 fb90 	bl	80046b8 <memcpy>
    serial_out2("Encryption enc := ", enc);
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	4804      	ldr	r0, [pc, #16]	; (8000fac <Encrypt+0xe4>)
 8000f9c:	f000 fe3a 	bl	8001c14 <serial_out2>

}
 8000fa0:	bf00      	nop
 8000fa2:	3750      	adds	r7, #80	; 0x50
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	08004fa8 	.word	0x08004fa8
 8000fac:	08004fbc 	.word	0x08004fbc

08000fb0 <Decrypt>:

void Decrypt(StateUint Ciphertext, StateUint Key, uint8_t *dec) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b094      	sub	sp, #80	; 0x50
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
    prepare_round_cons();
 8000fbc:	f7ff fbf0 	bl	80007a0 <prepare_round_cons>
    prepare_round_keys(Key);
 8000fc0:	68b8      	ldr	r0, [r7, #8]
 8000fc2:	f7ff fc2f 	bl	8000824 <prepare_round_keys>

    StateChar TempState;
    convert_stateuint_to_statechar(Ciphertext, TempState);
 8000fc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fca:	4619      	mov	r1, r3
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f7ff fadb 	bl	8000588 <convert_stateuint_to_statechar>

    AK(TempState, NR);
 8000fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd6:	2107      	movs	r1, #7
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fcfb 	bl	80009d4 <AK>
    SBI(TempState);
 8000fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fd68 	bl	8000ab8 <SBI>
    SCI(TempState);
 8000fe8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fed1 	bl	8000d94 <SCI>
    SBI(TempState);
 8000ff2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fd5e 	bl	8000ab8 <SBI>
    AK(TempState, NR - 1);
 8000ffc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001000:	2106      	movs	r1, #6
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fce6 	bl	80009d4 <AK>

    for(int r = NR - 2; r >= 0; r--) {
 8001008:	2305      	movs	r3, #5
 800100a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800100c:	e027      	b.n	800105e <Decrypt+0xae>
        AC(TempState, r);
 800100e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001012:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fd05 	bl	8000a24 <AC>
        MCI(TempState);
 800101a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fdc6 	bl	8000bb0 <MCI>
        SCI(TempState);
 8001024:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff feb3 	bl	8000d94 <SCI>
        SBI(TempState);
 800102e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fd40 	bl	8000ab8 <SBI>
        SCI(TempState);
 8001038:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fea9 	bl	8000d94 <SCI>
        SBI(TempState);
 8001042:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fd36 	bl	8000ab8 <SBI>
        AK(TempState, r);
 800104c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001050:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fcbe 	bl	80009d4 <AK>
    for(int r = NR - 2; r >= 0; r--) {
 8001058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800105a:	3b01      	subs	r3, #1
 800105c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800105e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001060:	2b00      	cmp	r3, #0
 8001062:	dad4      	bge.n	800100e <Decrypt+0x5e>
    }
    uint8_t pr[24] = {0};
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	f107 0318 	add.w	r3, r7, #24
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
    print_state2(TempState, pr);
 8001078:	f107 0214 	add.w	r2, r7, #20
 800107c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f81a 	bl	80010bc <print_state2>
    serial_out2("Decryption res := ", (uint8_t*)&pr);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	4809      	ldr	r0, [pc, #36]	; (80010b4 <Decrypt+0x104>)
 8001090:	f000 fdc0 	bl	8001c14 <serial_out2>

    memcpy(dec, pr, 48);
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2230      	movs	r2, #48	; 0x30
 800109a:	4619      	mov	r1, r3
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f003 fb0b 	bl	80046b8 <memcpy>
    serial_out2("Decryption dec := ", dec);
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <Decrypt+0x108>)
 80010a6:	f000 fdb5 	bl	8001c14 <serial_out2>
}
 80010aa:	bf00      	nop
 80010ac:	3750      	adds	r7, #80	; 0x50
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	08004fd0 	.word	0x08004fd0
 80010b8:	08004fe4 	.word	0x08004fe4

080010bc <print_state2>:
{
  for (unsigned long long i = 0; i < numbytes; i++)
    buffer[i] = (unsigned char)i;
}

void print_state2(StateChar input, uint8_t *output) {
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
    // i = 0
    output[0] = ((input[0] >> 2) << 4) | (((input[0] & 3) << 2) ^ (input[1] >> 4));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	089b      	lsrs	r3, r3, #2
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	b25a      	sxtb	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	f003 030c 	and.w	r3, r3, #12
 80010de:	b259      	sxtb	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3301      	adds	r3, #1
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	091b      	lsrs	r3, r3, #4
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	b25b      	sxtb	r3, r3
 80010ec:	404b      	eors	r3, r1
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	701a      	strb	r2, [r3, #0]
    output[1] = ((input[1] & 0xf) << 4) | (input[2] >> 2);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3301      	adds	r3, #1
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	b25a      	sxtb	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3302      	adds	r3, #2
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	b2db      	uxtb	r3, r3
 800110e:	b25b      	sxtb	r3, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	b25a      	sxtb	r2, r3
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	701a      	strb	r2, [r3, #0]
    // i = 1
    output[2] = ((((input[2] & 3) << 2) ^ (input[3] >> 4)) << 4) | (input[3] & 0xf);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3302      	adds	r3, #2
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	f003 030c 	and.w	r3, r3, #12
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	3203      	adds	r2, #3
 800112c:	7812      	ldrb	r2, [r2, #0]
 800112e:	0912      	lsrs	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	4053      	eors	r3, r2
 8001134:	011b      	lsls	r3, r3, #4
 8001136:	b25a      	sxtb	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3303      	adds	r3, #3
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b25b      	sxtb	r3, r3
 8001140:	f003 030f 	and.w	r3, r3, #15
 8001144:	b25b      	sxtb	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	b25a      	sxtb	r2, r3
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	3302      	adds	r3, #2
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	701a      	strb	r2, [r3, #0]
    // i = 2
    output[3] = ((input[4] >> 2) << 4) | (((input[4] & 3) << 2) ^ (input[5] >> 4));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3304      	adds	r3, #4
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	089b      	lsrs	r3, r3, #2
 800115a:	b2db      	uxtb	r3, r3
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	b25a      	sxtb	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3304      	adds	r3, #4
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	b25b      	sxtb	r3, r3
 800116a:	f003 030c 	and.w	r3, r3, #12
 800116e:	b259      	sxtb	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3305      	adds	r3, #5
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	091b      	lsrs	r3, r3, #4
 8001178:	b2db      	uxtb	r3, r3
 800117a:	b25b      	sxtb	r3, r3
 800117c:	404b      	eors	r3, r1
 800117e:	b25b      	sxtb	r3, r3
 8001180:	4313      	orrs	r3, r2
 8001182:	b25a      	sxtb	r2, r3
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	3303      	adds	r3, #3
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	701a      	strb	r2, [r3, #0]
    output[4] = ((input[5] & 0xf) << 4) | (input[6] >> 2);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3305      	adds	r3, #5
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	b25a      	sxtb	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3306      	adds	r3, #6
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	089b      	lsrs	r3, r3, #2
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	4313      	orrs	r3, r2
 80011a4:	b25a      	sxtb	r2, r3
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	3304      	adds	r3, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	701a      	strb	r2, [r3, #0]
    // i = 3
    output[5] = ((((input[6] & 3) << 2) ^ (input[7] >> 4)) << 4) | (input[7] & 0xf) ;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3306      	adds	r3, #6
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	3207      	adds	r2, #7
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	0912      	lsrs	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	4053      	eors	r3, r2
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	b25a      	sxtb	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3307      	adds	r3, #7
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b25b      	sxtb	r3, r3
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	4313      	orrs	r3, r2
 80011da:	b25a      	sxtb	r2, r3
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	3305      	adds	r3, #5
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	701a      	strb	r2, [r3, #0]
    // i = 4
    output[6] = ((input[8] >> 2) << 4) | (((input[8] & 3) << 2) ^ (input[9] >> 4));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3308      	adds	r3, #8
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	b25a      	sxtb	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3308      	adds	r3, #8
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	b25b      	sxtb	r3, r3
 80011fc:	f003 030c 	and.w	r3, r3, #12
 8001200:	b259      	sxtb	r1, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3309      	adds	r3, #9
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	091b      	lsrs	r3, r3, #4
 800120a:	b2db      	uxtb	r3, r3
 800120c:	b25b      	sxtb	r3, r3
 800120e:	404b      	eors	r3, r1
 8001210:	b25b      	sxtb	r3, r3
 8001212:	4313      	orrs	r3, r2
 8001214:	b25a      	sxtb	r2, r3
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	3306      	adds	r3, #6
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	701a      	strb	r2, [r3, #0]
    output[7] = ((input[9] & 0xf) << 4) | (input[10] >> 2);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3309      	adds	r3, #9
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	b25a      	sxtb	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	330a      	adds	r3, #10
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	b2db      	uxtb	r3, r3
 8001232:	b25b      	sxtb	r3, r3
 8001234:	4313      	orrs	r3, r2
 8001236:	b25a      	sxtb	r2, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	3307      	adds	r3, #7
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	701a      	strb	r2, [r3, #0]
    // i = 5
    output[8] = ((((input[10] & 3) << 2) ^ (input[11] >> 4)) << 4) | (input[11] & 0xf);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	330a      	adds	r3, #10
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	f003 030c 	and.w	r3, r3, #12
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	320b      	adds	r2, #11
 8001250:	7812      	ldrb	r2, [r2, #0]
 8001252:	0912      	lsrs	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	4053      	eors	r3, r2
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	b25a      	sxtb	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	330b      	adds	r3, #11
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b25b      	sxtb	r3, r3
 8001264:	f003 030f 	and.w	r3, r3, #15
 8001268:	b25b      	sxtb	r3, r3
 800126a:	4313      	orrs	r3, r2
 800126c:	b25a      	sxtb	r2, r3
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	3308      	adds	r3, #8
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]
    // i = 6
    output[9] = ((input[12] >> 2) << 4) | (((input[12] & 3) << 2) ^ (input[13] >> 4));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	330c      	adds	r3, #12
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	b2db      	uxtb	r3, r3
 8001280:	011b      	lsls	r3, r3, #4
 8001282:	b25a      	sxtb	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	330c      	adds	r3, #12
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	b25b      	sxtb	r3, r3
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	b259      	sxtb	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	330d      	adds	r3, #13
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	091b      	lsrs	r3, r3, #4
 800129c:	b2db      	uxtb	r3, r3
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	404b      	eors	r3, r1
 80012a2:	b25b      	sxtb	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b25a      	sxtb	r2, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	3309      	adds	r3, #9
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	701a      	strb	r2, [r3, #0]
    output[10] = ((input[13] & 0xf) << 4) | (input[14] >> 2);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	330d      	adds	r3, #13
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	b25a      	sxtb	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	330e      	adds	r3, #14
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	4313      	orrs	r3, r2
 80012c8:	b25a      	sxtb	r2, r3
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	330a      	adds	r3, #10
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	701a      	strb	r2, [r3, #0]
    // i = 7
    output[11] = ((((input[14] & 3) << 2) ^ (input[15] >> 4)) << 4) | (input[15] & 0xf);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	330e      	adds	r3, #14
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	f003 030c 	and.w	r3, r3, #12
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	320f      	adds	r2, #15
 80012e2:	7812      	ldrb	r2, [r2, #0]
 80012e4:	0912      	lsrs	r2, r2, #4
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	4053      	eors	r3, r2
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	b25a      	sxtb	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	330f      	adds	r3, #15
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	4313      	orrs	r3, r2
 80012fe:	b25a      	sxtb	r2, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	330b      	adds	r3, #11
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	701a      	strb	r2, [r3, #0]
    // i = 8
    output[12] = ((input[16] >> 2) << 4) | (((input[16] & 3) << 2) ^ (input[17] >> 4));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3310      	adds	r3, #16
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	b2db      	uxtb	r3, r3
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	b25a      	sxtb	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3310      	adds	r3, #16
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	b25b      	sxtb	r3, r3
 8001320:	f003 030c 	and.w	r3, r3, #12
 8001324:	b259      	sxtb	r1, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3311      	adds	r3, #17
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	b2db      	uxtb	r3, r3
 8001330:	b25b      	sxtb	r3, r3
 8001332:	404b      	eors	r3, r1
 8001334:	b25b      	sxtb	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	b25a      	sxtb	r2, r3
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	330c      	adds	r3, #12
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	701a      	strb	r2, [r3, #0]
    output[13] = ((input[17] & 0xf) << 4) | (input[18] >> 2);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3311      	adds	r3, #17
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	b25a      	sxtb	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3312      	adds	r3, #18
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	b2db      	uxtb	r3, r3
 8001356:	b25b      	sxtb	r3, r3
 8001358:	4313      	orrs	r3, r2
 800135a:	b25a      	sxtb	r2, r3
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	330d      	adds	r3, #13
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	701a      	strb	r2, [r3, #0]
    // i = 9
    output[14] = ((((input[18] & 3) << 2) ^ (input[19] >> 4)) << 4) | (input[19] & 0xf);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3312      	adds	r3, #18
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	f003 030c 	and.w	r3, r3, #12
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	3213      	adds	r2, #19
 8001374:	7812      	ldrb	r2, [r2, #0]
 8001376:	0912      	lsrs	r2, r2, #4
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	4053      	eors	r3, r2
 800137c:	011b      	lsls	r3, r3, #4
 800137e:	b25a      	sxtb	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3313      	adds	r3, #19
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b25b      	sxtb	r3, r3
 8001388:	f003 030f 	and.w	r3, r3, #15
 800138c:	b25b      	sxtb	r3, r3
 800138e:	4313      	orrs	r3, r2
 8001390:	b25a      	sxtb	r2, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	330e      	adds	r3, #14
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	701a      	strb	r2, [r3, #0]
    // i =10
    output[15] = ((input[20] >> 2) << 4) | (((input[20] & 3) << 2) ^ (input[21] >> 4));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3314      	adds	r3, #20
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	b25a      	sxtb	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3314      	adds	r3, #20
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	b25b      	sxtb	r3, r3
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	b259      	sxtb	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3315      	adds	r3, #21
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	091b      	lsrs	r3, r3, #4
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	404b      	eors	r3, r1
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b25a      	sxtb	r2, r3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	330f      	adds	r3, #15
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	701a      	strb	r2, [r3, #0]
    output[16] = ((input[21] & 0xf) << 4) | (input[22] >> 2);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3315      	adds	r3, #21
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	011b      	lsls	r3, r3, #4
 80013dc:	b25a      	sxtb	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3316      	adds	r3, #22
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	089b      	lsrs	r3, r3, #2
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b25a      	sxtb	r2, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	3310      	adds	r3, #16
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	701a      	strb	r2, [r3, #0]
    // i = 11
    output[17] = ((((input[22] & 3) << 2) ^ (input[23] >> 4)) << 4) | (input[23] & 0xf);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3316      	adds	r3, #22
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	3217      	adds	r2, #23
 8001406:	7812      	ldrb	r2, [r2, #0]
 8001408:	0912      	lsrs	r2, r2, #4
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	4053      	eors	r3, r2
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	b25a      	sxtb	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3317      	adds	r3, #23
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b25b      	sxtb	r3, r3
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	b25b      	sxtb	r3, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	b25a      	sxtb	r2, r3
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	3311      	adds	r3, #17
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	701a      	strb	r2, [r3, #0]
    // i = 12
    output[18] = ((input[24] >> 2) << 4) | (((input[24] & 3) << 2) ^ (input[25] >> 4));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3318      	adds	r3, #24
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	b2db      	uxtb	r3, r3
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	b25a      	sxtb	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3318      	adds	r3, #24
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	b25b      	sxtb	r3, r3
 8001444:	f003 030c 	and.w	r3, r3, #12
 8001448:	b259      	sxtb	r1, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3319      	adds	r3, #25
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	091b      	lsrs	r3, r3, #4
 8001452:	b2db      	uxtb	r3, r3
 8001454:	b25b      	sxtb	r3, r3
 8001456:	404b      	eors	r3, r1
 8001458:	b25b      	sxtb	r3, r3
 800145a:	4313      	orrs	r3, r2
 800145c:	b25a      	sxtb	r2, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	3312      	adds	r3, #18
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	701a      	strb	r2, [r3, #0]
    output[19] = ((input[25] & 0xf) << 4) | ((input[26] >> 2));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3319      	adds	r3, #25
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	b25a      	sxtb	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	331a      	adds	r3, #26
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	089b      	lsrs	r3, r3, #2
 8001478:	b2db      	uxtb	r3, r3
 800147a:	b25b      	sxtb	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	b25a      	sxtb	r2, r3
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	3313      	adds	r3, #19
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	701a      	strb	r2, [r3, #0]
    // i = 13
    output[20] = ((((input[26] & 3) << 2) ^ (input[27] >> 4)) << 4) | (input[27] & 0xf);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	331a      	adds	r3, #26
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	f003 030c 	and.w	r3, r3, #12
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	321b      	adds	r2, #27
 8001498:	7812      	ldrb	r2, [r2, #0]
 800149a:	0912      	lsrs	r2, r2, #4
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	4053      	eors	r3, r2
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	b25a      	sxtb	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	331b      	adds	r3, #27
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b25b      	sxtb	r3, r3
 80014ac:	f003 030f 	and.w	r3, r3, #15
 80014b0:	b25b      	sxtb	r3, r3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	b25a      	sxtb	r2, r3
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	3314      	adds	r3, #20
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	701a      	strb	r2, [r3, #0]
    // i = 14
    output[21] = ((input[28] >> 2) << 4) | (((input[28] & 3) << 2) ^ (input[29] >> 4));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	331c      	adds	r3, #28
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	011b      	lsls	r3, r3, #4
 80014ca:	b25a      	sxtb	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	331c      	adds	r3, #28
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	b25b      	sxtb	r3, r3
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	b259      	sxtb	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	331d      	adds	r3, #29
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	091b      	lsrs	r3, r3, #4
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	b25b      	sxtb	r3, r3
 80014e8:	404b      	eors	r3, r1
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b25a      	sxtb	r2, r3
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	3315      	adds	r3, #21
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	701a      	strb	r2, [r3, #0]
    output[22] = ((input[29] & 0xf) << 4) | (input[30] >> 2);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	331d      	adds	r3, #29
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	b25a      	sxtb	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	331e      	adds	r3, #30
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	b2db      	uxtb	r3, r3
 800150c:	b25b      	sxtb	r3, r3
 800150e:	4313      	orrs	r3, r2
 8001510:	b25a      	sxtb	r2, r3
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	3316      	adds	r3, #22
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	701a      	strb	r2, [r3, #0]
    // i = 15
    output[23] = ((((input[30] & 3) << 2) ^ (input[31] >> 4)) << 4) | (input[31] & 0xf);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	331e      	adds	r3, #30
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	321f      	adds	r2, #31
 800152a:	7812      	ldrb	r2, [r2, #0]
 800152c:	0912      	lsrs	r2, r2, #4
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	4053      	eors	r3, r2
 8001532:	011b      	lsls	r3, r3, #4
 8001534:	b25a      	sxtb	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	331f      	adds	r3, #31
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b25b      	sxtb	r3, r3
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	b25b      	sxtb	r3, r3
 8001544:	4313      	orrs	r3, r2
 8001546:	b25a      	sxtb	r2, r3
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	3317      	adds	r3, #23
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	701a      	strb	r2, [r3, #0]

}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800155c:	b5b0      	push	{r4, r5, r7, lr}
 800155e:	b0a0      	sub	sp, #128	; 0x80
 8001560:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	*ARM_CM_DEMCR     =  (*ARM_CM_DEMCR) | 0x01000000;  // Set bit 24
 8001562:	4b53      	ldr	r3, [pc, #332]	; (80016b0 <main+0x154>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a52      	ldr	r2, [pc, #328]	; (80016b0 <main+0x154>)
 8001568:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800156c:	6013      	str	r3, [r2, #0]
	*ARM_CM_DWT_CTRL = (*ARM_CM_DWT_CTRL) | 0x00000001 ;
 800156e:	4b51      	ldr	r3, [pc, #324]	; (80016b4 <main+0x158>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a50      	ldr	r2, [pc, #320]	; (80016b4 <main+0x158>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800157a:	f000 fd48 	bl	800200e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800157e:	f000 f8af 	bl	80016e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001582:	f000 f91f 	bl	80017c4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001586:	f000 f8f1 	bl	800176c <MX_LPUART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  StateUint Plaintext     = {0xA13A632451070E43,0x82A27F26A40682F3,0xFE9FF68028D24FDB};
 800158a:	4b4b      	ldr	r3, [pc, #300]	; (80016b8 <main+0x15c>)
 800158c:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8001590:	461d      	mov	r5, r3
 8001592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001596:	e895 0003 	ldmia.w	r5, {r0, r1}
 800159a:	e884 0003 	stmia.w	r4, {r0, r1}
  StateUint Key           = {0x764C4F6254E1BFF2,0x08E95862428FAED0,0x1584F4207A7E8477};
 800159e:	4b47      	ldr	r3, [pc, #284]	; (80016bc <main+0x160>)
 80015a0:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80015a4:	461d      	mov	r5, r3
 80015a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015ae:	e884 0003 	stmia.w	r4, {r0, r1}
  StateUint Ciphertext    = {0xED3D0EA11C427BD3,0x2570DF41C6FD66EB,0xBF4916E760ED0943};
 80015b2:	4b43      	ldr	r3, [pc, #268]	; (80016c0 <main+0x164>)
 80015b4:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80015b8:	461d      	mov	r5, r3
 80015ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015c2:	e884 0003 	stmia.w	r4, {r0, r1}

  uint8_t enc[24] = {0};
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
 80015ca:	f107 031c 	add.w	r3, r7, #28
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]
  uint8_t dec[24] = {0};
 80015da:	2300      	movs	r3, #0
 80015dc:	603b      	str	r3, [r7, #0]
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]

  serial_out("Plaintext := ", (uint8_t*)&Plaintext, NULL, 24);
 80015ec:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80015f0:	f04f 0218 	mov.w	r2, #24
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	e9cd 2300 	strd	r2, r3, [sp]
 80015fc:	2200      	movs	r2, #0
 80015fe:	4831      	ldr	r0, [pc, #196]	; (80016c4 <main+0x168>)
 8001600:	f000 f8f8 	bl	80017f4 <serial_out>
  serial_out("Key := ", (uint8_t*)&Key, NULL, 24);
 8001604:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001608:	f04f 0218 	mov.w	r2, #24
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	e9cd 2300 	strd	r2, r3, [sp]
 8001614:	2200      	movs	r2, #0
 8001616:	482c      	ldr	r0, [pc, #176]	; (80016c8 <main+0x16c>)
 8001618:	f000 f8ec 	bl	80017f4 <serial_out>
  serial_out("Ciphertext := ", (uint8_t*)&Ciphertext, NULL, 24);
 800161c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001620:	f04f 0218 	mov.w	r2, #24
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	e9cd 2300 	strd	r2, r3, [sp]
 800162c:	2200      	movs	r2, #0
 800162e:	4827      	ldr	r0, [pc, #156]	; (80016cc <main+0x170>)
 8001630:	f000 f8e0 	bl	80017f4 <serial_out>

  serial_out("Encryption", NULL, NULL, 0);
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	e9cd 2300 	strd	r2, r3, [sp]
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	4822      	ldr	r0, [pc, #136]	; (80016d0 <main+0x174>)
 8001646:	f000 f8d5 	bl	80017f4 <serial_out>
  Encrypt(Plaintext, Key, enc);						//Speedy encryption
 800164a:	f107 0218 	add.w	r2, r7, #24
 800164e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001652:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fc36 	bl	8000ec8 <Encrypt>

  serial_out("Encryption Done\n", NULL, NULL, 0);
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	e9cd 2300 	strd	r2, r3, [sp]
 8001668:	2200      	movs	r2, #0
 800166a:	2100      	movs	r1, #0
 800166c:	4819      	ldr	r0, [pc, #100]	; (80016d4 <main+0x178>)
 800166e:	f000 f8c1 	bl	80017f4 <serial_out>


  serial_out("Decryption", NULL, NULL, 0);
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	e9cd 2300 	strd	r2, r3, [sp]
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	4815      	ldr	r0, [pc, #84]	; (80016d8 <main+0x17c>)
 8001684:	f000 f8b6 	bl	80017f4 <serial_out>
  Decrypt(Ciphertext, Key, dec);					//Speedy decryption
 8001688:	463a      	mov	r2, r7
 800168a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800168e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fc8c 	bl	8000fb0 <Decrypt>
  serial_out("Decryption Done\n", NULL, NULL, 0);
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	e9cd 2300 	strd	r2, r3, [sp]
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	480c      	ldr	r0, [pc, #48]	; (80016dc <main+0x180>)
 80016aa:	f000 f8a3 	bl	80017f4 <serial_out>



  while (1)
 80016ae:	e7fe      	b.n	80016ae <main+0x152>
 80016b0:	e000edfc 	.word	0xe000edfc
 80016b4:	e0001000 	.word	0xe0001000
 80016b8:	08005060 	.word	0x08005060
 80016bc:	08005078 	.word	0x08005078
 80016c0:	08005090 	.word	0x08005090
 80016c4:	08004ff8 	.word	0x08004ff8
 80016c8:	08005008 	.word	0x08005008
 80016cc:	08005010 	.word	0x08005010
 80016d0:	08005020 	.word	0x08005020
 80016d4:	0800502c 	.word	0x0800502c
 80016d8:	08005040 	.word	0x08005040
 80016dc:	0800504c 	.word	0x0800504c

080016e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b096      	sub	sp, #88	; 0x58
 80016e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	2244      	movs	r2, #68	; 0x44
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f002 fff0 	bl	80046d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f4:	463b      	mov	r3, r7
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001702:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001706:	f000 ff7d 	bl	8002604 <HAL_PWREx_ControlVoltageScaling>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001710:	f000 fb38 	bl	8001d84 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001714:	2310      	movs	r3, #16
 8001716:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001718:	2301      	movs	r3, #1
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001720:	2360      	movs	r3, #96	; 0x60
 8001722:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001724:	2300      	movs	r3, #0
 8001726:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4618      	mov	r0, r3
 800172e:	f000 ffcf 	bl	80026d0 <HAL_RCC_OscConfig>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001738:	f000 fb24 	bl	8001d84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800173c:	230f      	movs	r3, #15
 800173e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001750:	463b      	mov	r3, r7
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f001 fbe1 	bl	8002f1c <HAL_RCC_ClockConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001760:	f000 fb10 	bl	8001d84 <Error_Handler>
  }
}
 8001764:	bf00      	nop
 8001766:	3758      	adds	r7, #88	; 0x58
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <MX_LPUART1_UART_Init+0x50>)
 8001772:	4a13      	ldr	r2, [pc, #76]	; (80017c0 <MX_LPUART1_UART_Init+0x54>)
 8001774:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_LPUART1_UART_Init+0x50>)
 8001778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800177c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_LPUART1_UART_Init+0x50>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <MX_LPUART1_UART_Init+0x50>)
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_LPUART1_UART_Init+0x50>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <MX_LPUART1_UART_Init+0x50>)
 8001792:	220c      	movs	r2, #12
 8001794:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_LPUART1_UART_Init+0x50>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <MX_LPUART1_UART_Init+0x50>)
 800179e:	2200      	movs	r2, #0
 80017a0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_LPUART1_UART_Init+0x50>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <MX_LPUART1_UART_Init+0x50>)
 80017aa:	f002 fa87 	bl	8003cbc <HAL_UART_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80017b4:	f000 fae6 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000258 	.word	0x20000258
 80017c0:	40008000 	.word	0x40008000

080017c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_GPIO_Init+0x2c>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <MX_GPIO_Init+0x2c>)
 80017d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_GPIO_Init+0x2c>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80017e2:	f000 ff65 	bl	80026b0 <HAL_PWREx_EnableVddIO2>

}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000

080017f4 <serial_out>:

/* USER CODE BEGIN 4 */

void serial_out(char *label, uint8_t *dat, int *i, unsigned long long length){
 80017f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f6:	b0fb      	sub	sp, #492	; 0x1ec
 80017f8:	af18      	add	r7, sp, #96	; 0x60
 80017fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017fe:	6018      	str	r0, [r3, #0]
 8001800:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001804:	6019      	str	r1, [r3, #0]
 8001806:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800180a:	601a      	str	r2, [r3, #0]
  char buff [MAX_BUFF];
  uint16_t sz = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	f8a7 3186 	strh.w	r3, [r7, #390]	; 0x186
  char m[MAX_BUFF];
  if(length == 0){
 8001812:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8001816:	4313      	orrs	r3, r2
 8001818:	d107      	bne.n	800182a <serial_out+0x36>
      sprintf(m,"%s", label);
 800181a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800181e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4968      	ldr	r1, [pc, #416]	; (80019c8 <serial_out+0x1d4>)
 8001826:	f002 ff5d 	bl	80046e4 <siprintf>
  }
  if(length == 8){
 800182a:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800182e:	2b00      	cmp	r3, #0
 8001830:	bf08      	it	eq
 8001832:	2a08      	cmpeq	r2, #8
 8001834:	d140      	bne.n	80018b8 <serial_out+0xc4>
    sprintf(m, "%s%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X\r\n", label, dat[7], dat[6], dat[5], dat[4], dat[3], dat[2], dat[1], dat[0]);
 8001836:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3307      	adds	r3, #7
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	469c      	mov	ip, r3
 8001842:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	3306      	adds	r3, #6
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	3305      	adds	r3, #5
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	461c      	mov	r4, r3
 800185a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	3304      	adds	r3, #4
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	461d      	mov	r5, r3
 8001866:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3303      	adds	r3, #3
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	461e      	mov	r6, r3
 8001872:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	3302      	adds	r3, #2
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	64bb      	str	r3, [r7, #72]	; 0x48
 800187e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3301      	adds	r3, #1
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	647b      	str	r3, [r7, #68]	; 0x44
 800188a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001896:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800189a:	9306      	str	r3, [sp, #24]
 800189c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800189e:	9305      	str	r3, [sp, #20]
 80018a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018a2:	9304      	str	r3, [sp, #16]
 80018a4:	9603      	str	r6, [sp, #12]
 80018a6:	9502      	str	r5, [sp, #8]
 80018a8:	9401      	str	r4, [sp, #4]
 80018aa:	9100      	str	r1, [sp, #0]
 80018ac:	4663      	mov	r3, ip
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	4946      	ldr	r1, [pc, #280]	; (80019cc <serial_out+0x1d8>)
 80018b2:	f002 ff17 	bl	80046e4 <siprintf>
 80018b6:	e154      	b.n	8001b62 <serial_out+0x36e>
  }else if(length == 16){
 80018b8:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	bf08      	it	eq
 80018c0:	2a10      	cmpeq	r2, #16
 80018c2:	f040 8087 	bne.w	80019d4 <serial_out+0x1e0>
    sprintf(m, "%s%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X , %.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X\r\n", label, dat[7], dat[6], dat[5], dat[4], dat[3], dat[2], dat[1], dat[0], dat[15], dat[14], dat[13], dat[12], dat[11], dat[10], dat[9], dat[8]);
 80018c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	3307      	adds	r3, #7
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	469c      	mov	ip, r3
 80018d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	3306      	adds	r3, #6
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461e      	mov	r6, r3
 80018de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3305      	adds	r3, #5
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80018ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	3304      	adds	r3, #4
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	647b      	str	r3, [r7, #68]	; 0x44
 80018f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	3303      	adds	r3, #3
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	643b      	str	r3, [r7, #64]	; 0x40
 8001902:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	3302      	adds	r3, #2
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800190e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	3301      	adds	r3, #1
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	63bb      	str	r3, [r7, #56]	; 0x38
 800191a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	637b      	str	r3, [r7, #52]	; 0x34
 8001924:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	330f      	adds	r3, #15
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	633b      	str	r3, [r7, #48]	; 0x30
 8001930:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	330e      	adds	r3, #14
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800193c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	330d      	adds	r3, #13
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
 8001948:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	330c      	adds	r3, #12
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
 8001954:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	330b      	adds	r3, #11
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461d      	mov	r5, r3
 8001960:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	330a      	adds	r3, #10
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461c      	mov	r4, r3
 800196c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	3309      	adds	r3, #9
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	4619      	mov	r1, r3
 8001978:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	3308      	adds	r3, #8
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001986:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800198a:	930e      	str	r3, [sp, #56]	; 0x38
 800198c:	910d      	str	r1, [sp, #52]	; 0x34
 800198e:	940c      	str	r4, [sp, #48]	; 0x30
 8001990:	950b      	str	r5, [sp, #44]	; 0x2c
 8001992:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001994:	910a      	str	r1, [sp, #40]	; 0x28
 8001996:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001998:	9109      	str	r1, [sp, #36]	; 0x24
 800199a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800199c:	9108      	str	r1, [sp, #32]
 800199e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019a0:	9107      	str	r1, [sp, #28]
 80019a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019a4:	9106      	str	r1, [sp, #24]
 80019a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019a8:	9105      	str	r1, [sp, #20]
 80019aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80019ac:	9104      	str	r1, [sp, #16]
 80019ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80019b0:	9103      	str	r1, [sp, #12]
 80019b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80019b4:	9102      	str	r1, [sp, #8]
 80019b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	9600      	str	r6, [sp, #0]
 80019bc:	4663      	mov	r3, ip
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	4903      	ldr	r1, [pc, #12]	; (80019d0 <serial_out+0x1dc>)
 80019c2:	f002 fe8f 	bl	80046e4 <siprintf>
 80019c6:	e0cc      	b.n	8001b62 <serial_out+0x36e>
 80019c8:	080050a8 	.word	0x080050a8
 80019cc:	080050ac 	.word	0x080050ac
 80019d0:	080050d4 	.word	0x080050d4
  }else if(length == 24){
 80019d4:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf08      	it	eq
 80019dc:	2a18      	cmpeq	r2, #24
 80019de:	f040 80c0 	bne.w	8001b62 <serial_out+0x36e>
    sprintf(buff, "%s%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X , %.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X , %.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X\r\n", label, dat[7], dat[6], dat[5], dat[4], dat[3], dat[2], dat[1], dat[0], dat[15], dat[14], dat[13], dat[12], dat[11], dat[10], dat[9], dat[8], dat[23], dat[22], dat[21], dat[20], dat[19], dat[18], dat[17], dat[16]);
 80019e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3307      	adds	r3, #7
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	469c      	mov	ip, r3
 80019ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	3306      	adds	r3, #6
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80019fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	3305      	adds	r3, #5
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	647b      	str	r3, [r7, #68]	; 0x44
 8001a06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	643b      	str	r3, [r7, #64]	; 0x40
 8001a12:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	3303      	adds	r3, #3
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	3302      	adds	r3, #2
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	3301      	adds	r3, #1
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	637b      	str	r3, [r7, #52]	; 0x34
 8001a36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30
 8001a40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	330f      	adds	r3, #15
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	330e      	adds	r3, #14
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	330d      	adds	r3, #13
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
 8001a64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	330c      	adds	r3, #12
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	623b      	str	r3, [r7, #32]
 8001a70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	330b      	adds	r3, #11
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	61fb      	str	r3, [r7, #28]
 8001a7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	330a      	adds	r3, #10
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	61bb      	str	r3, [r7, #24]
 8001a88:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	3309      	adds	r3, #9
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	3308      	adds	r3, #8
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	3317      	adds	r3, #23
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	3316      	adds	r3, #22
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	3315      	adds	r3, #21
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	3314      	adds	r3, #20
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	461e      	mov	r6, r3
 8001ad0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	3313      	adds	r3, #19
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	461d      	mov	r5, r3
 8001adc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3312      	adds	r3, #18
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	461c      	mov	r4, r3
 8001ae8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	3311      	adds	r3, #17
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	4619      	mov	r1, r3
 8001af4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	3310      	adds	r3, #16
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001b02:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8001b06:	9316      	str	r3, [sp, #88]	; 0x58
 8001b08:	9115      	str	r1, [sp, #84]	; 0x54
 8001b0a:	9414      	str	r4, [sp, #80]	; 0x50
 8001b0c:	9513      	str	r5, [sp, #76]	; 0x4c
 8001b0e:	9612      	str	r6, [sp, #72]	; 0x48
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	9111      	str	r1, [sp, #68]	; 0x44
 8001b14:	68b9      	ldr	r1, [r7, #8]
 8001b16:	9110      	str	r1, [sp, #64]	; 0x40
 8001b18:	68f9      	ldr	r1, [r7, #12]
 8001b1a:	910f      	str	r1, [sp, #60]	; 0x3c
 8001b1c:	6939      	ldr	r1, [r7, #16]
 8001b1e:	910e      	str	r1, [sp, #56]	; 0x38
 8001b20:	6979      	ldr	r1, [r7, #20]
 8001b22:	910d      	str	r1, [sp, #52]	; 0x34
 8001b24:	69b9      	ldr	r1, [r7, #24]
 8001b26:	910c      	str	r1, [sp, #48]	; 0x30
 8001b28:	69f9      	ldr	r1, [r7, #28]
 8001b2a:	910b      	str	r1, [sp, #44]	; 0x2c
 8001b2c:	6a39      	ldr	r1, [r7, #32]
 8001b2e:	910a      	str	r1, [sp, #40]	; 0x28
 8001b30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b32:	9109      	str	r1, [sp, #36]	; 0x24
 8001b34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b36:	9108      	str	r1, [sp, #32]
 8001b38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b3a:	9107      	str	r1, [sp, #28]
 8001b3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b3e:	9106      	str	r1, [sp, #24]
 8001b40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001b42:	9105      	str	r1, [sp, #20]
 8001b44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b46:	9104      	str	r1, [sp, #16]
 8001b48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001b4a:	9103      	str	r1, [sp, #12]
 8001b4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001b4e:	9102      	str	r1, [sp, #8]
 8001b50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001b52:	9101      	str	r1, [sp, #4]
 8001b54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	4663      	mov	r3, ip
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	4929      	ldr	r1, [pc, #164]	; (8001c04 <serial_out+0x410>)
 8001b5e:	f002 fdc1 	bl	80046e4 <siprintf>

  //if((label != NULL) && (dat != NULL) && (i == NULL)){  //print one string and data
  //    sprintf(buff,"%s \r\n", m);
  //}

  if((label != NULL) && (dat == NULL) && (i != NULL)){    // print string and integer
 8001b62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d015      	beq.n	8001b98 <serial_out+0x3a4>
 8001b6c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d110      	bne.n	8001b98 <serial_out+0x3a4>
 8001b76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00b      	beq.n	8001b98 <serial_out+0x3a4>
    sprintf(buff, "%s%i\r\n", label, *i);
 8001b80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001b8c:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8001b90:	6812      	ldr	r2, [r2, #0]
 8001b92:	491d      	ldr	r1, [pc, #116]	; (8001c08 <serial_out+0x414>)
 8001b94:	f002 fda6 	bl	80046e4 <siprintf>
  }

  if((label != NULL) && (dat == NULL) && (i == NULL)){    // print the string label
 8001b98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d011      	beq.n	8001bc6 <serial_out+0x3d2>
 8001ba2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10c      	bne.n	8001bc6 <serial_out+0x3d2>
 8001bac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d107      	bne.n	8001bc6 <serial_out+0x3d2>
  sprintf(buff, "%s\r\n", label);
 8001bb6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bba:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4912      	ldr	r1, [pc, #72]	; (8001c0c <serial_out+0x418>)
 8001bc2:	f002 fd8f 	bl	80046e4 <siprintf>
  }


  sz = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f8a7 3186 	strh.w	r3, [r7, #390]	; 0x186
  do{
    sz++;
 8001bcc:	f8b7 3186 	ldrh.w	r3, [r7, #390]	; 0x186
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	f8a7 3186 	strh.w	r3, [r7, #390]	; 0x186
  }while(buff[sz]!='\0');
 8001bd6:	f8b7 3186 	ldrh.w	r3, [r7, #390]	; 0x186
 8001bda:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001bde:	4413      	add	r3, r2
 8001be0:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f1      	bne.n	8001bcc <serial_out+0x3d8>

  HAL_UART_Transmit(&hlpuart1, (uint8_t *)buff, sz, HAL_MAX_DELAY);
 8001be8:	f8b7 2186 	ldrh.w	r2, [r7, #390]	; 0x186
 8001bec:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bf4:	4806      	ldr	r0, [pc, #24]	; (8001c10 <serial_out+0x41c>)
 8001bf6:	f002 f8af 	bl	8003d58 <HAL_UART_Transmit>

}
 8001bfa:	bf00      	nop
 8001bfc:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c04:	0800511c 	.word	0x0800511c
 8001c08:	08005188 	.word	0x08005188
 8001c0c:	08005190 	.word	0x08005190
 8001c10:	20000258 	.word	0x20000258

08001c14 <serial_out2>:

void serial_out2(char *label, uint8_t *dat){
 8001c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c16:	b0d3      	sub	sp, #332	; 0x14c
 8001c18:	af18      	add	r7, sp, #96	; 0x60
 8001c1a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8001c1c:	64b9      	str	r1, [r7, #72]	; 0x48
  char buff [MAX_BUFF];
  uint16_t sz = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6

  sprintf(buff, "%s%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X , %.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X , %.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X \r\n", label, dat[0], dat[1], dat[2], dat[3], dat[4], dat[5], dat[6], dat[7], dat[8], dat[9], dat[10], dat[11], dat[12], dat[13], dat[14], dat[15], dat[16], dat[17], dat[18], dat[19], dat[20], dat[21], dat[22], dat[23]);
 8001c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	469c      	mov	ip, r3
 8001c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	647b      	str	r3, [r7, #68]	; 0x44
 8001c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c34:	3302      	adds	r3, #2
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	643b      	str	r3, [r7, #64]	; 0x40
 8001c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c3c:	3303      	adds	r3, #3
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c44:	3304      	adds	r3, #4
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c4c:	3305      	adds	r3, #5
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	637b      	str	r3, [r7, #52]	; 0x34
 8001c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c54:	3306      	adds	r3, #6
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	633b      	str	r3, [r7, #48]	; 0x30
 8001c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c5c:	3307      	adds	r3, #7
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c64:	3308      	adds	r3, #8
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c6c:	3309      	adds	r3, #9
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
 8001c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c74:	330a      	adds	r3, #10
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	623b      	str	r3, [r7, #32]
 8001c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c7c:	330b      	adds	r3, #11
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c84:	330c      	adds	r3, #12
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	61bb      	str	r3, [r7, #24]
 8001c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c8c:	330d      	adds	r3, #13
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c94:	330e      	adds	r3, #14
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c9c:	330f      	adds	r3, #15
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ca4:	3310      	adds	r3, #16
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cac:	3311      	adds	r3, #17
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cb4:	3312      	adds	r3, #18
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	461e      	mov	r6, r3
 8001cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cbc:	3313      	adds	r3, #19
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	461d      	mov	r5, r3
 8001cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cc4:	3314      	adds	r3, #20
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	461c      	mov	r4, r3
 8001cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ccc:	3315      	adds	r3, #21
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cd4:	3316      	adds	r3, #22
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cdc:	3317      	adds	r3, #23
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001ce4:	9316      	str	r3, [sp, #88]	; 0x58
 8001ce6:	9215      	str	r2, [sp, #84]	; 0x54
 8001ce8:	9114      	str	r1, [sp, #80]	; 0x50
 8001cea:	9413      	str	r4, [sp, #76]	; 0x4c
 8001cec:	9512      	str	r5, [sp, #72]	; 0x48
 8001cee:	9611      	str	r6, [sp, #68]	; 0x44
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	9210      	str	r2, [sp, #64]	; 0x40
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	920f      	str	r2, [sp, #60]	; 0x3c
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	920e      	str	r2, [sp, #56]	; 0x38
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	920d      	str	r2, [sp, #52]	; 0x34
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	920c      	str	r2, [sp, #48]	; 0x30
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	920b      	str	r2, [sp, #44]	; 0x2c
 8001d08:	69fa      	ldr	r2, [r7, #28]
 8001d0a:	920a      	str	r2, [sp, #40]	; 0x28
 8001d0c:	6a3a      	ldr	r2, [r7, #32]
 8001d0e:	9209      	str	r2, [sp, #36]	; 0x24
 8001d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d12:	9208      	str	r2, [sp, #32]
 8001d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d16:	9207      	str	r2, [sp, #28]
 8001d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d1a:	9206      	str	r2, [sp, #24]
 8001d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d1e:	9205      	str	r2, [sp, #20]
 8001d20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d22:	9204      	str	r2, [sp, #16]
 8001d24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d26:	9203      	str	r2, [sp, #12]
 8001d28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d2a:	9202      	str	r2, [sp, #8]
 8001d2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d2e:	9201      	str	r2, [sp, #4]
 8001d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	4663      	mov	r3, ip
 8001d36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d38:	4910      	ldr	r1, [pc, #64]	; (8001d7c <serial_out2+0x168>)
 8001d3a:	f002 fcd3 	bl	80046e4 <siprintf>


  sz = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
  do{
    sz++;
 8001d44:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001d48:	3301      	adds	r3, #1
 8001d4a:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
  }while(buff[sz]!='\0');
 8001d4e:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001d52:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8001d56:	4413      	add	r3, r2
 8001d58:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f1      	bne.n	8001d44 <serial_out2+0x130>

  HAL_UART_Transmit(&hlpuart1, (uint8_t *)buff, sz, HAL_MAX_DELAY);
 8001d60:	f8b7 20e6 	ldrh.w	r2, [r7, #230]	; 0xe6
 8001d64:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d6c:	4804      	ldr	r0, [pc, #16]	; (8001d80 <serial_out2+0x16c>)
 8001d6e:	f001 fff3 	bl	8003d58 <HAL_UART_Transmit>

}
 8001d72:	bf00      	nop
 8001d74:	37ec      	adds	r7, #236	; 0xec
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	08005198 	.word	0x08005198
 8001d80:	20000258 	.word	0x20000258

08001d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d88:	b672      	cpsid	i
}
 8001d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <Error_Handler+0x8>
	...

08001d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d96:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <HAL_MspInit+0x44>)
 8001d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d9a:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <HAL_MspInit+0x44>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6613      	str	r3, [r2, #96]	; 0x60
 8001da2:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <HAL_MspInit+0x44>)
 8001da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_MspInit+0x44>)
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db2:	4a08      	ldr	r2, [pc, #32]	; (8001dd4 <HAL_MspInit+0x44>)
 8001db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_MspInit+0x44>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000

08001dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b0ac      	sub	sp, #176	; 0xb0
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001df0:	f107 0310 	add.w	r3, r7, #16
 8001df4:	228c      	movs	r2, #140	; 0x8c
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f002 fc6b 	bl	80046d4 <memset>
  if(huart->Instance==LPUART1)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a22      	ldr	r2, [pc, #136]	; (8001e8c <HAL_UART_MspInit+0xb4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d13d      	bne.n	8001e84 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001e08:	2320      	movs	r3, #32
 8001e0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e10:	f107 0310 	add.w	r3, r7, #16
 8001e14:	4618      	mov	r0, r3
 8001e16:	f001 fa87 	bl	8003328 <HAL_RCCEx_PeriphCLKConfig>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e20:	f7ff ffb0 	bl	8001d84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001e24:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <HAL_UART_MspInit+0xb8>)
 8001e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e28:	4a19      	ldr	r2, [pc, #100]	; (8001e90 <HAL_UART_MspInit+0xb8>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <HAL_UART_MspInit+0xb8>)
 8001e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e3c:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <HAL_UART_MspInit+0xb8>)
 8001e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e40:	4a13      	ldr	r2, [pc, #76]	; (8001e90 <HAL_UART_MspInit+0xb8>)
 8001e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <HAL_UART_MspInit+0xb8>)
 8001e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001e54:	f000 fc2c 	bl	80026b0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001e58:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001e5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001e72:	2308      	movs	r3, #8
 8001e74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4805      	ldr	r0, [pc, #20]	; (8001e94 <HAL_UART_MspInit+0xbc>)
 8001e80:	f000 fa20 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001e84:	bf00      	nop
 8001e86:	37b0      	adds	r7, #176	; 0xb0
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40008000 	.word	0x40008000
 8001e90:	40021000 	.word	0x40021000
 8001e94:	48001800 	.word	0x48001800

08001e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <NMI_Handler+0x4>

08001e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea2:	e7fe      	b.n	8001ea2 <HardFault_Handler+0x4>

08001ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <MemManage_Handler+0x4>

08001eaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eae:	e7fe      	b.n	8001eae <BusFault_Handler+0x4>

08001eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <UsageFault_Handler+0x4>

08001eb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee4:	f000 f8e8 	bl	80020b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}

08001eec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef4:	4a14      	ldr	r2, [pc, #80]	; (8001f48 <_sbrk+0x5c>)
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <_sbrk+0x60>)
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f00:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <_sbrk+0x64>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d102      	bne.n	8001f0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <_sbrk+0x64>)
 8001f0a:	4a12      	ldr	r2, [pc, #72]	; (8001f54 <_sbrk+0x68>)
 8001f0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <_sbrk+0x64>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d207      	bcs.n	8001f2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f1c:	f002 fba2 	bl	8004664 <__errno>
 8001f20:	4603      	mov	r3, r0
 8001f22:	220c      	movs	r2, #12
 8001f24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f2a:	e009      	b.n	8001f40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <_sbrk+0x64>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f32:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <_sbrk+0x64>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	4a05      	ldr	r2, [pc, #20]	; (8001f50 <_sbrk+0x64>)
 8001f3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20050000 	.word	0x20050000
 8001f4c:	00000400 	.word	0x00000400
 8001f50:	2000008c 	.word	0x2000008c
 8001f54:	200002f0 	.word	0x200002f0

08001f58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f5c:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <SystemInit+0x5c>)
 8001f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f62:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <SystemInit+0x5c>)
 8001f64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <SystemInit+0x60>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a11      	ldr	r2, [pc, #68]	; (8001fb8 <SystemInit+0x60>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <SystemInit+0x60>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <SystemInit+0x60>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a0d      	ldr	r2, [pc, #52]	; (8001fb8 <SystemInit+0x60>)
 8001f84:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001f88:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001f8c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <SystemInit+0x60>)
 8001f90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f94:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f96:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <SystemInit+0x60>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <SystemInit+0x60>)
 8001f9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001fa2:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <SystemInit+0x60>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000ed00 	.word	0xe000ed00
 8001fb8:	40021000 	.word	0x40021000

08001fbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fc0:	f7ff ffca 	bl	8001f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001fc4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001fc6:	e003      	b.n	8001fd0 <LoopCopyDataInit>

08001fc8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001fca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001fcc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001fce:	3104      	adds	r1, #4

08001fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001fd0:	480a      	ldr	r0, [pc, #40]	; (8001ffc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001fd4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001fd6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001fd8:	d3f6      	bcc.n	8001fc8 <CopyDataInit>
	ldr	r2, =_sbss
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001fdc:	e002      	b.n	8001fe4 <LoopFillZerobss>

08001fde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001fde:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001fe0:	f842 3b04 	str.w	r3, [r2], #4

08001fe4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <LoopForever+0x16>)
	cmp	r2, r3
 8001fe6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001fe8:	d3f9      	bcc.n	8001fde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fea:	f002 fb41 	bl	8004670 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fee:	f7ff fab5 	bl	800155c <main>

08001ff2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ff2:	e7fe      	b.n	8001ff2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ff4:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8001ff8:	080059b4 	.word	0x080059b4
	ldr	r0, =_sdata
 8001ffc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002000:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8002004:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8002008:	200002f0 	.word	0x200002f0

0800200c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800200c:	e7fe      	b.n	800200c <ADC1_2_IRQHandler>

0800200e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002014:	2300      	movs	r3, #0
 8002016:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002018:	2003      	movs	r0, #3
 800201a:	f000 f91f 	bl	800225c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800201e:	200f      	movs	r0, #15
 8002020:	f000 f80e 	bl	8002040 <HAL_InitTick>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	71fb      	strb	r3, [r7, #7]
 800202e:	e001      	b.n	8002034 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002030:	f7ff feae 	bl	8001d90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002034:	79fb      	ldrb	r3, [r7, #7]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800204c:	4b17      	ldr	r3, [pc, #92]	; (80020ac <HAL_InitTick+0x6c>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d023      	beq.n	800209c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002054:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <HAL_InitTick+0x70>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b14      	ldr	r3, [pc, #80]	; (80020ac <HAL_InitTick+0x6c>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4619      	mov	r1, r3
 800205e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002062:	fbb3 f3f1 	udiv	r3, r3, r1
 8002066:	fbb2 f3f3 	udiv	r3, r2, r3
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f91d 	bl	80022aa <HAL_SYSTICK_Config>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10f      	bne.n	8002096 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b0f      	cmp	r3, #15
 800207a:	d809      	bhi.n	8002090 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800207c:	2200      	movs	r2, #0
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002084:	f000 f8f5 	bl	8002272 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002088:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <HAL_InitTick+0x74>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e007      	b.n	80020a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
 8002094:	e004      	b.n	80020a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	73fb      	strb	r3, [r7, #15]
 800209a:	e001      	b.n	80020a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000008 	.word	0x20000008
 80020b0:	20000000 	.word	0x20000000
 80020b4:	20000004 	.word	0x20000004

080020b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_IncTick+0x20>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_IncTick+0x24>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	4a04      	ldr	r2, [pc, #16]	; (80020dc <HAL_IncTick+0x24>)
 80020ca:	6013      	str	r3, [r2, #0]
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000008 	.word	0x20000008
 80020dc:	200002dc 	.word	0x200002dc

080020e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return uwTick;
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <HAL_GetTick+0x14>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	200002dc 	.word	0x200002dc

080020f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002114:	4013      	ands	r3, r2
 8002116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212a:	4a04      	ldr	r2, [pc, #16]	; (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	60d3      	str	r3, [r2, #12]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002144:	4b04      	ldr	r3, [pc, #16]	; (8002158 <__NVIC_GetPriorityGrouping+0x18>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	f003 0307 	and.w	r3, r3, #7
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	db0a      	blt.n	8002186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	490c      	ldr	r1, [pc, #48]	; (80021a8 <__NVIC_SetPriority+0x4c>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	0112      	lsls	r2, r2, #4
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	440b      	add	r3, r1
 8002180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002184:	e00a      	b.n	800219c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4908      	ldr	r1, [pc, #32]	; (80021ac <__NVIC_SetPriority+0x50>)
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	3b04      	subs	r3, #4
 8002194:	0112      	lsls	r2, r2, #4
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	440b      	add	r3, r1
 800219a:	761a      	strb	r2, [r3, #24]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000e100 	.word	0xe000e100
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	; 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f1c3 0307 	rsb	r3, r3, #7
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	bf28      	it	cs
 80021ce:	2304      	movcs	r3, #4
 80021d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3304      	adds	r3, #4
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d902      	bls.n	80021e0 <NVIC_EncodePriority+0x30>
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3b03      	subs	r3, #3
 80021de:	e000      	b.n	80021e2 <NVIC_EncodePriority+0x32>
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	401a      	ands	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43d9      	mvns	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	4313      	orrs	r3, r2
         );
}
 800220a:	4618      	mov	r0, r3
 800220c:	3724      	adds	r7, #36	; 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002228:	d301      	bcc.n	800222e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222a:	2301      	movs	r3, #1
 800222c:	e00f      	b.n	800224e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222e:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <SysTick_Config+0x40>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b01      	subs	r3, #1
 8002234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002236:	210f      	movs	r1, #15
 8002238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800223c:	f7ff ff8e 	bl	800215c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <SysTick_Config+0x40>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002246:	4b04      	ldr	r3, [pc, #16]	; (8002258 <SysTick_Config+0x40>)
 8002248:	2207      	movs	r2, #7
 800224a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	e000e010 	.word	0xe000e010

0800225c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ff47 	bl	80020f8 <__NVIC_SetPriorityGrouping>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	4603      	mov	r3, r0
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002284:	f7ff ff5c 	bl	8002140 <__NVIC_GetPriorityGrouping>
 8002288:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	6978      	ldr	r0, [r7, #20]
 8002290:	f7ff ff8e 	bl	80021b0 <NVIC_EncodePriority>
 8002294:	4602      	mov	r2, r0
 8002296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff5d 	bl	800215c <__NVIC_SetPriority>
}
 80022a2:	bf00      	nop
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ffb0 	bl	8002218 <SysTick_Config>
 80022b8:	4603      	mov	r3, r0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d2:	e166      	b.n	80025a2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	2101      	movs	r1, #1
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	fa01 f303 	lsl.w	r3, r1, r3
 80022e0:	4013      	ands	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 8158 	beq.w	800259c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d00b      	beq.n	800230c <HAL_GPIO_Init+0x48>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d007      	beq.n	800230c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002300:	2b11      	cmp	r3, #17
 8002302:	d003      	beq.n	800230c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b12      	cmp	r3, #18
 800230a:	d130      	bne.n	800236e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	2203      	movs	r2, #3
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4313      	orrs	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002342:	2201      	movs	r2, #1
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4013      	ands	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	091b      	lsrs	r3, r3, #4
 8002358:	f003 0201 	and.w	r2, r3, #1
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	2203      	movs	r2, #3
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4013      	ands	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0xea>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b12      	cmp	r3, #18
 80023ac:	d123      	bne.n	80023f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	08da      	lsrs	r2, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3208      	adds	r2, #8
 80023b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	220f      	movs	r2, #15
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	691a      	ldr	r2, [r3, #16]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	08da      	lsrs	r2, r3, #3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3208      	adds	r2, #8
 80023f0:	6939      	ldr	r1, [r7, #16]
 80023f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	2203      	movs	r2, #3
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4013      	ands	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0203 	and.w	r2, r3, #3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 80b2 	beq.w	800259c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002438:	4b61      	ldr	r3, [pc, #388]	; (80025c0 <HAL_GPIO_Init+0x2fc>)
 800243a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800243c:	4a60      	ldr	r2, [pc, #384]	; (80025c0 <HAL_GPIO_Init+0x2fc>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	6613      	str	r3, [r2, #96]	; 0x60
 8002444:	4b5e      	ldr	r3, [pc, #376]	; (80025c0 <HAL_GPIO_Init+0x2fc>)
 8002446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002450:	4a5c      	ldr	r2, [pc, #368]	; (80025c4 <HAL_GPIO_Init+0x300>)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	089b      	lsrs	r3, r3, #2
 8002456:	3302      	adds	r3, #2
 8002458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	220f      	movs	r2, #15
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800247a:	d02b      	beq.n	80024d4 <HAL_GPIO_Init+0x210>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a52      	ldr	r2, [pc, #328]	; (80025c8 <HAL_GPIO_Init+0x304>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d025      	beq.n	80024d0 <HAL_GPIO_Init+0x20c>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a51      	ldr	r2, [pc, #324]	; (80025cc <HAL_GPIO_Init+0x308>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d01f      	beq.n	80024cc <HAL_GPIO_Init+0x208>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a50      	ldr	r2, [pc, #320]	; (80025d0 <HAL_GPIO_Init+0x30c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d019      	beq.n	80024c8 <HAL_GPIO_Init+0x204>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a4f      	ldr	r2, [pc, #316]	; (80025d4 <HAL_GPIO_Init+0x310>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d013      	beq.n	80024c4 <HAL_GPIO_Init+0x200>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a4e      	ldr	r2, [pc, #312]	; (80025d8 <HAL_GPIO_Init+0x314>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d00d      	beq.n	80024c0 <HAL_GPIO_Init+0x1fc>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a4d      	ldr	r2, [pc, #308]	; (80025dc <HAL_GPIO_Init+0x318>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d007      	beq.n	80024bc <HAL_GPIO_Init+0x1f8>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a4c      	ldr	r2, [pc, #304]	; (80025e0 <HAL_GPIO_Init+0x31c>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d101      	bne.n	80024b8 <HAL_GPIO_Init+0x1f4>
 80024b4:	2307      	movs	r3, #7
 80024b6:	e00e      	b.n	80024d6 <HAL_GPIO_Init+0x212>
 80024b8:	2308      	movs	r3, #8
 80024ba:	e00c      	b.n	80024d6 <HAL_GPIO_Init+0x212>
 80024bc:	2306      	movs	r3, #6
 80024be:	e00a      	b.n	80024d6 <HAL_GPIO_Init+0x212>
 80024c0:	2305      	movs	r3, #5
 80024c2:	e008      	b.n	80024d6 <HAL_GPIO_Init+0x212>
 80024c4:	2304      	movs	r3, #4
 80024c6:	e006      	b.n	80024d6 <HAL_GPIO_Init+0x212>
 80024c8:	2303      	movs	r3, #3
 80024ca:	e004      	b.n	80024d6 <HAL_GPIO_Init+0x212>
 80024cc:	2302      	movs	r3, #2
 80024ce:	e002      	b.n	80024d6 <HAL_GPIO_Init+0x212>
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <HAL_GPIO_Init+0x212>
 80024d4:	2300      	movs	r3, #0
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	f002 0203 	and.w	r2, r2, #3
 80024dc:	0092      	lsls	r2, r2, #2
 80024de:	4093      	lsls	r3, r2
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024e6:	4937      	ldr	r1, [pc, #220]	; (80025c4 <HAL_GPIO_Init+0x300>)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	089b      	lsrs	r3, r3, #2
 80024ec:	3302      	adds	r3, #2
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024f4:	4b3b      	ldr	r3, [pc, #236]	; (80025e4 <HAL_GPIO_Init+0x320>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4013      	ands	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002518:	4a32      	ldr	r2, [pc, #200]	; (80025e4 <HAL_GPIO_Init+0x320>)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800251e:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <HAL_GPIO_Init+0x320>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	43db      	mvns	r3, r3
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002542:	4a28      	ldr	r2, [pc, #160]	; (80025e4 <HAL_GPIO_Init+0x320>)
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002548:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <HAL_GPIO_Init+0x320>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	43db      	mvns	r3, r3
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4013      	ands	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800256c:	4a1d      	ldr	r2, [pc, #116]	; (80025e4 <HAL_GPIO_Init+0x320>)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002572:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <HAL_GPIO_Init+0x320>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	43db      	mvns	r3, r3
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4013      	ands	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002596:	4a13      	ldr	r2, [pc, #76]	; (80025e4 <HAL_GPIO_Init+0x320>)
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	3301      	adds	r3, #1
 80025a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f47f ae91 	bne.w	80022d4 <HAL_GPIO_Init+0x10>
  }
}
 80025b2:	bf00      	nop
 80025b4:	bf00      	nop
 80025b6:	371c      	adds	r7, #28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40010000 	.word	0x40010000
 80025c8:	48000400 	.word	0x48000400
 80025cc:	48000800 	.word	0x48000800
 80025d0:	48000c00 	.word	0x48000c00
 80025d4:	48001000 	.word	0x48001000
 80025d8:	48001400 	.word	0x48001400
 80025dc:	48001800 	.word	0x48001800
 80025e0:	48001c00 	.word	0x48001c00
 80025e4:	40010400 	.word	0x40010400

080025e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <HAL_PWREx_GetVoltageRange+0x18>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40007000 	.word	0x40007000

08002604 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002612:	d130      	bne.n	8002676 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002614:	4b23      	ldr	r3, [pc, #140]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800261c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002620:	d038      	beq.n	8002694 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002622:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800262a:	4a1e      	ldr	r2, [pc, #120]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800262c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002630:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002632:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2232      	movs	r2, #50	; 0x32
 8002638:	fb02 f303 	mul.w	r3, r2, r3
 800263c:	4a1b      	ldr	r2, [pc, #108]	; (80026ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	0c9b      	lsrs	r3, r3, #18
 8002644:	3301      	adds	r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002648:	e002      	b.n	8002650 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	3b01      	subs	r3, #1
 800264e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002650:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800265c:	d102      	bne.n	8002664 <HAL_PWREx_ControlVoltageScaling+0x60>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1f2      	bne.n	800264a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002664:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002670:	d110      	bne.n	8002694 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e00f      	b.n	8002696 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800267e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002682:	d007      	beq.n	8002694 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002684:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800268c:	4a05      	ldr	r2, [pc, #20]	; (80026a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800268e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002692:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40007000 	.word	0x40007000
 80026a8:	20000000 	.word	0x20000000
 80026ac:	431bde83 	.word	0x431bde83

080026b0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4a04      	ldr	r2, [pc, #16]	; (80026cc <HAL_PWREx_EnableVddIO2+0x1c>)
 80026ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026be:	6053      	str	r3, [r2, #4]
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40007000 	.word	0x40007000

080026d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d102      	bne.n	80026e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	f000 bc16 	b.w	8002f10 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e4:	4ba0      	ldr	r3, [pc, #640]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 030c 	and.w	r3, r3, #12
 80026ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026ee:	4b9e      	ldr	r3, [pc, #632]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80e4 	beq.w	80028ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_RCC_OscConfig+0x4c>
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	2b0c      	cmp	r3, #12
 8002710:	f040 808b 	bne.w	800282a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2b01      	cmp	r3, #1
 8002718:	f040 8087 	bne.w	800282a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800271c:	4b92      	ldr	r3, [pc, #584]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_RCC_OscConfig+0x64>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e3ed      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1a      	ldr	r2, [r3, #32]
 8002738:	4b8b      	ldr	r3, [pc, #556]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d004      	beq.n	800274e <HAL_RCC_OscConfig+0x7e>
 8002744:	4b88      	ldr	r3, [pc, #544]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800274c:	e005      	b.n	800275a <HAL_RCC_OscConfig+0x8a>
 800274e:	4b86      	ldr	r3, [pc, #536]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800275a:	4293      	cmp	r3, r2
 800275c:	d223      	bcs.n	80027a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	4618      	mov	r0, r3
 8002764:	f000 fd80 	bl	8003268 <RCC_SetFlashLatencyFromMSIRange>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e3ce      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002772:	4b7d      	ldr	r3, [pc, #500]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a7c      	ldr	r2, [pc, #496]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002778:	f043 0308 	orr.w	r3, r3, #8
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	4b7a      	ldr	r3, [pc, #488]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	4977      	ldr	r1, [pc, #476]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 800278c:	4313      	orrs	r3, r2
 800278e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002790:	4b75      	ldr	r3, [pc, #468]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	021b      	lsls	r3, r3, #8
 800279e:	4972      	ldr	r1, [pc, #456]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
 80027a4:	e025      	b.n	80027f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027a6:	4b70      	ldr	r3, [pc, #448]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a6f      	ldr	r2, [pc, #444]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 80027ac:	f043 0308 	orr.w	r3, r3, #8
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b6d      	ldr	r3, [pc, #436]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	496a      	ldr	r1, [pc, #424]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027c4:	4b68      	ldr	r3, [pc, #416]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	4965      	ldr	r1, [pc, #404]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fd40 	bl	8003268 <RCC_SetFlashLatencyFromMSIRange>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e38e      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027f2:	f000 fc75 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 80027f6:	4602      	mov	r2, r0
 80027f8:	4b5b      	ldr	r3, [pc, #364]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	495a      	ldr	r1, [pc, #360]	; (800296c <HAL_RCC_OscConfig+0x29c>)
 8002804:	5ccb      	ldrb	r3, [r1, r3]
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	fa22 f303 	lsr.w	r3, r2, r3
 800280e:	4a58      	ldr	r2, [pc, #352]	; (8002970 <HAL_RCC_OscConfig+0x2a0>)
 8002810:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002812:	4b58      	ldr	r3, [pc, #352]	; (8002974 <HAL_RCC_OscConfig+0x2a4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fc12 	bl	8002040 <HAL_InitTick>
 800281c:	4603      	mov	r3, r0
 800281e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d052      	beq.n	80028cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	e372      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d032      	beq.n	8002898 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002832:	4b4d      	ldr	r3, [pc, #308]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a4c      	ldr	r2, [pc, #304]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800283e:	f7ff fc4f 	bl	80020e0 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002846:	f7ff fc4b 	bl	80020e0 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e35b      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002858:	4b43      	ldr	r3, [pc, #268]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002864:	4b40      	ldr	r3, [pc, #256]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a3f      	ldr	r2, [pc, #252]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 800286a:	f043 0308 	orr.w	r3, r3, #8
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	4b3d      	ldr	r3, [pc, #244]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	493a      	ldr	r1, [pc, #232]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 800287e:	4313      	orrs	r3, r2
 8002880:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002882:	4b39      	ldr	r3, [pc, #228]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	021b      	lsls	r3, r3, #8
 8002890:	4935      	ldr	r1, [pc, #212]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
 8002896:	e01a      	b.n	80028ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002898:	4b33      	ldr	r3, [pc, #204]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a32      	ldr	r2, [pc, #200]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 800289e:	f023 0301 	bic.w	r3, r3, #1
 80028a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028a4:	f7ff fc1c 	bl	80020e0 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028ac:	f7ff fc18 	bl	80020e0 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e328      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028be:	4b2a      	ldr	r3, [pc, #168]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x1dc>
 80028ca:	e000      	b.n	80028ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d073      	beq.n	80029c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d005      	beq.n	80028ec <HAL_RCC_OscConfig+0x21c>
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2b0c      	cmp	r3, #12
 80028e4:	d10e      	bne.n	8002904 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d10b      	bne.n	8002904 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d063      	beq.n	80029c0 <HAL_RCC_OscConfig+0x2f0>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d15f      	bne.n	80029c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e305      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290c:	d106      	bne.n	800291c <HAL_RCC_OscConfig+0x24c>
 800290e:	4b16      	ldr	r3, [pc, #88]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a15      	ldr	r2, [pc, #84]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	e01d      	b.n	8002958 <HAL_RCC_OscConfig+0x288>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0x270>
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a0f      	ldr	r2, [pc, #60]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 800292c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a0c      	ldr	r2, [pc, #48]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e00b      	b.n	8002958 <HAL_RCC_OscConfig+0x288>
 8002940:	4b09      	ldr	r3, [pc, #36]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a08      	ldr	r2, [pc, #32]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a05      	ldr	r2, [pc, #20]	; (8002968 <HAL_RCC_OscConfig+0x298>)
 8002952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d01b      	beq.n	8002998 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7ff fbbe 	bl	80020e0 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002966:	e010      	b.n	800298a <HAL_RCC_OscConfig+0x2ba>
 8002968:	40021000 	.word	0x40021000
 800296c:	080058c8 	.word	0x080058c8
 8002970:	20000000 	.word	0x20000000
 8002974:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002978:	f7ff fbb2 	bl	80020e0 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	; 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e2c2      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800298a:	4baf      	ldr	r3, [pc, #700]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x2a8>
 8002996:	e014      	b.n	80029c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7ff fba2 	bl	80020e0 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a0:	f7ff fb9e 	bl	80020e0 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	; 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e2ae      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029b2:	4ba5      	ldr	r3, [pc, #660]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x2d0>
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d060      	beq.n	8002a90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_OscConfig+0x310>
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d119      	bne.n	8002a0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d116      	bne.n	8002a0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e0:	4b99      	ldr	r3, [pc, #612]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_OscConfig+0x328>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e28b      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f8:	4b93      	ldr	r3, [pc, #588]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	061b      	lsls	r3, r3, #24
 8002a06:	4990      	ldr	r1, [pc, #576]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a0c:	e040      	b.n	8002a90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d023      	beq.n	8002a5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a16:	4b8c      	ldr	r3, [pc, #560]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a8b      	ldr	r2, [pc, #556]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a22:	f7ff fb5d 	bl	80020e0 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a2a:	f7ff fb59 	bl	80020e0 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e269      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a3c:	4b82      	ldr	r3, [pc, #520]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a48:	4b7f      	ldr	r3, [pc, #508]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	061b      	lsls	r3, r3, #24
 8002a56:	497c      	ldr	r1, [pc, #496]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
 8002a5c:	e018      	b.n	8002a90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a5e:	4b7a      	ldr	r3, [pc, #488]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a79      	ldr	r2, [pc, #484]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6a:	f7ff fb39 	bl	80020e0 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a72:	f7ff fb35 	bl	80020e0 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e245      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a84:	4b70      	ldr	r3, [pc, #448]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f0      	bne.n	8002a72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d03c      	beq.n	8002b16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01c      	beq.n	8002ade <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa4:	4b68      	ldr	r3, [pc, #416]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aaa:	4a67      	ldr	r2, [pc, #412]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab4:	f7ff fb14 	bl	80020e0 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002abc:	f7ff fb10 	bl	80020e0 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e220      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ace:	4b5e      	ldr	r3, [pc, #376]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0ef      	beq.n	8002abc <HAL_RCC_OscConfig+0x3ec>
 8002adc:	e01b      	b.n	8002b16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ade:	4b5a      	ldr	r3, [pc, #360]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae4:	4a58      	ldr	r2, [pc, #352]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002ae6:	f023 0301 	bic.w	r3, r3, #1
 8002aea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aee:	f7ff faf7 	bl	80020e0 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af6:	f7ff faf3 	bl	80020e0 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e203      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b08:	4b4f      	ldr	r3, [pc, #316]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1ef      	bne.n	8002af6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 80a6 	beq.w	8002c70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b24:	2300      	movs	r3, #0
 8002b26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b28:	4b47      	ldr	r3, [pc, #284]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10d      	bne.n	8002b50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b34:	4b44      	ldr	r3, [pc, #272]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b38:	4a43      	ldr	r2, [pc, #268]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b40:	4b41      	ldr	r3, [pc, #260]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b50:	4b3e      	ldr	r3, [pc, #248]	; (8002c4c <HAL_RCC_OscConfig+0x57c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d118      	bne.n	8002b8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b5c:	4b3b      	ldr	r3, [pc, #236]	; (8002c4c <HAL_RCC_OscConfig+0x57c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a3a      	ldr	r2, [pc, #232]	; (8002c4c <HAL_RCC_OscConfig+0x57c>)
 8002b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b68:	f7ff faba 	bl	80020e0 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b70:	f7ff fab6 	bl	80020e0 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e1c6      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b82:	4b32      	ldr	r3, [pc, #200]	; (8002c4c <HAL_RCC_OscConfig+0x57c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d108      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4d8>
 8002b96:	4b2c      	ldr	r3, [pc, #176]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9c:	4a2a      	ldr	r2, [pc, #168]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ba6:	e024      	b.n	8002bf2 <HAL_RCC_OscConfig+0x522>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b05      	cmp	r3, #5
 8002bae:	d110      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x502>
 8002bb0:	4b25      	ldr	r3, [pc, #148]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb6:	4a24      	ldr	r2, [pc, #144]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002bb8:	f043 0304 	orr.w	r3, r3, #4
 8002bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bc0:	4b21      	ldr	r3, [pc, #132]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc6:	4a20      	ldr	r2, [pc, #128]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bd0:	e00f      	b.n	8002bf2 <HAL_RCC_OscConfig+0x522>
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd8:	4a1b      	ldr	r2, [pc, #108]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002bda:	f023 0301 	bic.w	r3, r3, #1
 8002bde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002be2:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be8:	4a17      	ldr	r2, [pc, #92]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002bea:	f023 0304 	bic.w	r3, r3, #4
 8002bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d016      	beq.n	8002c28 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bfa:	f7ff fa71 	bl	80020e0 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c00:	e00a      	b.n	8002c18 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c02:	f7ff fa6d 	bl	80020e0 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e17b      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_OscConfig+0x578>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0ed      	beq.n	8002c02 <HAL_RCC_OscConfig+0x532>
 8002c26:	e01a      	b.n	8002c5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c28:	f7ff fa5a 	bl	80020e0 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c2e:	e00f      	b.n	8002c50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c30:	f7ff fa56 	bl	80020e0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d906      	bls.n	8002c50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e164      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c50:	4ba8      	ldr	r3, [pc, #672]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1e8      	bne.n	8002c30 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c5e:	7ffb      	ldrb	r3, [r7, #31]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d105      	bne.n	8002c70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c64:	4ba3      	ldr	r3, [pc, #652]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c68:	4aa2      	ldr	r2, [pc, #648]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002c6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d03c      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d01c      	beq.n	8002cbe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c84:	4b9b      	ldr	r3, [pc, #620]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002c86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c8a:	4a9a      	ldr	r2, [pc, #616]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c94:	f7ff fa24 	bl	80020e0 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c9c:	f7ff fa20 	bl	80020e0 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e130      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cae:	4b91      	ldr	r3, [pc, #580]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002cb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0ef      	beq.n	8002c9c <HAL_RCC_OscConfig+0x5cc>
 8002cbc:	e01b      	b.n	8002cf6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cbe:	4b8d      	ldr	r3, [pc, #564]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002cc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cc4:	4a8b      	ldr	r2, [pc, #556]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002cc6:	f023 0301 	bic.w	r3, r3, #1
 8002cca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cce:	f7ff fa07 	bl	80020e0 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cd6:	f7ff fa03 	bl	80020e0 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e113      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ce8:	4b82      	ldr	r3, [pc, #520]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002cea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1ef      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 8107 	beq.w	8002f0e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	f040 80cb 	bne.w	8002ea0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d0a:	4b7a      	ldr	r3, [pc, #488]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f003 0203 	and.w	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d12c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d123      	bne.n	8002d78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d11b      	bne.n	8002d78 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d113      	bne.n	8002d78 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5a:	085b      	lsrs	r3, r3, #1
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d109      	bne.n	8002d78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	085b      	lsrs	r3, r3, #1
 8002d70:	3b01      	subs	r3, #1
 8002d72:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d06d      	beq.n	8002e54 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	2b0c      	cmp	r3, #12
 8002d7c:	d068      	beq.n	8002e50 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d7e:	4b5d      	ldr	r3, [pc, #372]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d105      	bne.n	8002d96 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d8a:	4b5a      	ldr	r3, [pc, #360]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e0ba      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d9a:	4b56      	ldr	r3, [pc, #344]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a55      	ldr	r2, [pc, #340]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002da0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002da4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002da6:	f7ff f99b 	bl	80020e0 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dae:	f7ff f997 	bl	80020e0 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e0a7      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc0:	4b4c      	ldr	r3, [pc, #304]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f0      	bne.n	8002dae <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dcc:	4b49      	ldr	r3, [pc, #292]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	4b49      	ldr	r3, [pc, #292]	; (8002ef8 <HAL_RCC_OscConfig+0x828>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ddc:	3a01      	subs	r2, #1
 8002dde:	0112      	lsls	r2, r2, #4
 8002de0:	4311      	orrs	r1, r2
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002de6:	0212      	lsls	r2, r2, #8
 8002de8:	4311      	orrs	r1, r2
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002dee:	0852      	lsrs	r2, r2, #1
 8002df0:	3a01      	subs	r2, #1
 8002df2:	0552      	lsls	r2, r2, #21
 8002df4:	4311      	orrs	r1, r2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002dfa:	0852      	lsrs	r2, r2, #1
 8002dfc:	3a01      	subs	r2, #1
 8002dfe:	0652      	lsls	r2, r2, #25
 8002e00:	4311      	orrs	r1, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e06:	06d2      	lsls	r2, r2, #27
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	493a      	ldr	r1, [pc, #232]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e10:	4b38      	ldr	r3, [pc, #224]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a37      	ldr	r2, [pc, #220]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002e16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e1c:	4b35      	ldr	r3, [pc, #212]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4a34      	ldr	r2, [pc, #208]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002e22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e28:	f7ff f95a 	bl	80020e0 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e30:	f7ff f956 	bl	80020e0 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e066      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e42:	4b2c      	ldr	r3, [pc, #176]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e4e:	e05e      	b.n	8002f0e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e05d      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e54:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d156      	bne.n	8002f0e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e60:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a23      	ldr	r2, [pc, #140]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e6c:	4b21      	ldr	r3, [pc, #132]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	4a20      	ldr	r2, [pc, #128]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e78:	f7ff f932 	bl	80020e0 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e80:	f7ff f92e 	bl	80020e0 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e03e      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e92:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x7b0>
 8002e9e:	e036      	b.n	8002f0e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2b0c      	cmp	r3, #12
 8002ea4:	d031      	beq.n	8002f0a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea6:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a12      	ldr	r2, [pc, #72]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002eac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eb0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002eb2:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d105      	bne.n	8002eca <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ebe:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	4a0c      	ldr	r2, [pc, #48]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002ec4:	f023 0303 	bic.w	r3, r3, #3
 8002ec8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002eca:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	4a09      	ldr	r2, [pc, #36]	; (8002ef4 <HAL_RCC_OscConfig+0x824>)
 8002ed0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eda:	f7ff f901 	bl	80020e0 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee0:	e00c      	b.n	8002efc <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee2:	f7ff f8fd 	bl	80020e0 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d905      	bls.n	8002efc <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e00d      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_RCC_OscConfig+0x848>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1ec      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x812>
 8002f08:	e001      	b.n	8002f0e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3720      	adds	r7, #32
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40021000 	.word	0x40021000

08002f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0c8      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f30:	4b66      	ldr	r3, [pc, #408]	; (80030cc <HAL_RCC_ClockConfig+0x1b0>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d910      	bls.n	8002f60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3e:	4b63      	ldr	r3, [pc, #396]	; (80030cc <HAL_RCC_ClockConfig+0x1b0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 0207 	bic.w	r2, r3, #7
 8002f46:	4961      	ldr	r1, [pc, #388]	; (80030cc <HAL_RCC_ClockConfig+0x1b0>)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4e:	4b5f      	ldr	r3, [pc, #380]	; (80030cc <HAL_RCC_ClockConfig+0x1b0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0b0      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d04c      	beq.n	8003006 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d107      	bne.n	8002f84 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f74:	4b56      	ldr	r3, [pc, #344]	; (80030d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d121      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e09e      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d107      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f8c:	4b50      	ldr	r3, [pc, #320]	; (80030d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d115      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e092      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d107      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fa4:	4b4a      	ldr	r3, [pc, #296]	; (80030d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e086      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fb4:	4b46      	ldr	r3, [pc, #280]	; (80030d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e07e      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fc4:	4b42      	ldr	r3, [pc, #264]	; (80030d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f023 0203 	bic.w	r2, r3, #3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	493f      	ldr	r1, [pc, #252]	; (80030d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd6:	f7ff f883 	bl	80020e0 <HAL_GetTick>
 8002fda:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fdc:	e00a      	b.n	8002ff4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fde:	f7ff f87f 	bl	80020e0 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e066      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff4:	4b36      	ldr	r3, [pc, #216]	; (80030d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 020c 	and.w	r2, r3, #12
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	429a      	cmp	r2, r3
 8003004:	d1eb      	bne.n	8002fde <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d008      	beq.n	8003024 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003012:	4b2f      	ldr	r3, [pc, #188]	; (80030d0 <HAL_RCC_ClockConfig+0x1b4>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	492c      	ldr	r1, [pc, #176]	; (80030d0 <HAL_RCC_ClockConfig+0x1b4>)
 8003020:	4313      	orrs	r3, r2
 8003022:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003024:	4b29      	ldr	r3, [pc, #164]	; (80030cc <HAL_RCC_ClockConfig+0x1b0>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d210      	bcs.n	8003054 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b26      	ldr	r3, [pc, #152]	; (80030cc <HAL_RCC_ClockConfig+0x1b0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 0207 	bic.w	r2, r3, #7
 800303a:	4924      	ldr	r1, [pc, #144]	; (80030cc <HAL_RCC_ClockConfig+0x1b0>)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003042:	4b22      	ldr	r3, [pc, #136]	; (80030cc <HAL_RCC_ClockConfig+0x1b0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e036      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003060:	4b1b      	ldr	r3, [pc, #108]	; (80030d0 <HAL_RCC_ClockConfig+0x1b4>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	4918      	ldr	r1, [pc, #96]	; (80030d0 <HAL_RCC_ClockConfig+0x1b4>)
 800306e:	4313      	orrs	r3, r2
 8003070:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d009      	beq.n	8003092 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800307e:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <HAL_RCC_ClockConfig+0x1b4>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4910      	ldr	r1, [pc, #64]	; (80030d0 <HAL_RCC_ClockConfig+0x1b4>)
 800308e:	4313      	orrs	r3, r2
 8003090:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003092:	f000 f825 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 8003096:	4602      	mov	r2, r0
 8003098:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <HAL_RCC_ClockConfig+0x1b4>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	490c      	ldr	r1, [pc, #48]	; (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 80030a4:	5ccb      	ldrb	r3, [r1, r3]
 80030a6:	f003 031f 	and.w	r3, r3, #31
 80030aa:	fa22 f303 	lsr.w	r3, r2, r3
 80030ae:	4a0a      	ldr	r2, [pc, #40]	; (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030b2:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <HAL_RCC_ClockConfig+0x1c0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe ffc2 	bl	8002040 <HAL_InitTick>
 80030bc:	4603      	mov	r3, r0
 80030be:	72fb      	strb	r3, [r7, #11]

  return status;
 80030c0:	7afb      	ldrb	r3, [r7, #11]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40022000 	.word	0x40022000
 80030d0:	40021000 	.word	0x40021000
 80030d4:	080058c8 	.word	0x080058c8
 80030d8:	20000000 	.word	0x20000000
 80030dc:	20000004 	.word	0x20000004

080030e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b089      	sub	sp, #36	; 0x24
 80030e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61fb      	str	r3, [r7, #28]
 80030ea:	2300      	movs	r3, #0
 80030ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ee:	4b3e      	ldr	r3, [pc, #248]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030f8:	4b3b      	ldr	r3, [pc, #236]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_RCC_GetSysClockFreq+0x34>
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	2b0c      	cmp	r3, #12
 800310c:	d121      	bne.n	8003152 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d11e      	bne.n	8003152 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003114:	4b34      	ldr	r3, [pc, #208]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b00      	cmp	r3, #0
 800311e:	d107      	bne.n	8003130 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003120:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003126:	0a1b      	lsrs	r3, r3, #8
 8003128:	f003 030f 	and.w	r3, r3, #15
 800312c:	61fb      	str	r3, [r7, #28]
 800312e:	e005      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003130:	4b2d      	ldr	r3, [pc, #180]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	091b      	lsrs	r3, r3, #4
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800313c:	4a2b      	ldr	r2, [pc, #172]	; (80031ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003144:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10d      	bne.n	8003168 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003150:	e00a      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	2b04      	cmp	r3, #4
 8003156:	d102      	bne.n	800315e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003158:	4b25      	ldr	r3, [pc, #148]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800315a:	61bb      	str	r3, [r7, #24]
 800315c:	e004      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	2b08      	cmp	r3, #8
 8003162:	d101      	bne.n	8003168 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003164:	4b23      	ldr	r3, [pc, #140]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003166:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	2b0c      	cmp	r3, #12
 800316c:	d134      	bne.n	80031d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800316e:	4b1e      	ldr	r3, [pc, #120]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d003      	beq.n	8003186 <HAL_RCC_GetSysClockFreq+0xa6>
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b03      	cmp	r3, #3
 8003182:	d003      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0xac>
 8003184:	e005      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003186:	4b1a      	ldr	r3, [pc, #104]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003188:	617b      	str	r3, [r7, #20]
      break;
 800318a:	e005      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800318c:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800318e:	617b      	str	r3, [r7, #20]
      break;
 8003190:	e002      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	617b      	str	r3, [r7, #20]
      break;
 8003196:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003198:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	091b      	lsrs	r3, r3, #4
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	3301      	adds	r3, #1
 80031a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031a6:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	0a1b      	lsrs	r3, r3, #8
 80031ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	fb02 f203 	mul.w	r2, r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031be:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	0e5b      	lsrs	r3, r3, #25
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	3301      	adds	r3, #1
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031d8:	69bb      	ldr	r3, [r7, #24]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3724      	adds	r7, #36	; 0x24
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40021000 	.word	0x40021000
 80031ec:	080058e0 	.word	0x080058e0
 80031f0:	00f42400 	.word	0x00f42400
 80031f4:	007a1200 	.word	0x007a1200

080031f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031fc:	4b03      	ldr	r3, [pc, #12]	; (800320c <HAL_RCC_GetHCLKFreq+0x14>)
 80031fe:	681b      	ldr	r3, [r3, #0]
}
 8003200:	4618      	mov	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20000000 	.word	0x20000000

08003210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003214:	f7ff fff0 	bl	80031f8 <HAL_RCC_GetHCLKFreq>
 8003218:	4602      	mov	r2, r0
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <HAL_RCC_GetPCLK1Freq+0x24>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	0a1b      	lsrs	r3, r3, #8
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	4904      	ldr	r1, [pc, #16]	; (8003238 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003226:	5ccb      	ldrb	r3, [r1, r3]
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003230:	4618      	mov	r0, r3
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40021000 	.word	0x40021000
 8003238:	080058d8 	.word	0x080058d8

0800323c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003240:	f7ff ffda 	bl	80031f8 <HAL_RCC_GetHCLKFreq>
 8003244:	4602      	mov	r2, r0
 8003246:	4b06      	ldr	r3, [pc, #24]	; (8003260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	0adb      	lsrs	r3, r3, #11
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	4904      	ldr	r1, [pc, #16]	; (8003264 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003252:	5ccb      	ldrb	r3, [r1, r3]
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40021000 	.word	0x40021000
 8003264:	080058d8 	.word	0x080058d8

08003268 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003270:	2300      	movs	r3, #0
 8003272:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003274:	4b2a      	ldr	r3, [pc, #168]	; (8003320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003280:	f7ff f9b2 	bl	80025e8 <HAL_PWREx_GetVoltageRange>
 8003284:	6178      	str	r0, [r7, #20]
 8003286:	e014      	b.n	80032b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003288:	4b25      	ldr	r3, [pc, #148]	; (8003320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800328a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328c:	4a24      	ldr	r2, [pc, #144]	; (8003320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800328e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003292:	6593      	str	r3, [r2, #88]	; 0x58
 8003294:	4b22      	ldr	r3, [pc, #136]	; (8003320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032a0:	f7ff f9a2 	bl	80025e8 <HAL_PWREx_GetVoltageRange>
 80032a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032a6:	4b1e      	ldr	r3, [pc, #120]	; (8003320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032aa:	4a1d      	ldr	r2, [pc, #116]	; (8003320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b8:	d10b      	bne.n	80032d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b80      	cmp	r3, #128	; 0x80
 80032be:	d919      	bls.n	80032f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2ba0      	cmp	r3, #160	; 0xa0
 80032c4:	d902      	bls.n	80032cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032c6:	2302      	movs	r3, #2
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	e013      	b.n	80032f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032cc:	2301      	movs	r3, #1
 80032ce:	613b      	str	r3, [r7, #16]
 80032d0:	e010      	b.n	80032f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b80      	cmp	r3, #128	; 0x80
 80032d6:	d902      	bls.n	80032de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032d8:	2303      	movs	r3, #3
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	e00a      	b.n	80032f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b80      	cmp	r3, #128	; 0x80
 80032e2:	d102      	bne.n	80032ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032e4:	2302      	movs	r3, #2
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	e004      	b.n	80032f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b70      	cmp	r3, #112	; 0x70
 80032ee:	d101      	bne.n	80032f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032f0:	2301      	movs	r3, #1
 80032f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f023 0207 	bic.w	r2, r3, #7
 80032fc:	4909      	ldr	r1, [pc, #36]	; (8003324 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003304:	4b07      	ldr	r3, [pc, #28]	; (8003324 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	429a      	cmp	r2, r3
 8003310:	d001      	beq.n	8003316 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40021000 	.word	0x40021000
 8003324:	40022000 	.word	0x40022000

08003328 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003330:	2300      	movs	r3, #0
 8003332:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003334:	2300      	movs	r3, #0
 8003336:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003340:	2b00      	cmp	r3, #0
 8003342:	d041      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003348:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800334c:	d02a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800334e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003352:	d824      	bhi.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003354:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003358:	d008      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800335a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800335e:	d81e      	bhi.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003368:	d010      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800336a:	e018      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800336c:	4b86      	ldr	r3, [pc, #536]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	4a85      	ldr	r2, [pc, #532]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003376:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003378:	e015      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3304      	adds	r3, #4
 800337e:	2100      	movs	r1, #0
 8003380:	4618      	mov	r0, r3
 8003382:	f000 facd 	bl	8003920 <RCCEx_PLLSAI1_Config>
 8003386:	4603      	mov	r3, r0
 8003388:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800338a:	e00c      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3320      	adds	r3, #32
 8003390:	2100      	movs	r1, #0
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fbb6 	bl	8003b04 <RCCEx_PLLSAI2_Config>
 8003398:	4603      	mov	r3, r0
 800339a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800339c:	e003      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	74fb      	strb	r3, [r7, #19]
      break;
 80033a2:	e000      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033a6:	7cfb      	ldrb	r3, [r7, #19]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10b      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033ac:	4b76      	ldr	r3, [pc, #472]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033ba:	4973      	ldr	r1, [pc, #460]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033c2:	e001      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c4:	7cfb      	ldrb	r3, [r7, #19]
 80033c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d041      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033dc:	d02a      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80033de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033e2:	d824      	bhi.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033e8:	d008      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033ee:	d81e      	bhi.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80033f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033f8:	d010      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033fa:	e018      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033fc:	4b62      	ldr	r3, [pc, #392]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4a61      	ldr	r2, [pc, #388]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003406:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003408:	e015      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3304      	adds	r3, #4
 800340e:	2100      	movs	r1, #0
 8003410:	4618      	mov	r0, r3
 8003412:	f000 fa85 	bl	8003920 <RCCEx_PLLSAI1_Config>
 8003416:	4603      	mov	r3, r0
 8003418:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800341a:	e00c      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3320      	adds	r3, #32
 8003420:	2100      	movs	r1, #0
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fb6e 	bl	8003b04 <RCCEx_PLLSAI2_Config>
 8003428:	4603      	mov	r3, r0
 800342a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800342c:	e003      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	74fb      	strb	r3, [r7, #19]
      break;
 8003432:	e000      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003434:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003436:	7cfb      	ldrb	r3, [r7, #19]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10b      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800343c:	4b52      	ldr	r3, [pc, #328]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003442:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800344a:	494f      	ldr	r1, [pc, #316]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003452:	e001      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003454:	7cfb      	ldrb	r3, [r7, #19]
 8003456:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 80a0 	beq.w	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003466:	2300      	movs	r3, #0
 8003468:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800346a:	4b47      	ldr	r3, [pc, #284]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800347a:	2300      	movs	r3, #0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00d      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003480:	4b41      	ldr	r3, [pc, #260]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003484:	4a40      	ldr	r2, [pc, #256]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348a:	6593      	str	r3, [r2, #88]	; 0x58
 800348c:	4b3e      	ldr	r3, [pc, #248]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003498:	2301      	movs	r3, #1
 800349a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800349c:	4b3b      	ldr	r3, [pc, #236]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a3a      	ldr	r2, [pc, #232]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034a8:	f7fe fe1a 	bl	80020e0 <HAL_GetTick>
 80034ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034ae:	e009      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b0:	f7fe fe16 	bl	80020e0 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d902      	bls.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	74fb      	strb	r3, [r7, #19]
        break;
 80034c2:	e005      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034c4:	4b31      	ldr	r3, [pc, #196]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0ef      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d15c      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034d6:	4b2c      	ldr	r3, [pc, #176]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d01f      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d019      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034f4:	4b24      	ldr	r3, [pc, #144]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003500:	4b21      	ldr	r3, [pc, #132]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003506:	4a20      	ldr	r2, [pc, #128]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800350c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003510:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003516:	4a1c      	ldr	r2, [pc, #112]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003520:	4a19      	ldr	r2, [pc, #100]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d016      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003532:	f7fe fdd5 	bl	80020e0 <HAL_GetTick>
 8003536:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003538:	e00b      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800353a:	f7fe fdd1 	bl	80020e0 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	f241 3288 	movw	r2, #5000	; 0x1388
 8003548:	4293      	cmp	r3, r2
 800354a:	d902      	bls.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	74fb      	strb	r3, [r7, #19]
            break;
 8003550:	e006      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003552:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0ec      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003560:	7cfb      	ldrb	r3, [r7, #19]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10c      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003566:	4b08      	ldr	r3, [pc, #32]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003576:	4904      	ldr	r1, [pc, #16]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800357e:	e009      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003580:	7cfb      	ldrb	r3, [r7, #19]
 8003582:	74bb      	strb	r3, [r7, #18]
 8003584:	e006      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003586:	bf00      	nop
 8003588:	40021000 	.word	0x40021000
 800358c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003590:	7cfb      	ldrb	r3, [r7, #19]
 8003592:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003594:	7c7b      	ldrb	r3, [r7, #17]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d105      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800359a:	4ba6      	ldr	r3, [pc, #664]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800359c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359e:	4aa5      	ldr	r2, [pc, #660]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035b2:	4ba0      	ldr	r3, [pc, #640]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b8:	f023 0203 	bic.w	r2, r3, #3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c0:	499c      	ldr	r1, [pc, #624]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035d4:	4b97      	ldr	r3, [pc, #604]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035da:	f023 020c 	bic.w	r2, r3, #12
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e2:	4994      	ldr	r1, [pc, #592]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035f6:	4b8f      	ldr	r3, [pc, #572]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	498b      	ldr	r1, [pc, #556]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003618:	4b86      	ldr	r3, [pc, #536]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003626:	4983      	ldr	r1, [pc, #524]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0310 	and.w	r3, r3, #16
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800363a:	4b7e      	ldr	r3, [pc, #504]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003640:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003648:	497a      	ldr	r1, [pc, #488]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800365c:	4b75      	ldr	r3, [pc, #468]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003662:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366a:	4972      	ldr	r1, [pc, #456]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800367e:	4b6d      	ldr	r3, [pc, #436]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003684:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368c:	4969      	ldr	r1, [pc, #420]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036a0:	4b64      	ldr	r3, [pc, #400]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ae:	4961      	ldr	r1, [pc, #388]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036c2:	4b5c      	ldr	r3, [pc, #368]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d0:	4958      	ldr	r1, [pc, #352]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036e4:	4b53      	ldr	r3, [pc, #332]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f2:	4950      	ldr	r1, [pc, #320]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003706:	4b4b      	ldr	r3, [pc, #300]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003714:	4947      	ldr	r1, [pc, #284]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003728:	4b42      	ldr	r3, [pc, #264]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800372a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800372e:	f023 0203 	bic.w	r2, r3, #3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003736:	493f      	ldr	r1, [pc, #252]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d028      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800374a:	4b3a      	ldr	r3, [pc, #232]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800374c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003750:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003758:	4936      	ldr	r1, [pc, #216]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003768:	d106      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800376a:	4b32      	ldr	r3, [pc, #200]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	4a31      	ldr	r2, [pc, #196]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003770:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003774:	60d3      	str	r3, [r2, #12]
 8003776:	e011      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003780:	d10c      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3304      	adds	r3, #4
 8003786:	2101      	movs	r1, #1
 8003788:	4618      	mov	r0, r3
 800378a:	f000 f8c9 	bl	8003920 <RCCEx_PLLSAI1_Config>
 800378e:	4603      	mov	r3, r0
 8003790:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003792:	7cfb      	ldrb	r3, [r7, #19]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003798:	7cfb      	ldrb	r3, [r7, #19]
 800379a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d028      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037a8:	4b22      	ldr	r3, [pc, #136]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b6:	491f      	ldr	r1, [pc, #124]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037c6:	d106      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037c8:	4b1a      	ldr	r3, [pc, #104]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	4a19      	ldr	r2, [pc, #100]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037d2:	60d3      	str	r3, [r2, #12]
 80037d4:	e011      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037de:	d10c      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3304      	adds	r3, #4
 80037e4:	2101      	movs	r1, #1
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 f89a 	bl	8003920 <RCCEx_PLLSAI1_Config>
 80037ec:	4603      	mov	r3, r0
 80037ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037f0:	7cfb      	ldrb	r3, [r7, #19]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80037f6:	7cfb      	ldrb	r3, [r7, #19]
 80037f8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d02a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003814:	4907      	ldr	r1, [pc, #28]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003820:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003824:	d108      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003826:	4b03      	ldr	r3, [pc, #12]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	4a02      	ldr	r2, [pc, #8]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800382c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003830:	60d3      	str	r3, [r2, #12]
 8003832:	e013      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003834:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800383c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003840:	d10c      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3304      	adds	r3, #4
 8003846:	2101      	movs	r1, #1
 8003848:	4618      	mov	r0, r3
 800384a:	f000 f869 	bl	8003920 <RCCEx_PLLSAI1_Config>
 800384e:	4603      	mov	r3, r0
 8003850:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003852:	7cfb      	ldrb	r3, [r7, #19]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003858:	7cfb      	ldrb	r3, [r7, #19]
 800385a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d02f      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003868:	4b2c      	ldr	r3, [pc, #176]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003876:	4929      	ldr	r1, [pc, #164]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003882:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003886:	d10d      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3304      	adds	r3, #4
 800388c:	2102      	movs	r1, #2
 800388e:	4618      	mov	r0, r3
 8003890:	f000 f846 	bl	8003920 <RCCEx_PLLSAI1_Config>
 8003894:	4603      	mov	r3, r0
 8003896:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003898:	7cfb      	ldrb	r3, [r7, #19]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d014      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800389e:	7cfb      	ldrb	r3, [r7, #19]
 80038a0:	74bb      	strb	r3, [r7, #18]
 80038a2:	e011      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3320      	adds	r3, #32
 80038b2:	2102      	movs	r1, #2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 f925 	bl	8003b04 <RCCEx_PLLSAI2_Config>
 80038ba:	4603      	mov	r3, r0
 80038bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038be:	7cfb      	ldrb	r3, [r7, #19]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80038c4:	7cfb      	ldrb	r3, [r7, #19]
 80038c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00b      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038d4:	4b11      	ldr	r3, [pc, #68]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038e4:	490d      	ldr	r1, [pc, #52]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00b      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038f8:	4b08      	ldr	r3, [pc, #32]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003908:	4904      	ldr	r1, [pc, #16]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003910:	7cbb      	ldrb	r3, [r7, #18]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40021000 	.word	0x40021000

08003920 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800392e:	4b74      	ldr	r3, [pc, #464]	; (8003b00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d018      	beq.n	800396c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800393a:	4b71      	ldr	r3, [pc, #452]	; (8003b00 <RCCEx_PLLSAI1_Config+0x1e0>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f003 0203 	and.w	r2, r3, #3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d10d      	bne.n	8003966 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
       ||
 800394e:	2b00      	cmp	r3, #0
 8003950:	d009      	beq.n	8003966 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003952:	4b6b      	ldr	r3, [pc, #428]	; (8003b00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	091b      	lsrs	r3, r3, #4
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
       ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d047      	beq.n	80039f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	73fb      	strb	r3, [r7, #15]
 800396a:	e044      	b.n	80039f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b03      	cmp	r3, #3
 8003972:	d018      	beq.n	80039a6 <RCCEx_PLLSAI1_Config+0x86>
 8003974:	2b03      	cmp	r3, #3
 8003976:	d825      	bhi.n	80039c4 <RCCEx_PLLSAI1_Config+0xa4>
 8003978:	2b01      	cmp	r3, #1
 800397a:	d002      	beq.n	8003982 <RCCEx_PLLSAI1_Config+0x62>
 800397c:	2b02      	cmp	r3, #2
 800397e:	d009      	beq.n	8003994 <RCCEx_PLLSAI1_Config+0x74>
 8003980:	e020      	b.n	80039c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003982:	4b5f      	ldr	r3, [pc, #380]	; (8003b00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d11d      	bne.n	80039ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003992:	e01a      	b.n	80039ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003994:	4b5a      	ldr	r3, [pc, #360]	; (8003b00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399c:	2b00      	cmp	r3, #0
 800399e:	d116      	bne.n	80039ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a4:	e013      	b.n	80039ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039a6:	4b56      	ldr	r3, [pc, #344]	; (8003b00 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10f      	bne.n	80039d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039b2:	4b53      	ldr	r3, [pc, #332]	; (8003b00 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d109      	bne.n	80039d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039c2:	e006      	b.n	80039d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	73fb      	strb	r3, [r7, #15]
      break;
 80039c8:	e004      	b.n	80039d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039ca:	bf00      	nop
 80039cc:	e002      	b.n	80039d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039ce:	bf00      	nop
 80039d0:	e000      	b.n	80039d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10d      	bne.n	80039f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039da:	4b49      	ldr	r3, [pc, #292]	; (8003b00 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6819      	ldr	r1, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	430b      	orrs	r3, r1
 80039f0:	4943      	ldr	r1, [pc, #268]	; (8003b00 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d17c      	bne.n	8003af6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039fc:	4b40      	ldr	r3, [pc, #256]	; (8003b00 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a3f      	ldr	r2, [pc, #252]	; (8003b00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a08:	f7fe fb6a 	bl	80020e0 <HAL_GetTick>
 8003a0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a0e:	e009      	b.n	8003a24 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a10:	f7fe fb66 	bl	80020e0 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d902      	bls.n	8003a24 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	73fb      	strb	r3, [r7, #15]
        break;
 8003a22:	e005      	b.n	8003a30 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a24:	4b36      	ldr	r3, [pc, #216]	; (8003b00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1ef      	bne.n	8003a10 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d15f      	bne.n	8003af6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d110      	bne.n	8003a5e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a3c:	4b30      	ldr	r3, [pc, #192]	; (8003b00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003a44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6892      	ldr	r2, [r2, #8]
 8003a4c:	0211      	lsls	r1, r2, #8
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	68d2      	ldr	r2, [r2, #12]
 8003a52:	06d2      	lsls	r2, r2, #27
 8003a54:	430a      	orrs	r2, r1
 8003a56:	492a      	ldr	r1, [pc, #168]	; (8003b00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	610b      	str	r3, [r1, #16]
 8003a5c:	e027      	b.n	8003aae <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d112      	bne.n	8003a8a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a64:	4b26      	ldr	r3, [pc, #152]	; (8003b00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6892      	ldr	r2, [r2, #8]
 8003a74:	0211      	lsls	r1, r2, #8
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6912      	ldr	r2, [r2, #16]
 8003a7a:	0852      	lsrs	r2, r2, #1
 8003a7c:	3a01      	subs	r2, #1
 8003a7e:	0552      	lsls	r2, r2, #21
 8003a80:	430a      	orrs	r2, r1
 8003a82:	491f      	ldr	r1, [pc, #124]	; (8003b00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	610b      	str	r3, [r1, #16]
 8003a88:	e011      	b.n	8003aae <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a8a:	4b1d      	ldr	r3, [pc, #116]	; (8003b00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a92:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6892      	ldr	r2, [r2, #8]
 8003a9a:	0211      	lsls	r1, r2, #8
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6952      	ldr	r2, [r2, #20]
 8003aa0:	0852      	lsrs	r2, r2, #1
 8003aa2:	3a01      	subs	r2, #1
 8003aa4:	0652      	lsls	r2, r2, #25
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	4915      	ldr	r1, [pc, #84]	; (8003b00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003aae:	4b14      	ldr	r3, [pc, #80]	; (8003b00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a13      	ldr	r2, [pc, #76]	; (8003b00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ab8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aba:	f7fe fb11 	bl	80020e0 <HAL_GetTick>
 8003abe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ac0:	e009      	b.n	8003ad6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ac2:	f7fe fb0d 	bl	80020e0 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d902      	bls.n	8003ad6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	73fb      	strb	r3, [r7, #15]
          break;
 8003ad4:	e005      	b.n	8003ae2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ad6:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0ef      	beq.n	8003ac2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d106      	bne.n	8003af6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	4903      	ldr	r1, [pc, #12]	; (8003b00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40021000 	.word	0x40021000

08003b04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b12:	4b69      	ldr	r3, [pc, #420]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d018      	beq.n	8003b50 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b1e:	4b66      	ldr	r3, [pc, #408]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f003 0203 	and.w	r2, r3, #3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d10d      	bne.n	8003b4a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
       ||
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d009      	beq.n	8003b4a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b36:	4b60      	ldr	r3, [pc, #384]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	091b      	lsrs	r3, r3, #4
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
       ||
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d047      	beq.n	8003bda <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	73fb      	strb	r3, [r7, #15]
 8003b4e:	e044      	b.n	8003bda <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b03      	cmp	r3, #3
 8003b56:	d018      	beq.n	8003b8a <RCCEx_PLLSAI2_Config+0x86>
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d825      	bhi.n	8003ba8 <RCCEx_PLLSAI2_Config+0xa4>
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d002      	beq.n	8003b66 <RCCEx_PLLSAI2_Config+0x62>
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d009      	beq.n	8003b78 <RCCEx_PLLSAI2_Config+0x74>
 8003b64:	e020      	b.n	8003ba8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b66:	4b54      	ldr	r3, [pc, #336]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d11d      	bne.n	8003bae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b76:	e01a      	b.n	8003bae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b78:	4b4f      	ldr	r3, [pc, #316]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d116      	bne.n	8003bb2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b88:	e013      	b.n	8003bb2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b8a:	4b4b      	ldr	r3, [pc, #300]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10f      	bne.n	8003bb6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b96:	4b48      	ldr	r3, [pc, #288]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d109      	bne.n	8003bb6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ba6:	e006      	b.n	8003bb6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
      break;
 8003bac:	e004      	b.n	8003bb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bae:	bf00      	nop
 8003bb0:	e002      	b.n	8003bb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bb2:	bf00      	nop
 8003bb4:	e000      	b.n	8003bb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10d      	bne.n	8003bda <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bbe:	4b3e      	ldr	r3, [pc, #248]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6819      	ldr	r1, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	430b      	orrs	r3, r1
 8003bd4:	4938      	ldr	r1, [pc, #224]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d166      	bne.n	8003cae <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003be0:	4b35      	ldr	r3, [pc, #212]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a34      	ldr	r2, [pc, #208]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bec:	f7fe fa78 	bl	80020e0 <HAL_GetTick>
 8003bf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bf2:	e009      	b.n	8003c08 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bf4:	f7fe fa74 	bl	80020e0 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d902      	bls.n	8003c08 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	73fb      	strb	r3, [r7, #15]
        break;
 8003c06:	e005      	b.n	8003c14 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c08:	4b2b      	ldr	r3, [pc, #172]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1ef      	bne.n	8003bf4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d149      	bne.n	8003cae <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d110      	bne.n	8003c42 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c20:	4b25      	ldr	r3, [pc, #148]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003c28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6892      	ldr	r2, [r2, #8]
 8003c30:	0211      	lsls	r1, r2, #8
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68d2      	ldr	r2, [r2, #12]
 8003c36:	06d2      	lsls	r2, r2, #27
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	491f      	ldr	r1, [pc, #124]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	614b      	str	r3, [r1, #20]
 8003c40:	e011      	b.n	8003c66 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c42:	4b1d      	ldr	r3, [pc, #116]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c4a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6892      	ldr	r2, [r2, #8]
 8003c52:	0211      	lsls	r1, r2, #8
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6912      	ldr	r2, [r2, #16]
 8003c58:	0852      	lsrs	r2, r2, #1
 8003c5a:	3a01      	subs	r2, #1
 8003c5c:	0652      	lsls	r2, r2, #25
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	4915      	ldr	r1, [pc, #84]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c66:	4b14      	ldr	r3, [pc, #80]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a13      	ldr	r2, [pc, #76]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c70:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c72:	f7fe fa35 	bl	80020e0 <HAL_GetTick>
 8003c76:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c78:	e009      	b.n	8003c8e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c7a:	f7fe fa31 	bl	80020e0 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d902      	bls.n	8003c8e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	73fb      	strb	r3, [r7, #15]
          break;
 8003c8c:	e005      	b.n	8003c9a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c8e:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0ef      	beq.n	8003c7a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d106      	bne.n	8003cae <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	4903      	ldr	r1, [pc, #12]	; (8003cb8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40021000 	.word	0x40021000

08003cbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e040      	b.n	8003d50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fe f87a 	bl	8001dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2224      	movs	r2, #36	; 0x24
 8003ce8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0201 	bic.w	r2, r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f8c0 	bl	8003e80 <UART_SetConfig>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e022      	b.n	8003d50 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fb3e 	bl	8004394 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 fbc5 	bl	80044d8 <UART_CheckIdleState>
 8003d4e:	4603      	mov	r3, r0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08a      	sub	sp, #40	; 0x28
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	4613      	mov	r3, r2
 8003d66:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d6c:	2b20      	cmp	r3, #32
 8003d6e:	f040 8082 	bne.w	8003e76 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <HAL_UART_Transmit+0x26>
 8003d78:	88fb      	ldrh	r3, [r7, #6]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e07a      	b.n	8003e78 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_UART_Transmit+0x38>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e073      	b.n	8003e78 <HAL_UART_Transmit+0x120>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2221      	movs	r2, #33	; 0x21
 8003da4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003da6:	f7fe f99b 	bl	80020e0 <HAL_GetTick>
 8003daa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	88fa      	ldrh	r2, [r7, #6]
 8003db0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	88fa      	ldrh	r2, [r7, #6]
 8003db8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc4:	d108      	bne.n	8003dd8 <HAL_UART_Transmit+0x80>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d104      	bne.n	8003dd8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	e003      	b.n	8003de0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003de8:	e02d      	b.n	8003e46 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2200      	movs	r2, #0
 8003df2:	2180      	movs	r1, #128	; 0x80
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fbb8 	bl	800456a <UART_WaitOnFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e039      	b.n	8003e78 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10b      	bne.n	8003e22 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	881a      	ldrh	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e16:	b292      	uxth	r2, r2
 8003e18:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	3302      	adds	r3, #2
 8003e1e:	61bb      	str	r3, [r7, #24]
 8003e20:	e008      	b.n	8003e34 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	781a      	ldrb	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	b292      	uxth	r2, r2
 8003e2c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3301      	adds	r3, #1
 8003e32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1cb      	bne.n	8003dea <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2140      	movs	r1, #64	; 0x40
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 fb84 	bl	800456a <UART_WaitOnFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e005      	b.n	8003e78 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	e000      	b.n	8003e78 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003e76:	2302      	movs	r3, #2
  }
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3720      	adds	r7, #32
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e80:	b5b0      	push	{r4, r5, r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	4bad      	ldr	r3, [pc, #692]	; (8004160 <UART_SetConfig+0x2e0>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	69f9      	ldr	r1, [r7, #28]
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4aa2      	ldr	r2, [pc, #648]	; (8004164 <UART_SetConfig+0x2e4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d004      	beq.n	8003ee8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	69fa      	ldr	r2, [r7, #28]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a99      	ldr	r2, [pc, #612]	; (8004168 <UART_SetConfig+0x2e8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d121      	bne.n	8003f4a <UART_SetConfig+0xca>
 8003f06:	4b99      	ldr	r3, [pc, #612]	; (800416c <UART_SetConfig+0x2ec>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d817      	bhi.n	8003f44 <UART_SetConfig+0xc4>
 8003f14:	a201      	add	r2, pc, #4	; (adr r2, 8003f1c <UART_SetConfig+0x9c>)
 8003f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1a:	bf00      	nop
 8003f1c:	08003f2d 	.word	0x08003f2d
 8003f20:	08003f39 	.word	0x08003f39
 8003f24:	08003f33 	.word	0x08003f33
 8003f28:	08003f3f 	.word	0x08003f3f
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	76fb      	strb	r3, [r7, #27]
 8003f30:	e0e7      	b.n	8004102 <UART_SetConfig+0x282>
 8003f32:	2302      	movs	r3, #2
 8003f34:	76fb      	strb	r3, [r7, #27]
 8003f36:	e0e4      	b.n	8004102 <UART_SetConfig+0x282>
 8003f38:	2304      	movs	r3, #4
 8003f3a:	76fb      	strb	r3, [r7, #27]
 8003f3c:	e0e1      	b.n	8004102 <UART_SetConfig+0x282>
 8003f3e:	2308      	movs	r3, #8
 8003f40:	76fb      	strb	r3, [r7, #27]
 8003f42:	e0de      	b.n	8004102 <UART_SetConfig+0x282>
 8003f44:	2310      	movs	r3, #16
 8003f46:	76fb      	strb	r3, [r7, #27]
 8003f48:	e0db      	b.n	8004102 <UART_SetConfig+0x282>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a88      	ldr	r2, [pc, #544]	; (8004170 <UART_SetConfig+0x2f0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d132      	bne.n	8003fba <UART_SetConfig+0x13a>
 8003f54:	4b85      	ldr	r3, [pc, #532]	; (800416c <UART_SetConfig+0x2ec>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5a:	f003 030c 	and.w	r3, r3, #12
 8003f5e:	2b0c      	cmp	r3, #12
 8003f60:	d828      	bhi.n	8003fb4 <UART_SetConfig+0x134>
 8003f62:	a201      	add	r2, pc, #4	; (adr r2, 8003f68 <UART_SetConfig+0xe8>)
 8003f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f68:	08003f9d 	.word	0x08003f9d
 8003f6c:	08003fb5 	.word	0x08003fb5
 8003f70:	08003fb5 	.word	0x08003fb5
 8003f74:	08003fb5 	.word	0x08003fb5
 8003f78:	08003fa9 	.word	0x08003fa9
 8003f7c:	08003fb5 	.word	0x08003fb5
 8003f80:	08003fb5 	.word	0x08003fb5
 8003f84:	08003fb5 	.word	0x08003fb5
 8003f88:	08003fa3 	.word	0x08003fa3
 8003f8c:	08003fb5 	.word	0x08003fb5
 8003f90:	08003fb5 	.word	0x08003fb5
 8003f94:	08003fb5 	.word	0x08003fb5
 8003f98:	08003faf 	.word	0x08003faf
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	76fb      	strb	r3, [r7, #27]
 8003fa0:	e0af      	b.n	8004102 <UART_SetConfig+0x282>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	76fb      	strb	r3, [r7, #27]
 8003fa6:	e0ac      	b.n	8004102 <UART_SetConfig+0x282>
 8003fa8:	2304      	movs	r3, #4
 8003faa:	76fb      	strb	r3, [r7, #27]
 8003fac:	e0a9      	b.n	8004102 <UART_SetConfig+0x282>
 8003fae:	2308      	movs	r3, #8
 8003fb0:	76fb      	strb	r3, [r7, #27]
 8003fb2:	e0a6      	b.n	8004102 <UART_SetConfig+0x282>
 8003fb4:	2310      	movs	r3, #16
 8003fb6:	76fb      	strb	r3, [r7, #27]
 8003fb8:	e0a3      	b.n	8004102 <UART_SetConfig+0x282>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a6d      	ldr	r2, [pc, #436]	; (8004174 <UART_SetConfig+0x2f4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d120      	bne.n	8004006 <UART_SetConfig+0x186>
 8003fc4:	4b69      	ldr	r3, [pc, #420]	; (800416c <UART_SetConfig+0x2ec>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003fce:	2b30      	cmp	r3, #48	; 0x30
 8003fd0:	d013      	beq.n	8003ffa <UART_SetConfig+0x17a>
 8003fd2:	2b30      	cmp	r3, #48	; 0x30
 8003fd4:	d814      	bhi.n	8004000 <UART_SetConfig+0x180>
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	d009      	beq.n	8003fee <UART_SetConfig+0x16e>
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	d810      	bhi.n	8004000 <UART_SetConfig+0x180>
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <UART_SetConfig+0x168>
 8003fe2:	2b10      	cmp	r3, #16
 8003fe4:	d006      	beq.n	8003ff4 <UART_SetConfig+0x174>
 8003fe6:	e00b      	b.n	8004000 <UART_SetConfig+0x180>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	76fb      	strb	r3, [r7, #27]
 8003fec:	e089      	b.n	8004102 <UART_SetConfig+0x282>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	76fb      	strb	r3, [r7, #27]
 8003ff2:	e086      	b.n	8004102 <UART_SetConfig+0x282>
 8003ff4:	2304      	movs	r3, #4
 8003ff6:	76fb      	strb	r3, [r7, #27]
 8003ff8:	e083      	b.n	8004102 <UART_SetConfig+0x282>
 8003ffa:	2308      	movs	r3, #8
 8003ffc:	76fb      	strb	r3, [r7, #27]
 8003ffe:	e080      	b.n	8004102 <UART_SetConfig+0x282>
 8004000:	2310      	movs	r3, #16
 8004002:	76fb      	strb	r3, [r7, #27]
 8004004:	e07d      	b.n	8004102 <UART_SetConfig+0x282>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a5b      	ldr	r2, [pc, #364]	; (8004178 <UART_SetConfig+0x2f8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d120      	bne.n	8004052 <UART_SetConfig+0x1d2>
 8004010:	4b56      	ldr	r3, [pc, #344]	; (800416c <UART_SetConfig+0x2ec>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004016:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800401a:	2bc0      	cmp	r3, #192	; 0xc0
 800401c:	d013      	beq.n	8004046 <UART_SetConfig+0x1c6>
 800401e:	2bc0      	cmp	r3, #192	; 0xc0
 8004020:	d814      	bhi.n	800404c <UART_SetConfig+0x1cc>
 8004022:	2b80      	cmp	r3, #128	; 0x80
 8004024:	d009      	beq.n	800403a <UART_SetConfig+0x1ba>
 8004026:	2b80      	cmp	r3, #128	; 0x80
 8004028:	d810      	bhi.n	800404c <UART_SetConfig+0x1cc>
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <UART_SetConfig+0x1b4>
 800402e:	2b40      	cmp	r3, #64	; 0x40
 8004030:	d006      	beq.n	8004040 <UART_SetConfig+0x1c0>
 8004032:	e00b      	b.n	800404c <UART_SetConfig+0x1cc>
 8004034:	2300      	movs	r3, #0
 8004036:	76fb      	strb	r3, [r7, #27]
 8004038:	e063      	b.n	8004102 <UART_SetConfig+0x282>
 800403a:	2302      	movs	r3, #2
 800403c:	76fb      	strb	r3, [r7, #27]
 800403e:	e060      	b.n	8004102 <UART_SetConfig+0x282>
 8004040:	2304      	movs	r3, #4
 8004042:	76fb      	strb	r3, [r7, #27]
 8004044:	e05d      	b.n	8004102 <UART_SetConfig+0x282>
 8004046:	2308      	movs	r3, #8
 8004048:	76fb      	strb	r3, [r7, #27]
 800404a:	e05a      	b.n	8004102 <UART_SetConfig+0x282>
 800404c:	2310      	movs	r3, #16
 800404e:	76fb      	strb	r3, [r7, #27]
 8004050:	e057      	b.n	8004102 <UART_SetConfig+0x282>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a49      	ldr	r2, [pc, #292]	; (800417c <UART_SetConfig+0x2fc>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d125      	bne.n	80040a8 <UART_SetConfig+0x228>
 800405c:	4b43      	ldr	r3, [pc, #268]	; (800416c <UART_SetConfig+0x2ec>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004066:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800406a:	d017      	beq.n	800409c <UART_SetConfig+0x21c>
 800406c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004070:	d817      	bhi.n	80040a2 <UART_SetConfig+0x222>
 8004072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004076:	d00b      	beq.n	8004090 <UART_SetConfig+0x210>
 8004078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800407c:	d811      	bhi.n	80040a2 <UART_SetConfig+0x222>
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <UART_SetConfig+0x20a>
 8004082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004086:	d006      	beq.n	8004096 <UART_SetConfig+0x216>
 8004088:	e00b      	b.n	80040a2 <UART_SetConfig+0x222>
 800408a:	2300      	movs	r3, #0
 800408c:	76fb      	strb	r3, [r7, #27]
 800408e:	e038      	b.n	8004102 <UART_SetConfig+0x282>
 8004090:	2302      	movs	r3, #2
 8004092:	76fb      	strb	r3, [r7, #27]
 8004094:	e035      	b.n	8004102 <UART_SetConfig+0x282>
 8004096:	2304      	movs	r3, #4
 8004098:	76fb      	strb	r3, [r7, #27]
 800409a:	e032      	b.n	8004102 <UART_SetConfig+0x282>
 800409c:	2308      	movs	r3, #8
 800409e:	76fb      	strb	r3, [r7, #27]
 80040a0:	e02f      	b.n	8004102 <UART_SetConfig+0x282>
 80040a2:	2310      	movs	r3, #16
 80040a4:	76fb      	strb	r3, [r7, #27]
 80040a6:	e02c      	b.n	8004102 <UART_SetConfig+0x282>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a2d      	ldr	r2, [pc, #180]	; (8004164 <UART_SetConfig+0x2e4>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d125      	bne.n	80040fe <UART_SetConfig+0x27e>
 80040b2:	4b2e      	ldr	r3, [pc, #184]	; (800416c <UART_SetConfig+0x2ec>)
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040c0:	d017      	beq.n	80040f2 <UART_SetConfig+0x272>
 80040c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040c6:	d817      	bhi.n	80040f8 <UART_SetConfig+0x278>
 80040c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040cc:	d00b      	beq.n	80040e6 <UART_SetConfig+0x266>
 80040ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d2:	d811      	bhi.n	80040f8 <UART_SetConfig+0x278>
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <UART_SetConfig+0x260>
 80040d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040dc:	d006      	beq.n	80040ec <UART_SetConfig+0x26c>
 80040de:	e00b      	b.n	80040f8 <UART_SetConfig+0x278>
 80040e0:	2300      	movs	r3, #0
 80040e2:	76fb      	strb	r3, [r7, #27]
 80040e4:	e00d      	b.n	8004102 <UART_SetConfig+0x282>
 80040e6:	2302      	movs	r3, #2
 80040e8:	76fb      	strb	r3, [r7, #27]
 80040ea:	e00a      	b.n	8004102 <UART_SetConfig+0x282>
 80040ec:	2304      	movs	r3, #4
 80040ee:	76fb      	strb	r3, [r7, #27]
 80040f0:	e007      	b.n	8004102 <UART_SetConfig+0x282>
 80040f2:	2308      	movs	r3, #8
 80040f4:	76fb      	strb	r3, [r7, #27]
 80040f6:	e004      	b.n	8004102 <UART_SetConfig+0x282>
 80040f8:	2310      	movs	r3, #16
 80040fa:	76fb      	strb	r3, [r7, #27]
 80040fc:	e001      	b.n	8004102 <UART_SetConfig+0x282>
 80040fe:	2310      	movs	r3, #16
 8004100:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a17      	ldr	r2, [pc, #92]	; (8004164 <UART_SetConfig+0x2e4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	f040 8087 	bne.w	800421c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800410e:	7efb      	ldrb	r3, [r7, #27]
 8004110:	2b08      	cmp	r3, #8
 8004112:	d837      	bhi.n	8004184 <UART_SetConfig+0x304>
 8004114:	a201      	add	r2, pc, #4	; (adr r2, 800411c <UART_SetConfig+0x29c>)
 8004116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411a:	bf00      	nop
 800411c:	08004141 	.word	0x08004141
 8004120:	08004185 	.word	0x08004185
 8004124:	08004149 	.word	0x08004149
 8004128:	08004185 	.word	0x08004185
 800412c:	0800414f 	.word	0x0800414f
 8004130:	08004185 	.word	0x08004185
 8004134:	08004185 	.word	0x08004185
 8004138:	08004185 	.word	0x08004185
 800413c:	08004157 	.word	0x08004157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004140:	f7ff f866 	bl	8003210 <HAL_RCC_GetPCLK1Freq>
 8004144:	6178      	str	r0, [r7, #20]
        break;
 8004146:	e022      	b.n	800418e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004148:	4b0d      	ldr	r3, [pc, #52]	; (8004180 <UART_SetConfig+0x300>)
 800414a:	617b      	str	r3, [r7, #20]
        break;
 800414c:	e01f      	b.n	800418e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800414e:	f7fe ffc7 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 8004152:	6178      	str	r0, [r7, #20]
        break;
 8004154:	e01b      	b.n	800418e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800415a:	617b      	str	r3, [r7, #20]
        break;
 800415c:	e017      	b.n	800418e <UART_SetConfig+0x30e>
 800415e:	bf00      	nop
 8004160:	efff69f3 	.word	0xefff69f3
 8004164:	40008000 	.word	0x40008000
 8004168:	40013800 	.word	0x40013800
 800416c:	40021000 	.word	0x40021000
 8004170:	40004400 	.word	0x40004400
 8004174:	40004800 	.word	0x40004800
 8004178:	40004c00 	.word	0x40004c00
 800417c:	40005000 	.word	0x40005000
 8004180:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	76bb      	strb	r3, [r7, #26]
        break;
 800418c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 80f1 	beq.w	8004378 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	4613      	mov	r3, r2
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	4413      	add	r3, r2
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d305      	bcc.n	80041b2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d902      	bls.n	80041b8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	76bb      	strb	r3, [r7, #26]
 80041b6:	e0df      	b.n	8004378 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f04f 0100 	mov.w	r1, #0
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	020b      	lsls	r3, r1, #8
 80041ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80041ce:	0202      	lsls	r2, r0, #8
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	6849      	ldr	r1, [r1, #4]
 80041d4:	0849      	lsrs	r1, r1, #1
 80041d6:	4608      	mov	r0, r1
 80041d8:	f04f 0100 	mov.w	r1, #0
 80041dc:	1814      	adds	r4, r2, r0
 80041de:	eb43 0501 	adc.w	r5, r3, r1
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	461a      	mov	r2, r3
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	4620      	mov	r0, r4
 80041ee:	4629      	mov	r1, r5
 80041f0:	f7fc f84e 	bl	8000290 <__aeabi_uldivmod>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4613      	mov	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004202:	d308      	bcc.n	8004216 <UART_SetConfig+0x396>
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800420a:	d204      	bcs.n	8004216 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	60da      	str	r2, [r3, #12]
 8004214:	e0b0      	b.n	8004378 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	76bb      	strb	r3, [r7, #26]
 800421a:	e0ad      	b.n	8004378 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004224:	d15c      	bne.n	80042e0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004226:	7efb      	ldrb	r3, [r7, #27]
 8004228:	2b08      	cmp	r3, #8
 800422a:	d828      	bhi.n	800427e <UART_SetConfig+0x3fe>
 800422c:	a201      	add	r2, pc, #4	; (adr r2, 8004234 <UART_SetConfig+0x3b4>)
 800422e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004232:	bf00      	nop
 8004234:	08004259 	.word	0x08004259
 8004238:	08004261 	.word	0x08004261
 800423c:	08004269 	.word	0x08004269
 8004240:	0800427f 	.word	0x0800427f
 8004244:	0800426f 	.word	0x0800426f
 8004248:	0800427f 	.word	0x0800427f
 800424c:	0800427f 	.word	0x0800427f
 8004250:	0800427f 	.word	0x0800427f
 8004254:	08004277 	.word	0x08004277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004258:	f7fe ffda 	bl	8003210 <HAL_RCC_GetPCLK1Freq>
 800425c:	6178      	str	r0, [r7, #20]
        break;
 800425e:	e013      	b.n	8004288 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004260:	f7fe ffec 	bl	800323c <HAL_RCC_GetPCLK2Freq>
 8004264:	6178      	str	r0, [r7, #20]
        break;
 8004266:	e00f      	b.n	8004288 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004268:	4b49      	ldr	r3, [pc, #292]	; (8004390 <UART_SetConfig+0x510>)
 800426a:	617b      	str	r3, [r7, #20]
        break;
 800426c:	e00c      	b.n	8004288 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800426e:	f7fe ff37 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 8004272:	6178      	str	r0, [r7, #20]
        break;
 8004274:	e008      	b.n	8004288 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800427a:	617b      	str	r3, [r7, #20]
        break;
 800427c:	e004      	b.n	8004288 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	76bb      	strb	r3, [r7, #26]
        break;
 8004286:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d074      	beq.n	8004378 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	005a      	lsls	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	085b      	lsrs	r3, r3, #1
 8004298:	441a      	add	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	2b0f      	cmp	r3, #15
 80042aa:	d916      	bls.n	80042da <UART_SetConfig+0x45a>
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b2:	d212      	bcs.n	80042da <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	f023 030f 	bic.w	r3, r3, #15
 80042bc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	085b      	lsrs	r3, r3, #1
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	89fb      	ldrh	r3, [r7, #14]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	89fa      	ldrh	r2, [r7, #14]
 80042d6:	60da      	str	r2, [r3, #12]
 80042d8:	e04e      	b.n	8004378 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	76bb      	strb	r3, [r7, #26]
 80042de:	e04b      	b.n	8004378 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042e0:	7efb      	ldrb	r3, [r7, #27]
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d827      	bhi.n	8004336 <UART_SetConfig+0x4b6>
 80042e6:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <UART_SetConfig+0x46c>)
 80042e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ec:	08004311 	.word	0x08004311
 80042f0:	08004319 	.word	0x08004319
 80042f4:	08004321 	.word	0x08004321
 80042f8:	08004337 	.word	0x08004337
 80042fc:	08004327 	.word	0x08004327
 8004300:	08004337 	.word	0x08004337
 8004304:	08004337 	.word	0x08004337
 8004308:	08004337 	.word	0x08004337
 800430c:	0800432f 	.word	0x0800432f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004310:	f7fe ff7e 	bl	8003210 <HAL_RCC_GetPCLK1Freq>
 8004314:	6178      	str	r0, [r7, #20]
        break;
 8004316:	e013      	b.n	8004340 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004318:	f7fe ff90 	bl	800323c <HAL_RCC_GetPCLK2Freq>
 800431c:	6178      	str	r0, [r7, #20]
        break;
 800431e:	e00f      	b.n	8004340 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004320:	4b1b      	ldr	r3, [pc, #108]	; (8004390 <UART_SetConfig+0x510>)
 8004322:	617b      	str	r3, [r7, #20]
        break;
 8004324:	e00c      	b.n	8004340 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004326:	f7fe fedb 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 800432a:	6178      	str	r0, [r7, #20]
        break;
 800432c:	e008      	b.n	8004340 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800432e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004332:	617b      	str	r3, [r7, #20]
        break;
 8004334:	e004      	b.n	8004340 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	76bb      	strb	r3, [r7, #26]
        break;
 800433e:	bf00      	nop
    }

    if (pclk != 0U)
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d018      	beq.n	8004378 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	085a      	lsrs	r2, r3, #1
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	441a      	add	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	b29b      	uxth	r3, r3
 800435a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2b0f      	cmp	r3, #15
 8004360:	d908      	bls.n	8004374 <UART_SetConfig+0x4f4>
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004368:	d204      	bcs.n	8004374 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	60da      	str	r2, [r3, #12]
 8004372:	e001      	b.n	8004378 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004384:	7ebb      	ldrb	r3, [r7, #26]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3720      	adds	r7, #32
 800438a:	46bd      	mov	sp, r7
 800438c:	bdb0      	pop	{r4, r5, r7, pc}
 800438e:	bf00      	nop
 8004390:	00f42400 	.word	0x00f42400

08004394 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00a      	beq.n	80043be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00a      	beq.n	8004402 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	f003 0310 	and.w	r3, r3, #16
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01a      	beq.n	80044aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004492:	d10a      	bne.n	80044aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	605a      	str	r2, [r3, #4]
  }
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af02      	add	r7, sp, #8
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044e8:	f7fd fdfa 	bl	80020e0 <HAL_GetTick>
 80044ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0308 	and.w	r3, r3, #8
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d10e      	bne.n	800451a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f82d 	bl	800456a <UART_WaitOnFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e023      	b.n	8004562 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b04      	cmp	r3, #4
 8004526:	d10e      	bne.n	8004546 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004528:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f817 	bl	800456a <UART_WaitOnFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e00d      	b.n	8004562 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2220      	movs	r2, #32
 800454a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	603b      	str	r3, [r7, #0]
 8004576:	4613      	mov	r3, r2
 8004578:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800457a:	e05e      	b.n	800463a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004582:	d05a      	beq.n	800463a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004584:	f7fd fdac 	bl	80020e0 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	429a      	cmp	r2, r3
 8004592:	d302      	bcc.n	800459a <UART_WaitOnFlagUntilTimeout+0x30>
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d11b      	bne.n	80045d2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045a8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0201 	bic.w	r2, r2, #1
 80045b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2220      	movs	r2, #32
 80045be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e043      	b.n	800465a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d02c      	beq.n	800463a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ee:	d124      	bne.n	800463a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045f8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004608:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0201 	bic.w	r2, r2, #1
 8004618:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2220      	movs	r2, #32
 800461e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2220      	movs	r2, #32
 800462a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e00f      	b.n	800465a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69da      	ldr	r2, [r3, #28]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4013      	ands	r3, r2
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	429a      	cmp	r2, r3
 8004648:	bf0c      	ite	eq
 800464a:	2301      	moveq	r3, #1
 800464c:	2300      	movne	r3, #0
 800464e:	b2db      	uxtb	r3, r3
 8004650:	461a      	mov	r2, r3
 8004652:	79fb      	ldrb	r3, [r7, #7]
 8004654:	429a      	cmp	r2, r3
 8004656:	d091      	beq.n	800457c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <__errno>:
 8004664:	4b01      	ldr	r3, [pc, #4]	; (800466c <__errno+0x8>)
 8004666:	6818      	ldr	r0, [r3, #0]
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	2000000c 	.word	0x2000000c

08004670 <__libc_init_array>:
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	4d0d      	ldr	r5, [pc, #52]	; (80046a8 <__libc_init_array+0x38>)
 8004674:	4c0d      	ldr	r4, [pc, #52]	; (80046ac <__libc_init_array+0x3c>)
 8004676:	1b64      	subs	r4, r4, r5
 8004678:	10a4      	asrs	r4, r4, #2
 800467a:	2600      	movs	r6, #0
 800467c:	42a6      	cmp	r6, r4
 800467e:	d109      	bne.n	8004694 <__libc_init_array+0x24>
 8004680:	4d0b      	ldr	r5, [pc, #44]	; (80046b0 <__libc_init_array+0x40>)
 8004682:	4c0c      	ldr	r4, [pc, #48]	; (80046b4 <__libc_init_array+0x44>)
 8004684:	f000 fc4e 	bl	8004f24 <_init>
 8004688:	1b64      	subs	r4, r4, r5
 800468a:	10a4      	asrs	r4, r4, #2
 800468c:	2600      	movs	r6, #0
 800468e:	42a6      	cmp	r6, r4
 8004690:	d105      	bne.n	800469e <__libc_init_array+0x2e>
 8004692:	bd70      	pop	{r4, r5, r6, pc}
 8004694:	f855 3b04 	ldr.w	r3, [r5], #4
 8004698:	4798      	blx	r3
 800469a:	3601      	adds	r6, #1
 800469c:	e7ee      	b.n	800467c <__libc_init_array+0xc>
 800469e:	f855 3b04 	ldr.w	r3, [r5], #4
 80046a2:	4798      	blx	r3
 80046a4:	3601      	adds	r6, #1
 80046a6:	e7f2      	b.n	800468e <__libc_init_array+0x1e>
 80046a8:	080059ac 	.word	0x080059ac
 80046ac:	080059ac 	.word	0x080059ac
 80046b0:	080059ac 	.word	0x080059ac
 80046b4:	080059b0 	.word	0x080059b0

080046b8 <memcpy>:
 80046b8:	440a      	add	r2, r1
 80046ba:	4291      	cmp	r1, r2
 80046bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80046c0:	d100      	bne.n	80046c4 <memcpy+0xc>
 80046c2:	4770      	bx	lr
 80046c4:	b510      	push	{r4, lr}
 80046c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046ce:	4291      	cmp	r1, r2
 80046d0:	d1f9      	bne.n	80046c6 <memcpy+0xe>
 80046d2:	bd10      	pop	{r4, pc}

080046d4 <memset>:
 80046d4:	4402      	add	r2, r0
 80046d6:	4603      	mov	r3, r0
 80046d8:	4293      	cmp	r3, r2
 80046da:	d100      	bne.n	80046de <memset+0xa>
 80046dc:	4770      	bx	lr
 80046de:	f803 1b01 	strb.w	r1, [r3], #1
 80046e2:	e7f9      	b.n	80046d8 <memset+0x4>

080046e4 <siprintf>:
 80046e4:	b40e      	push	{r1, r2, r3}
 80046e6:	b500      	push	{lr}
 80046e8:	b09c      	sub	sp, #112	; 0x70
 80046ea:	ab1d      	add	r3, sp, #116	; 0x74
 80046ec:	9002      	str	r0, [sp, #8]
 80046ee:	9006      	str	r0, [sp, #24]
 80046f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046f4:	4809      	ldr	r0, [pc, #36]	; (800471c <siprintf+0x38>)
 80046f6:	9107      	str	r1, [sp, #28]
 80046f8:	9104      	str	r1, [sp, #16]
 80046fa:	4909      	ldr	r1, [pc, #36]	; (8004720 <siprintf+0x3c>)
 80046fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004700:	9105      	str	r1, [sp, #20]
 8004702:	6800      	ldr	r0, [r0, #0]
 8004704:	9301      	str	r3, [sp, #4]
 8004706:	a902      	add	r1, sp, #8
 8004708:	f000 f8c4 	bl	8004894 <_svfiprintf_r>
 800470c:	9b02      	ldr	r3, [sp, #8]
 800470e:	2200      	movs	r2, #0
 8004710:	701a      	strb	r2, [r3, #0]
 8004712:	b01c      	add	sp, #112	; 0x70
 8004714:	f85d eb04 	ldr.w	lr, [sp], #4
 8004718:	b003      	add	sp, #12
 800471a:	4770      	bx	lr
 800471c:	2000000c 	.word	0x2000000c
 8004720:	ffff0208 	.word	0xffff0208

08004724 <__retarget_lock_acquire_recursive>:
 8004724:	4770      	bx	lr

08004726 <__retarget_lock_release_recursive>:
 8004726:	4770      	bx	lr

08004728 <_malloc_r>:
 8004728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472a:	1ccd      	adds	r5, r1, #3
 800472c:	f025 0503 	bic.w	r5, r5, #3
 8004730:	3508      	adds	r5, #8
 8004732:	2d0c      	cmp	r5, #12
 8004734:	bf38      	it	cc
 8004736:	250c      	movcc	r5, #12
 8004738:	2d00      	cmp	r5, #0
 800473a:	4606      	mov	r6, r0
 800473c:	db01      	blt.n	8004742 <_malloc_r+0x1a>
 800473e:	42a9      	cmp	r1, r5
 8004740:	d903      	bls.n	800474a <_malloc_r+0x22>
 8004742:	230c      	movs	r3, #12
 8004744:	6033      	str	r3, [r6, #0]
 8004746:	2000      	movs	r0, #0
 8004748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800474a:	f000 fb61 	bl	8004e10 <__malloc_lock>
 800474e:	4921      	ldr	r1, [pc, #132]	; (80047d4 <_malloc_r+0xac>)
 8004750:	680a      	ldr	r2, [r1, #0]
 8004752:	4614      	mov	r4, r2
 8004754:	b99c      	cbnz	r4, 800477e <_malloc_r+0x56>
 8004756:	4f20      	ldr	r7, [pc, #128]	; (80047d8 <_malloc_r+0xb0>)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	b923      	cbnz	r3, 8004766 <_malloc_r+0x3e>
 800475c:	4621      	mov	r1, r4
 800475e:	4630      	mov	r0, r6
 8004760:	f000 fb2c 	bl	8004dbc <_sbrk_r>
 8004764:	6038      	str	r0, [r7, #0]
 8004766:	4629      	mov	r1, r5
 8004768:	4630      	mov	r0, r6
 800476a:	f000 fb27 	bl	8004dbc <_sbrk_r>
 800476e:	1c43      	adds	r3, r0, #1
 8004770:	d123      	bne.n	80047ba <_malloc_r+0x92>
 8004772:	230c      	movs	r3, #12
 8004774:	6033      	str	r3, [r6, #0]
 8004776:	4630      	mov	r0, r6
 8004778:	f000 fb50 	bl	8004e1c <__malloc_unlock>
 800477c:	e7e3      	b.n	8004746 <_malloc_r+0x1e>
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	1b5b      	subs	r3, r3, r5
 8004782:	d417      	bmi.n	80047b4 <_malloc_r+0x8c>
 8004784:	2b0b      	cmp	r3, #11
 8004786:	d903      	bls.n	8004790 <_malloc_r+0x68>
 8004788:	6023      	str	r3, [r4, #0]
 800478a:	441c      	add	r4, r3
 800478c:	6025      	str	r5, [r4, #0]
 800478e:	e004      	b.n	800479a <_malloc_r+0x72>
 8004790:	6863      	ldr	r3, [r4, #4]
 8004792:	42a2      	cmp	r2, r4
 8004794:	bf0c      	ite	eq
 8004796:	600b      	streq	r3, [r1, #0]
 8004798:	6053      	strne	r3, [r2, #4]
 800479a:	4630      	mov	r0, r6
 800479c:	f000 fb3e 	bl	8004e1c <__malloc_unlock>
 80047a0:	f104 000b 	add.w	r0, r4, #11
 80047a4:	1d23      	adds	r3, r4, #4
 80047a6:	f020 0007 	bic.w	r0, r0, #7
 80047aa:	1ac2      	subs	r2, r0, r3
 80047ac:	d0cc      	beq.n	8004748 <_malloc_r+0x20>
 80047ae:	1a1b      	subs	r3, r3, r0
 80047b0:	50a3      	str	r3, [r4, r2]
 80047b2:	e7c9      	b.n	8004748 <_malloc_r+0x20>
 80047b4:	4622      	mov	r2, r4
 80047b6:	6864      	ldr	r4, [r4, #4]
 80047b8:	e7cc      	b.n	8004754 <_malloc_r+0x2c>
 80047ba:	1cc4      	adds	r4, r0, #3
 80047bc:	f024 0403 	bic.w	r4, r4, #3
 80047c0:	42a0      	cmp	r0, r4
 80047c2:	d0e3      	beq.n	800478c <_malloc_r+0x64>
 80047c4:	1a21      	subs	r1, r4, r0
 80047c6:	4630      	mov	r0, r6
 80047c8:	f000 faf8 	bl	8004dbc <_sbrk_r>
 80047cc:	3001      	adds	r0, #1
 80047ce:	d1dd      	bne.n	800478c <_malloc_r+0x64>
 80047d0:	e7cf      	b.n	8004772 <_malloc_r+0x4a>
 80047d2:	bf00      	nop
 80047d4:	20000090 	.word	0x20000090
 80047d8:	20000094 	.word	0x20000094

080047dc <__ssputs_r>:
 80047dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e0:	688e      	ldr	r6, [r1, #8]
 80047e2:	429e      	cmp	r6, r3
 80047e4:	4682      	mov	sl, r0
 80047e6:	460c      	mov	r4, r1
 80047e8:	4690      	mov	r8, r2
 80047ea:	461f      	mov	r7, r3
 80047ec:	d838      	bhi.n	8004860 <__ssputs_r+0x84>
 80047ee:	898a      	ldrh	r2, [r1, #12]
 80047f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047f4:	d032      	beq.n	800485c <__ssputs_r+0x80>
 80047f6:	6825      	ldr	r5, [r4, #0]
 80047f8:	6909      	ldr	r1, [r1, #16]
 80047fa:	eba5 0901 	sub.w	r9, r5, r1
 80047fe:	6965      	ldr	r5, [r4, #20]
 8004800:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004804:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004808:	3301      	adds	r3, #1
 800480a:	444b      	add	r3, r9
 800480c:	106d      	asrs	r5, r5, #1
 800480e:	429d      	cmp	r5, r3
 8004810:	bf38      	it	cc
 8004812:	461d      	movcc	r5, r3
 8004814:	0553      	lsls	r3, r2, #21
 8004816:	d531      	bpl.n	800487c <__ssputs_r+0xa0>
 8004818:	4629      	mov	r1, r5
 800481a:	f7ff ff85 	bl	8004728 <_malloc_r>
 800481e:	4606      	mov	r6, r0
 8004820:	b950      	cbnz	r0, 8004838 <__ssputs_r+0x5c>
 8004822:	230c      	movs	r3, #12
 8004824:	f8ca 3000 	str.w	r3, [sl]
 8004828:	89a3      	ldrh	r3, [r4, #12]
 800482a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800482e:	81a3      	strh	r3, [r4, #12]
 8004830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004838:	6921      	ldr	r1, [r4, #16]
 800483a:	464a      	mov	r2, r9
 800483c:	f7ff ff3c 	bl	80046b8 <memcpy>
 8004840:	89a3      	ldrh	r3, [r4, #12]
 8004842:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800484a:	81a3      	strh	r3, [r4, #12]
 800484c:	6126      	str	r6, [r4, #16]
 800484e:	6165      	str	r5, [r4, #20]
 8004850:	444e      	add	r6, r9
 8004852:	eba5 0509 	sub.w	r5, r5, r9
 8004856:	6026      	str	r6, [r4, #0]
 8004858:	60a5      	str	r5, [r4, #8]
 800485a:	463e      	mov	r6, r7
 800485c:	42be      	cmp	r6, r7
 800485e:	d900      	bls.n	8004862 <__ssputs_r+0x86>
 8004860:	463e      	mov	r6, r7
 8004862:	4632      	mov	r2, r6
 8004864:	6820      	ldr	r0, [r4, #0]
 8004866:	4641      	mov	r1, r8
 8004868:	f000 fab8 	bl	8004ddc <memmove>
 800486c:	68a3      	ldr	r3, [r4, #8]
 800486e:	6822      	ldr	r2, [r4, #0]
 8004870:	1b9b      	subs	r3, r3, r6
 8004872:	4432      	add	r2, r6
 8004874:	60a3      	str	r3, [r4, #8]
 8004876:	6022      	str	r2, [r4, #0]
 8004878:	2000      	movs	r0, #0
 800487a:	e7db      	b.n	8004834 <__ssputs_r+0x58>
 800487c:	462a      	mov	r2, r5
 800487e:	f000 fb23 	bl	8004ec8 <_realloc_r>
 8004882:	4606      	mov	r6, r0
 8004884:	2800      	cmp	r0, #0
 8004886:	d1e1      	bne.n	800484c <__ssputs_r+0x70>
 8004888:	6921      	ldr	r1, [r4, #16]
 800488a:	4650      	mov	r0, sl
 800488c:	f000 facc 	bl	8004e28 <_free_r>
 8004890:	e7c7      	b.n	8004822 <__ssputs_r+0x46>
	...

08004894 <_svfiprintf_r>:
 8004894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004898:	4698      	mov	r8, r3
 800489a:	898b      	ldrh	r3, [r1, #12]
 800489c:	061b      	lsls	r3, r3, #24
 800489e:	b09d      	sub	sp, #116	; 0x74
 80048a0:	4607      	mov	r7, r0
 80048a2:	460d      	mov	r5, r1
 80048a4:	4614      	mov	r4, r2
 80048a6:	d50e      	bpl.n	80048c6 <_svfiprintf_r+0x32>
 80048a8:	690b      	ldr	r3, [r1, #16]
 80048aa:	b963      	cbnz	r3, 80048c6 <_svfiprintf_r+0x32>
 80048ac:	2140      	movs	r1, #64	; 0x40
 80048ae:	f7ff ff3b 	bl	8004728 <_malloc_r>
 80048b2:	6028      	str	r0, [r5, #0]
 80048b4:	6128      	str	r0, [r5, #16]
 80048b6:	b920      	cbnz	r0, 80048c2 <_svfiprintf_r+0x2e>
 80048b8:	230c      	movs	r3, #12
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048c0:	e0d1      	b.n	8004a66 <_svfiprintf_r+0x1d2>
 80048c2:	2340      	movs	r3, #64	; 0x40
 80048c4:	616b      	str	r3, [r5, #20]
 80048c6:	2300      	movs	r3, #0
 80048c8:	9309      	str	r3, [sp, #36]	; 0x24
 80048ca:	2320      	movs	r3, #32
 80048cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80048d4:	2330      	movs	r3, #48	; 0x30
 80048d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004a80 <_svfiprintf_r+0x1ec>
 80048da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048de:	f04f 0901 	mov.w	r9, #1
 80048e2:	4623      	mov	r3, r4
 80048e4:	469a      	mov	sl, r3
 80048e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048ea:	b10a      	cbz	r2, 80048f0 <_svfiprintf_r+0x5c>
 80048ec:	2a25      	cmp	r2, #37	; 0x25
 80048ee:	d1f9      	bne.n	80048e4 <_svfiprintf_r+0x50>
 80048f0:	ebba 0b04 	subs.w	fp, sl, r4
 80048f4:	d00b      	beq.n	800490e <_svfiprintf_r+0x7a>
 80048f6:	465b      	mov	r3, fp
 80048f8:	4622      	mov	r2, r4
 80048fa:	4629      	mov	r1, r5
 80048fc:	4638      	mov	r0, r7
 80048fe:	f7ff ff6d 	bl	80047dc <__ssputs_r>
 8004902:	3001      	adds	r0, #1
 8004904:	f000 80aa 	beq.w	8004a5c <_svfiprintf_r+0x1c8>
 8004908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800490a:	445a      	add	r2, fp
 800490c:	9209      	str	r2, [sp, #36]	; 0x24
 800490e:	f89a 3000 	ldrb.w	r3, [sl]
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 80a2 	beq.w	8004a5c <_svfiprintf_r+0x1c8>
 8004918:	2300      	movs	r3, #0
 800491a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800491e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004922:	f10a 0a01 	add.w	sl, sl, #1
 8004926:	9304      	str	r3, [sp, #16]
 8004928:	9307      	str	r3, [sp, #28]
 800492a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800492e:	931a      	str	r3, [sp, #104]	; 0x68
 8004930:	4654      	mov	r4, sl
 8004932:	2205      	movs	r2, #5
 8004934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004938:	4851      	ldr	r0, [pc, #324]	; (8004a80 <_svfiprintf_r+0x1ec>)
 800493a:	f7fb fc59 	bl	80001f0 <memchr>
 800493e:	9a04      	ldr	r2, [sp, #16]
 8004940:	b9d8      	cbnz	r0, 800497a <_svfiprintf_r+0xe6>
 8004942:	06d0      	lsls	r0, r2, #27
 8004944:	bf44      	itt	mi
 8004946:	2320      	movmi	r3, #32
 8004948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800494c:	0711      	lsls	r1, r2, #28
 800494e:	bf44      	itt	mi
 8004950:	232b      	movmi	r3, #43	; 0x2b
 8004952:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004956:	f89a 3000 	ldrb.w	r3, [sl]
 800495a:	2b2a      	cmp	r3, #42	; 0x2a
 800495c:	d015      	beq.n	800498a <_svfiprintf_r+0xf6>
 800495e:	9a07      	ldr	r2, [sp, #28]
 8004960:	4654      	mov	r4, sl
 8004962:	2000      	movs	r0, #0
 8004964:	f04f 0c0a 	mov.w	ip, #10
 8004968:	4621      	mov	r1, r4
 800496a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800496e:	3b30      	subs	r3, #48	; 0x30
 8004970:	2b09      	cmp	r3, #9
 8004972:	d94e      	bls.n	8004a12 <_svfiprintf_r+0x17e>
 8004974:	b1b0      	cbz	r0, 80049a4 <_svfiprintf_r+0x110>
 8004976:	9207      	str	r2, [sp, #28]
 8004978:	e014      	b.n	80049a4 <_svfiprintf_r+0x110>
 800497a:	eba0 0308 	sub.w	r3, r0, r8
 800497e:	fa09 f303 	lsl.w	r3, r9, r3
 8004982:	4313      	orrs	r3, r2
 8004984:	9304      	str	r3, [sp, #16]
 8004986:	46a2      	mov	sl, r4
 8004988:	e7d2      	b.n	8004930 <_svfiprintf_r+0x9c>
 800498a:	9b03      	ldr	r3, [sp, #12]
 800498c:	1d19      	adds	r1, r3, #4
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	9103      	str	r1, [sp, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	bfbb      	ittet	lt
 8004996:	425b      	neglt	r3, r3
 8004998:	f042 0202 	orrlt.w	r2, r2, #2
 800499c:	9307      	strge	r3, [sp, #28]
 800499e:	9307      	strlt	r3, [sp, #28]
 80049a0:	bfb8      	it	lt
 80049a2:	9204      	strlt	r2, [sp, #16]
 80049a4:	7823      	ldrb	r3, [r4, #0]
 80049a6:	2b2e      	cmp	r3, #46	; 0x2e
 80049a8:	d10c      	bne.n	80049c4 <_svfiprintf_r+0x130>
 80049aa:	7863      	ldrb	r3, [r4, #1]
 80049ac:	2b2a      	cmp	r3, #42	; 0x2a
 80049ae:	d135      	bne.n	8004a1c <_svfiprintf_r+0x188>
 80049b0:	9b03      	ldr	r3, [sp, #12]
 80049b2:	1d1a      	adds	r2, r3, #4
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	9203      	str	r2, [sp, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	bfb8      	it	lt
 80049bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80049c0:	3402      	adds	r4, #2
 80049c2:	9305      	str	r3, [sp, #20]
 80049c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a90 <_svfiprintf_r+0x1fc>
 80049c8:	7821      	ldrb	r1, [r4, #0]
 80049ca:	2203      	movs	r2, #3
 80049cc:	4650      	mov	r0, sl
 80049ce:	f7fb fc0f 	bl	80001f0 <memchr>
 80049d2:	b140      	cbz	r0, 80049e6 <_svfiprintf_r+0x152>
 80049d4:	2340      	movs	r3, #64	; 0x40
 80049d6:	eba0 000a 	sub.w	r0, r0, sl
 80049da:	fa03 f000 	lsl.w	r0, r3, r0
 80049de:	9b04      	ldr	r3, [sp, #16]
 80049e0:	4303      	orrs	r3, r0
 80049e2:	3401      	adds	r4, #1
 80049e4:	9304      	str	r3, [sp, #16]
 80049e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ea:	4826      	ldr	r0, [pc, #152]	; (8004a84 <_svfiprintf_r+0x1f0>)
 80049ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049f0:	2206      	movs	r2, #6
 80049f2:	f7fb fbfd 	bl	80001f0 <memchr>
 80049f6:	2800      	cmp	r0, #0
 80049f8:	d038      	beq.n	8004a6c <_svfiprintf_r+0x1d8>
 80049fa:	4b23      	ldr	r3, [pc, #140]	; (8004a88 <_svfiprintf_r+0x1f4>)
 80049fc:	bb1b      	cbnz	r3, 8004a46 <_svfiprintf_r+0x1b2>
 80049fe:	9b03      	ldr	r3, [sp, #12]
 8004a00:	3307      	adds	r3, #7
 8004a02:	f023 0307 	bic.w	r3, r3, #7
 8004a06:	3308      	adds	r3, #8
 8004a08:	9303      	str	r3, [sp, #12]
 8004a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a0c:	4433      	add	r3, r6
 8004a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a10:	e767      	b.n	80048e2 <_svfiprintf_r+0x4e>
 8004a12:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a16:	460c      	mov	r4, r1
 8004a18:	2001      	movs	r0, #1
 8004a1a:	e7a5      	b.n	8004968 <_svfiprintf_r+0xd4>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	3401      	adds	r4, #1
 8004a20:	9305      	str	r3, [sp, #20]
 8004a22:	4619      	mov	r1, r3
 8004a24:	f04f 0c0a 	mov.w	ip, #10
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a2e:	3a30      	subs	r2, #48	; 0x30
 8004a30:	2a09      	cmp	r2, #9
 8004a32:	d903      	bls.n	8004a3c <_svfiprintf_r+0x1a8>
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0c5      	beq.n	80049c4 <_svfiprintf_r+0x130>
 8004a38:	9105      	str	r1, [sp, #20]
 8004a3a:	e7c3      	b.n	80049c4 <_svfiprintf_r+0x130>
 8004a3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a40:	4604      	mov	r4, r0
 8004a42:	2301      	movs	r3, #1
 8004a44:	e7f0      	b.n	8004a28 <_svfiprintf_r+0x194>
 8004a46:	ab03      	add	r3, sp, #12
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	462a      	mov	r2, r5
 8004a4c:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <_svfiprintf_r+0x1f8>)
 8004a4e:	a904      	add	r1, sp, #16
 8004a50:	4638      	mov	r0, r7
 8004a52:	f3af 8000 	nop.w
 8004a56:	1c42      	adds	r2, r0, #1
 8004a58:	4606      	mov	r6, r0
 8004a5a:	d1d6      	bne.n	8004a0a <_svfiprintf_r+0x176>
 8004a5c:	89ab      	ldrh	r3, [r5, #12]
 8004a5e:	065b      	lsls	r3, r3, #25
 8004a60:	f53f af2c 	bmi.w	80048bc <_svfiprintf_r+0x28>
 8004a64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a66:	b01d      	add	sp, #116	; 0x74
 8004a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a6c:	ab03      	add	r3, sp, #12
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	462a      	mov	r2, r5
 8004a72:	4b06      	ldr	r3, [pc, #24]	; (8004a8c <_svfiprintf_r+0x1f8>)
 8004a74:	a904      	add	r1, sp, #16
 8004a76:	4638      	mov	r0, r7
 8004a78:	f000 f87a 	bl	8004b70 <_printf_i>
 8004a7c:	e7eb      	b.n	8004a56 <_svfiprintf_r+0x1c2>
 8004a7e:	bf00      	nop
 8004a80:	08005970 	.word	0x08005970
 8004a84:	0800597a 	.word	0x0800597a
 8004a88:	00000000 	.word	0x00000000
 8004a8c:	080047dd 	.word	0x080047dd
 8004a90:	08005976 	.word	0x08005976

08004a94 <_printf_common>:
 8004a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a98:	4616      	mov	r6, r2
 8004a9a:	4699      	mov	r9, r3
 8004a9c:	688a      	ldr	r2, [r1, #8]
 8004a9e:	690b      	ldr	r3, [r1, #16]
 8004aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	bfb8      	it	lt
 8004aa8:	4613      	movlt	r3, r2
 8004aaa:	6033      	str	r3, [r6, #0]
 8004aac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ab0:	4607      	mov	r7, r0
 8004ab2:	460c      	mov	r4, r1
 8004ab4:	b10a      	cbz	r2, 8004aba <_printf_common+0x26>
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	6033      	str	r3, [r6, #0]
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	0699      	lsls	r1, r3, #26
 8004abe:	bf42      	ittt	mi
 8004ac0:	6833      	ldrmi	r3, [r6, #0]
 8004ac2:	3302      	addmi	r3, #2
 8004ac4:	6033      	strmi	r3, [r6, #0]
 8004ac6:	6825      	ldr	r5, [r4, #0]
 8004ac8:	f015 0506 	ands.w	r5, r5, #6
 8004acc:	d106      	bne.n	8004adc <_printf_common+0x48>
 8004ace:	f104 0a19 	add.w	sl, r4, #25
 8004ad2:	68e3      	ldr	r3, [r4, #12]
 8004ad4:	6832      	ldr	r2, [r6, #0]
 8004ad6:	1a9b      	subs	r3, r3, r2
 8004ad8:	42ab      	cmp	r3, r5
 8004ada:	dc26      	bgt.n	8004b2a <_printf_common+0x96>
 8004adc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ae0:	1e13      	subs	r3, r2, #0
 8004ae2:	6822      	ldr	r2, [r4, #0]
 8004ae4:	bf18      	it	ne
 8004ae6:	2301      	movne	r3, #1
 8004ae8:	0692      	lsls	r2, r2, #26
 8004aea:	d42b      	bmi.n	8004b44 <_printf_common+0xb0>
 8004aec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004af0:	4649      	mov	r1, r9
 8004af2:	4638      	mov	r0, r7
 8004af4:	47c0      	blx	r8
 8004af6:	3001      	adds	r0, #1
 8004af8:	d01e      	beq.n	8004b38 <_printf_common+0xa4>
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	68e5      	ldr	r5, [r4, #12]
 8004afe:	6832      	ldr	r2, [r6, #0]
 8004b00:	f003 0306 	and.w	r3, r3, #6
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	bf08      	it	eq
 8004b08:	1aad      	subeq	r5, r5, r2
 8004b0a:	68a3      	ldr	r3, [r4, #8]
 8004b0c:	6922      	ldr	r2, [r4, #16]
 8004b0e:	bf0c      	ite	eq
 8004b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b14:	2500      	movne	r5, #0
 8004b16:	4293      	cmp	r3, r2
 8004b18:	bfc4      	itt	gt
 8004b1a:	1a9b      	subgt	r3, r3, r2
 8004b1c:	18ed      	addgt	r5, r5, r3
 8004b1e:	2600      	movs	r6, #0
 8004b20:	341a      	adds	r4, #26
 8004b22:	42b5      	cmp	r5, r6
 8004b24:	d11a      	bne.n	8004b5c <_printf_common+0xc8>
 8004b26:	2000      	movs	r0, #0
 8004b28:	e008      	b.n	8004b3c <_printf_common+0xa8>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	4652      	mov	r2, sl
 8004b2e:	4649      	mov	r1, r9
 8004b30:	4638      	mov	r0, r7
 8004b32:	47c0      	blx	r8
 8004b34:	3001      	adds	r0, #1
 8004b36:	d103      	bne.n	8004b40 <_printf_common+0xac>
 8004b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b40:	3501      	adds	r5, #1
 8004b42:	e7c6      	b.n	8004ad2 <_printf_common+0x3e>
 8004b44:	18e1      	adds	r1, r4, r3
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	2030      	movs	r0, #48	; 0x30
 8004b4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b4e:	4422      	add	r2, r4
 8004b50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b58:	3302      	adds	r3, #2
 8004b5a:	e7c7      	b.n	8004aec <_printf_common+0x58>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	4622      	mov	r2, r4
 8004b60:	4649      	mov	r1, r9
 8004b62:	4638      	mov	r0, r7
 8004b64:	47c0      	blx	r8
 8004b66:	3001      	adds	r0, #1
 8004b68:	d0e6      	beq.n	8004b38 <_printf_common+0xa4>
 8004b6a:	3601      	adds	r6, #1
 8004b6c:	e7d9      	b.n	8004b22 <_printf_common+0x8e>
	...

08004b70 <_printf_i>:
 8004b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b74:	460c      	mov	r4, r1
 8004b76:	4691      	mov	r9, r2
 8004b78:	7e27      	ldrb	r7, [r4, #24]
 8004b7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b7c:	2f78      	cmp	r7, #120	; 0x78
 8004b7e:	4680      	mov	r8, r0
 8004b80:	469a      	mov	sl, r3
 8004b82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b86:	d807      	bhi.n	8004b98 <_printf_i+0x28>
 8004b88:	2f62      	cmp	r7, #98	; 0x62
 8004b8a:	d80a      	bhi.n	8004ba2 <_printf_i+0x32>
 8004b8c:	2f00      	cmp	r7, #0
 8004b8e:	f000 80d8 	beq.w	8004d42 <_printf_i+0x1d2>
 8004b92:	2f58      	cmp	r7, #88	; 0x58
 8004b94:	f000 80a3 	beq.w	8004cde <_printf_i+0x16e>
 8004b98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ba0:	e03a      	b.n	8004c18 <_printf_i+0xa8>
 8004ba2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ba6:	2b15      	cmp	r3, #21
 8004ba8:	d8f6      	bhi.n	8004b98 <_printf_i+0x28>
 8004baa:	a001      	add	r0, pc, #4	; (adr r0, 8004bb0 <_printf_i+0x40>)
 8004bac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004bb0:	08004c09 	.word	0x08004c09
 8004bb4:	08004c1d 	.word	0x08004c1d
 8004bb8:	08004b99 	.word	0x08004b99
 8004bbc:	08004b99 	.word	0x08004b99
 8004bc0:	08004b99 	.word	0x08004b99
 8004bc4:	08004b99 	.word	0x08004b99
 8004bc8:	08004c1d 	.word	0x08004c1d
 8004bcc:	08004b99 	.word	0x08004b99
 8004bd0:	08004b99 	.word	0x08004b99
 8004bd4:	08004b99 	.word	0x08004b99
 8004bd8:	08004b99 	.word	0x08004b99
 8004bdc:	08004d29 	.word	0x08004d29
 8004be0:	08004c4d 	.word	0x08004c4d
 8004be4:	08004d0b 	.word	0x08004d0b
 8004be8:	08004b99 	.word	0x08004b99
 8004bec:	08004b99 	.word	0x08004b99
 8004bf0:	08004d4b 	.word	0x08004d4b
 8004bf4:	08004b99 	.word	0x08004b99
 8004bf8:	08004c4d 	.word	0x08004c4d
 8004bfc:	08004b99 	.word	0x08004b99
 8004c00:	08004b99 	.word	0x08004b99
 8004c04:	08004d13 	.word	0x08004d13
 8004c08:	680b      	ldr	r3, [r1, #0]
 8004c0a:	1d1a      	adds	r2, r3, #4
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	600a      	str	r2, [r1, #0]
 8004c10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e0a3      	b.n	8004d64 <_printf_i+0x1f4>
 8004c1c:	6825      	ldr	r5, [r4, #0]
 8004c1e:	6808      	ldr	r0, [r1, #0]
 8004c20:	062e      	lsls	r6, r5, #24
 8004c22:	f100 0304 	add.w	r3, r0, #4
 8004c26:	d50a      	bpl.n	8004c3e <_printf_i+0xce>
 8004c28:	6805      	ldr	r5, [r0, #0]
 8004c2a:	600b      	str	r3, [r1, #0]
 8004c2c:	2d00      	cmp	r5, #0
 8004c2e:	da03      	bge.n	8004c38 <_printf_i+0xc8>
 8004c30:	232d      	movs	r3, #45	; 0x2d
 8004c32:	426d      	negs	r5, r5
 8004c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c38:	485e      	ldr	r0, [pc, #376]	; (8004db4 <_printf_i+0x244>)
 8004c3a:	230a      	movs	r3, #10
 8004c3c:	e019      	b.n	8004c72 <_printf_i+0x102>
 8004c3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c42:	6805      	ldr	r5, [r0, #0]
 8004c44:	600b      	str	r3, [r1, #0]
 8004c46:	bf18      	it	ne
 8004c48:	b22d      	sxthne	r5, r5
 8004c4a:	e7ef      	b.n	8004c2c <_printf_i+0xbc>
 8004c4c:	680b      	ldr	r3, [r1, #0]
 8004c4e:	6825      	ldr	r5, [r4, #0]
 8004c50:	1d18      	adds	r0, r3, #4
 8004c52:	6008      	str	r0, [r1, #0]
 8004c54:	0628      	lsls	r0, r5, #24
 8004c56:	d501      	bpl.n	8004c5c <_printf_i+0xec>
 8004c58:	681d      	ldr	r5, [r3, #0]
 8004c5a:	e002      	b.n	8004c62 <_printf_i+0xf2>
 8004c5c:	0669      	lsls	r1, r5, #25
 8004c5e:	d5fb      	bpl.n	8004c58 <_printf_i+0xe8>
 8004c60:	881d      	ldrh	r5, [r3, #0]
 8004c62:	4854      	ldr	r0, [pc, #336]	; (8004db4 <_printf_i+0x244>)
 8004c64:	2f6f      	cmp	r7, #111	; 0x6f
 8004c66:	bf0c      	ite	eq
 8004c68:	2308      	moveq	r3, #8
 8004c6a:	230a      	movne	r3, #10
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c72:	6866      	ldr	r6, [r4, #4]
 8004c74:	60a6      	str	r6, [r4, #8]
 8004c76:	2e00      	cmp	r6, #0
 8004c78:	bfa2      	ittt	ge
 8004c7a:	6821      	ldrge	r1, [r4, #0]
 8004c7c:	f021 0104 	bicge.w	r1, r1, #4
 8004c80:	6021      	strge	r1, [r4, #0]
 8004c82:	b90d      	cbnz	r5, 8004c88 <_printf_i+0x118>
 8004c84:	2e00      	cmp	r6, #0
 8004c86:	d04d      	beq.n	8004d24 <_printf_i+0x1b4>
 8004c88:	4616      	mov	r6, r2
 8004c8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c8e:	fb03 5711 	mls	r7, r3, r1, r5
 8004c92:	5dc7      	ldrb	r7, [r0, r7]
 8004c94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c98:	462f      	mov	r7, r5
 8004c9a:	42bb      	cmp	r3, r7
 8004c9c:	460d      	mov	r5, r1
 8004c9e:	d9f4      	bls.n	8004c8a <_printf_i+0x11a>
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d10b      	bne.n	8004cbc <_printf_i+0x14c>
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	07df      	lsls	r7, r3, #31
 8004ca8:	d508      	bpl.n	8004cbc <_printf_i+0x14c>
 8004caa:	6923      	ldr	r3, [r4, #16]
 8004cac:	6861      	ldr	r1, [r4, #4]
 8004cae:	4299      	cmp	r1, r3
 8004cb0:	bfde      	ittt	le
 8004cb2:	2330      	movle	r3, #48	; 0x30
 8004cb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cb8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004cbc:	1b92      	subs	r2, r2, r6
 8004cbe:	6122      	str	r2, [r4, #16]
 8004cc0:	f8cd a000 	str.w	sl, [sp]
 8004cc4:	464b      	mov	r3, r9
 8004cc6:	aa03      	add	r2, sp, #12
 8004cc8:	4621      	mov	r1, r4
 8004cca:	4640      	mov	r0, r8
 8004ccc:	f7ff fee2 	bl	8004a94 <_printf_common>
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	d14c      	bne.n	8004d6e <_printf_i+0x1fe>
 8004cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cd8:	b004      	add	sp, #16
 8004cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cde:	4835      	ldr	r0, [pc, #212]	; (8004db4 <_printf_i+0x244>)
 8004ce0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	680e      	ldr	r6, [r1, #0]
 8004ce8:	061f      	lsls	r7, r3, #24
 8004cea:	f856 5b04 	ldr.w	r5, [r6], #4
 8004cee:	600e      	str	r6, [r1, #0]
 8004cf0:	d514      	bpl.n	8004d1c <_printf_i+0x1ac>
 8004cf2:	07d9      	lsls	r1, r3, #31
 8004cf4:	bf44      	itt	mi
 8004cf6:	f043 0320 	orrmi.w	r3, r3, #32
 8004cfa:	6023      	strmi	r3, [r4, #0]
 8004cfc:	b91d      	cbnz	r5, 8004d06 <_printf_i+0x196>
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	f023 0320 	bic.w	r3, r3, #32
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	2310      	movs	r3, #16
 8004d08:	e7b0      	b.n	8004c6c <_printf_i+0xfc>
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	f043 0320 	orr.w	r3, r3, #32
 8004d10:	6023      	str	r3, [r4, #0]
 8004d12:	2378      	movs	r3, #120	; 0x78
 8004d14:	4828      	ldr	r0, [pc, #160]	; (8004db8 <_printf_i+0x248>)
 8004d16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d1a:	e7e3      	b.n	8004ce4 <_printf_i+0x174>
 8004d1c:	065e      	lsls	r6, r3, #25
 8004d1e:	bf48      	it	mi
 8004d20:	b2ad      	uxthmi	r5, r5
 8004d22:	e7e6      	b.n	8004cf2 <_printf_i+0x182>
 8004d24:	4616      	mov	r6, r2
 8004d26:	e7bb      	b.n	8004ca0 <_printf_i+0x130>
 8004d28:	680b      	ldr	r3, [r1, #0]
 8004d2a:	6826      	ldr	r6, [r4, #0]
 8004d2c:	6960      	ldr	r0, [r4, #20]
 8004d2e:	1d1d      	adds	r5, r3, #4
 8004d30:	600d      	str	r5, [r1, #0]
 8004d32:	0635      	lsls	r5, r6, #24
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	d501      	bpl.n	8004d3c <_printf_i+0x1cc>
 8004d38:	6018      	str	r0, [r3, #0]
 8004d3a:	e002      	b.n	8004d42 <_printf_i+0x1d2>
 8004d3c:	0671      	lsls	r1, r6, #25
 8004d3e:	d5fb      	bpl.n	8004d38 <_printf_i+0x1c8>
 8004d40:	8018      	strh	r0, [r3, #0]
 8004d42:	2300      	movs	r3, #0
 8004d44:	6123      	str	r3, [r4, #16]
 8004d46:	4616      	mov	r6, r2
 8004d48:	e7ba      	b.n	8004cc0 <_printf_i+0x150>
 8004d4a:	680b      	ldr	r3, [r1, #0]
 8004d4c:	1d1a      	adds	r2, r3, #4
 8004d4e:	600a      	str	r2, [r1, #0]
 8004d50:	681e      	ldr	r6, [r3, #0]
 8004d52:	6862      	ldr	r2, [r4, #4]
 8004d54:	2100      	movs	r1, #0
 8004d56:	4630      	mov	r0, r6
 8004d58:	f7fb fa4a 	bl	80001f0 <memchr>
 8004d5c:	b108      	cbz	r0, 8004d62 <_printf_i+0x1f2>
 8004d5e:	1b80      	subs	r0, r0, r6
 8004d60:	6060      	str	r0, [r4, #4]
 8004d62:	6863      	ldr	r3, [r4, #4]
 8004d64:	6123      	str	r3, [r4, #16]
 8004d66:	2300      	movs	r3, #0
 8004d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d6c:	e7a8      	b.n	8004cc0 <_printf_i+0x150>
 8004d6e:	6923      	ldr	r3, [r4, #16]
 8004d70:	4632      	mov	r2, r6
 8004d72:	4649      	mov	r1, r9
 8004d74:	4640      	mov	r0, r8
 8004d76:	47d0      	blx	sl
 8004d78:	3001      	adds	r0, #1
 8004d7a:	d0ab      	beq.n	8004cd4 <_printf_i+0x164>
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	079b      	lsls	r3, r3, #30
 8004d80:	d413      	bmi.n	8004daa <_printf_i+0x23a>
 8004d82:	68e0      	ldr	r0, [r4, #12]
 8004d84:	9b03      	ldr	r3, [sp, #12]
 8004d86:	4298      	cmp	r0, r3
 8004d88:	bfb8      	it	lt
 8004d8a:	4618      	movlt	r0, r3
 8004d8c:	e7a4      	b.n	8004cd8 <_printf_i+0x168>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	4632      	mov	r2, r6
 8004d92:	4649      	mov	r1, r9
 8004d94:	4640      	mov	r0, r8
 8004d96:	47d0      	blx	sl
 8004d98:	3001      	adds	r0, #1
 8004d9a:	d09b      	beq.n	8004cd4 <_printf_i+0x164>
 8004d9c:	3501      	adds	r5, #1
 8004d9e:	68e3      	ldr	r3, [r4, #12]
 8004da0:	9903      	ldr	r1, [sp, #12]
 8004da2:	1a5b      	subs	r3, r3, r1
 8004da4:	42ab      	cmp	r3, r5
 8004da6:	dcf2      	bgt.n	8004d8e <_printf_i+0x21e>
 8004da8:	e7eb      	b.n	8004d82 <_printf_i+0x212>
 8004daa:	2500      	movs	r5, #0
 8004dac:	f104 0619 	add.w	r6, r4, #25
 8004db0:	e7f5      	b.n	8004d9e <_printf_i+0x22e>
 8004db2:	bf00      	nop
 8004db4:	08005981 	.word	0x08005981
 8004db8:	08005992 	.word	0x08005992

08004dbc <_sbrk_r>:
 8004dbc:	b538      	push	{r3, r4, r5, lr}
 8004dbe:	4d06      	ldr	r5, [pc, #24]	; (8004dd8 <_sbrk_r+0x1c>)
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	602b      	str	r3, [r5, #0]
 8004dc8:	f7fd f890 	bl	8001eec <_sbrk>
 8004dcc:	1c43      	adds	r3, r0, #1
 8004dce:	d102      	bne.n	8004dd6 <_sbrk_r+0x1a>
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	b103      	cbz	r3, 8004dd6 <_sbrk_r+0x1a>
 8004dd4:	6023      	str	r3, [r4, #0]
 8004dd6:	bd38      	pop	{r3, r4, r5, pc}
 8004dd8:	200002ec 	.word	0x200002ec

08004ddc <memmove>:
 8004ddc:	4288      	cmp	r0, r1
 8004dde:	b510      	push	{r4, lr}
 8004de0:	eb01 0402 	add.w	r4, r1, r2
 8004de4:	d902      	bls.n	8004dec <memmove+0x10>
 8004de6:	4284      	cmp	r4, r0
 8004de8:	4623      	mov	r3, r4
 8004dea:	d807      	bhi.n	8004dfc <memmove+0x20>
 8004dec:	1e43      	subs	r3, r0, #1
 8004dee:	42a1      	cmp	r1, r4
 8004df0:	d008      	beq.n	8004e04 <memmove+0x28>
 8004df2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004df6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dfa:	e7f8      	b.n	8004dee <memmove+0x12>
 8004dfc:	4402      	add	r2, r0
 8004dfe:	4601      	mov	r1, r0
 8004e00:	428a      	cmp	r2, r1
 8004e02:	d100      	bne.n	8004e06 <memmove+0x2a>
 8004e04:	bd10      	pop	{r4, pc}
 8004e06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e0e:	e7f7      	b.n	8004e00 <memmove+0x24>

08004e10 <__malloc_lock>:
 8004e10:	4801      	ldr	r0, [pc, #4]	; (8004e18 <__malloc_lock+0x8>)
 8004e12:	f7ff bc87 	b.w	8004724 <__retarget_lock_acquire_recursive>
 8004e16:	bf00      	nop
 8004e18:	200002e4 	.word	0x200002e4

08004e1c <__malloc_unlock>:
 8004e1c:	4801      	ldr	r0, [pc, #4]	; (8004e24 <__malloc_unlock+0x8>)
 8004e1e:	f7ff bc82 	b.w	8004726 <__retarget_lock_release_recursive>
 8004e22:	bf00      	nop
 8004e24:	200002e4 	.word	0x200002e4

08004e28 <_free_r>:
 8004e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e2a:	2900      	cmp	r1, #0
 8004e2c:	d048      	beq.n	8004ec0 <_free_r+0x98>
 8004e2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e32:	9001      	str	r0, [sp, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f1a1 0404 	sub.w	r4, r1, #4
 8004e3a:	bfb8      	it	lt
 8004e3c:	18e4      	addlt	r4, r4, r3
 8004e3e:	f7ff ffe7 	bl	8004e10 <__malloc_lock>
 8004e42:	4a20      	ldr	r2, [pc, #128]	; (8004ec4 <_free_r+0x9c>)
 8004e44:	9801      	ldr	r0, [sp, #4]
 8004e46:	6813      	ldr	r3, [r2, #0]
 8004e48:	4615      	mov	r5, r2
 8004e4a:	b933      	cbnz	r3, 8004e5a <_free_r+0x32>
 8004e4c:	6063      	str	r3, [r4, #4]
 8004e4e:	6014      	str	r4, [r2, #0]
 8004e50:	b003      	add	sp, #12
 8004e52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e56:	f7ff bfe1 	b.w	8004e1c <__malloc_unlock>
 8004e5a:	42a3      	cmp	r3, r4
 8004e5c:	d90b      	bls.n	8004e76 <_free_r+0x4e>
 8004e5e:	6821      	ldr	r1, [r4, #0]
 8004e60:	1862      	adds	r2, r4, r1
 8004e62:	4293      	cmp	r3, r2
 8004e64:	bf04      	itt	eq
 8004e66:	681a      	ldreq	r2, [r3, #0]
 8004e68:	685b      	ldreq	r3, [r3, #4]
 8004e6a:	6063      	str	r3, [r4, #4]
 8004e6c:	bf04      	itt	eq
 8004e6e:	1852      	addeq	r2, r2, r1
 8004e70:	6022      	streq	r2, [r4, #0]
 8004e72:	602c      	str	r4, [r5, #0]
 8004e74:	e7ec      	b.n	8004e50 <_free_r+0x28>
 8004e76:	461a      	mov	r2, r3
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	b10b      	cbz	r3, 8004e80 <_free_r+0x58>
 8004e7c:	42a3      	cmp	r3, r4
 8004e7e:	d9fa      	bls.n	8004e76 <_free_r+0x4e>
 8004e80:	6811      	ldr	r1, [r2, #0]
 8004e82:	1855      	adds	r5, r2, r1
 8004e84:	42a5      	cmp	r5, r4
 8004e86:	d10b      	bne.n	8004ea0 <_free_r+0x78>
 8004e88:	6824      	ldr	r4, [r4, #0]
 8004e8a:	4421      	add	r1, r4
 8004e8c:	1854      	adds	r4, r2, r1
 8004e8e:	42a3      	cmp	r3, r4
 8004e90:	6011      	str	r1, [r2, #0]
 8004e92:	d1dd      	bne.n	8004e50 <_free_r+0x28>
 8004e94:	681c      	ldr	r4, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	6053      	str	r3, [r2, #4]
 8004e9a:	4421      	add	r1, r4
 8004e9c:	6011      	str	r1, [r2, #0]
 8004e9e:	e7d7      	b.n	8004e50 <_free_r+0x28>
 8004ea0:	d902      	bls.n	8004ea8 <_free_r+0x80>
 8004ea2:	230c      	movs	r3, #12
 8004ea4:	6003      	str	r3, [r0, #0]
 8004ea6:	e7d3      	b.n	8004e50 <_free_r+0x28>
 8004ea8:	6825      	ldr	r5, [r4, #0]
 8004eaa:	1961      	adds	r1, r4, r5
 8004eac:	428b      	cmp	r3, r1
 8004eae:	bf04      	itt	eq
 8004eb0:	6819      	ldreq	r1, [r3, #0]
 8004eb2:	685b      	ldreq	r3, [r3, #4]
 8004eb4:	6063      	str	r3, [r4, #4]
 8004eb6:	bf04      	itt	eq
 8004eb8:	1949      	addeq	r1, r1, r5
 8004eba:	6021      	streq	r1, [r4, #0]
 8004ebc:	6054      	str	r4, [r2, #4]
 8004ebe:	e7c7      	b.n	8004e50 <_free_r+0x28>
 8004ec0:	b003      	add	sp, #12
 8004ec2:	bd30      	pop	{r4, r5, pc}
 8004ec4:	20000090 	.word	0x20000090

08004ec8 <_realloc_r>:
 8004ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eca:	4607      	mov	r7, r0
 8004ecc:	4614      	mov	r4, r2
 8004ece:	460e      	mov	r6, r1
 8004ed0:	b921      	cbnz	r1, 8004edc <_realloc_r+0x14>
 8004ed2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	f7ff bc26 	b.w	8004728 <_malloc_r>
 8004edc:	b922      	cbnz	r2, 8004ee8 <_realloc_r+0x20>
 8004ede:	f7ff ffa3 	bl	8004e28 <_free_r>
 8004ee2:	4625      	mov	r5, r4
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ee8:	f000 f814 	bl	8004f14 <_malloc_usable_size_r>
 8004eec:	42a0      	cmp	r0, r4
 8004eee:	d20f      	bcs.n	8004f10 <_realloc_r+0x48>
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	f7ff fc18 	bl	8004728 <_malloc_r>
 8004ef8:	4605      	mov	r5, r0
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d0f2      	beq.n	8004ee4 <_realloc_r+0x1c>
 8004efe:	4631      	mov	r1, r6
 8004f00:	4622      	mov	r2, r4
 8004f02:	f7ff fbd9 	bl	80046b8 <memcpy>
 8004f06:	4631      	mov	r1, r6
 8004f08:	4638      	mov	r0, r7
 8004f0a:	f7ff ff8d 	bl	8004e28 <_free_r>
 8004f0e:	e7e9      	b.n	8004ee4 <_realloc_r+0x1c>
 8004f10:	4635      	mov	r5, r6
 8004f12:	e7e7      	b.n	8004ee4 <_realloc_r+0x1c>

08004f14 <_malloc_usable_size_r>:
 8004f14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f18:	1f18      	subs	r0, r3, #4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	bfbc      	itt	lt
 8004f1e:	580b      	ldrlt	r3, [r1, r0]
 8004f20:	18c0      	addlt	r0, r0, r3
 8004f22:	4770      	bx	lr

08004f24 <_init>:
 8004f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f26:	bf00      	nop
 8004f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f2a:	bc08      	pop	{r3}
 8004f2c:	469e      	mov	lr, r3
 8004f2e:	4770      	bx	lr

08004f30 <_fini>:
 8004f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f32:	bf00      	nop
 8004f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f36:	bc08      	pop	{r3}
 8004f38:	469e      	mov	lr, r3
 8004f3a:	4770      	bx	lr
