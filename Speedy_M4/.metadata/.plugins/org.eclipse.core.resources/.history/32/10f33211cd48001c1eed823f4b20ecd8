/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "api.h"
#include "Functions.h"
#include <stdio.h>
#include <inttypes.h>
#include <stdlib.h>
#include <time.h>
#include <stdbool.h>
#include <stdint.h>
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */



typedef bool StateBool[192];
typedef uint8_t StateChar[32];
typedef uint64_t StateUint[3];

StateChar RoundKeys[NR+1];
StateChar RoundCons[NR-1];


/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#define ARM_CM_DEMCR      (volatile uint32_t *)0xE000EDFC

#define ARM_CM_DWT_CYCCNT (volatile uint32_t *)0xE0001004

#define ARM_CM_DWT_CTRL   (volatile uint32_t *)0xE0001000

#define MAX_BUFF 150 		/*Buffer max size in bytes*/



/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef hlpuart1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_LPUART1_UART_Init(void);
/* USER CODE BEGIN PFP */




/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

	*ARM_CM_DEMCR     =  (*ARM_CM_DEMCR) | 0x01000000;  // Set bit 24
	*ARM_CM_DWT_CTRL = (*ARM_CM_DWT_CTRL) | 0x00000001 ;

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_LPUART1_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  StateUint Plaintext     = {0xA13A632451070E43,0x82A27F26A40682F3,0xFE9FF68028D24FDB};
  StateUint Key           = {0x764C4F6254E1BFF2,0x08E95862428FAED0,0x1584F4207A7E8477};
  StateUint Ciphertext    = {0xED3D0EA11C427BD3,0x2570DF41C6FD66EB,0xBF4916E760ED0943};

  //serial_out("Plaintext := ", (uint8_t*)&Plaintext, NULL, 24);
  serial_out2("Plaintext := ", (uint8_t*)&Plaintext);
  serial_out("Key := ", (uint8_t*)&Key, NULL, 24);
  serial_out("Ciphertext := ", (uint8_t*)&Ciphertext, NULL, 24);

  serial_out("Encryption", NULL, NULL, 0);
  Encrypt(Plaintext, Key);

  serial_out("Encryption Done\n", NULL, NULL, 0);

  //serial_out("Decryption", NULL, NULL, 0);
  //Decrypt(Ciphertext, Key);

  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
  hlpuart1.Init.BaudRate = 115200;
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
  HAL_PWREx_EnableVddIO2();

}

/* USER CODE BEGIN 4 */

void convert_stateuint_to_statechar(StateUint input, StateChar output) {
    for(int i = 0; i < 10; i++)
        output[i] = (input[0] >> (58 - 6 * i)) & 0x3f;
    output[10] = ((input[0] & 0xf) << 2) ^ (input[1] >> 62);
    for(int i = 11; i < 21; i++)
        output[i] = (input[1] >> (122 - 6 * i)) & 0x3f;
    output[21] = ((input[1] & 0x3) << 4) ^ (input[2] >> 60);
    for(int i = 22; i < 32; i++)
        output[i] = (input[2] >> (186 - 6 * i)) & 0x3f;
}

void convert_statebool_to_statechar(StateBool input, StateChar output) {
    for(int i = 0; i < 32; i++) {
        output[i] = 0;
        for(int j = 0; j < 6; j++) {
            output[i] <<= 1;
            output[i] ^= input[6 * i + j];
        }
    }
}

void print_state(StateChar input) {
    for(int i = 0; i < 16; i++)
        printf("%X%X%X", input[2 * i] >> 2, ((input[2 * i] & 3) << 2) ^ (input[2 * i + 1] >> 4), input[2 * i + 1] & 0xf);
    printf("\n");
}

void prepare_round_cons() {
    StateUint RCuint;
    for(int r = 0; r < NR - 1; r++) {
        RCuint[0] = constants[3 * r];
        RCuint[1] = constants[3 * r + 1];
        RCuint[2] = constants[3 * r + 2];
        convert_stateuint_to_statechar(RCuint, RoundCons[r]);
    }
}

void prepare_round_keys(StateUint Key) {
    StateBool TempRoundKeyState[2];

    for(int i = 0; i < 3; i++)
        for(int j = 0; j < 64; j++)
            TempRoundKeyState[0][64 * i + j] = (Key[i] >> (63 - j)) & 1;

    convert_statebool_to_statechar(TempRoundKeyState[0], RoundKeys[0]);

    for(int r = 1; r <= NR; r++) {
        bool ind_new = (r % 2);
        bool ind_old = !ind_new;

        for(int i = 0; i < 192; i++)
            TempRoundKeyState[ind_new][i] = TempRoundKeyState[ind_old][(7 * i + 1) % 192];
        convert_statebool_to_statechar(TempRoundKeyState[ind_new], RoundKeys[r]);
    }
}

void AK(StateChar input, int r) {
    for(int i = 0; i < 32; i++)
        input[i] ^= RoundKeys[r][i];
}

void AC(StateChar input, int r) {
    for(int i = 0; i < 32; i++)
        input[i] ^= RoundCons[r][i];
}

void SB(StateChar input) {
    for(int i = 0; i < 32; i++)
        input[i] = S[(int)input[i]];
}

void SBI(StateChar input) {
    for(int i = 0; i < 32; i++)
        input[i] = SI[(int)input[i]];
}

void MC(StateChar input) {
    const int alphas[] = {1, 5, 9, 15, 21, 26};

    StateChar temp;
    for(int i = 0; i < 32; i++)
        temp[i] = input[i];

    for(int a = 0; a < (sizeof(alphas) / sizeof(alphas[0])); a++)
    {
        for(int i = 0; i < 32; i++)
            input[i] ^= temp[(i + alphas[a]) % 32];
    }
}

void MCI(StateChar input) {
    const int alphas[] = {4, 5, 6, 7, 10, 12, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28};

    StateChar temp;
    for(int i = 0; i < 32; i++)
        temp[i] = input[i];

    for(int a = 0; a < (sizeof(alphas) / sizeof(alphas[0])); a++)
    {
        for(int i = 0; i < 32; i++)
            input[i] ^= temp[(i + alphas[a]) % 32];
    }
}

void SC(StateChar input) {
    bool temp[32][6];
    for(int i = 0; i < 32; i++)
        for(int j = 0; j < 6; j++)
            temp[i][j] = ((input[(i + j) % 32] >> (5 - j)) & 1);

    for(int i = 0; i < 32; i++) {
        input[i] = 0;
        for(int j = 0; j < 6; j++) {
            input[i] <<= 1;
            input[i] ^= temp[i][j];
        }
    }
}

void SCI(StateChar input) {
    bool temp[32][6];
    for(int i = 0; i < 32; i++)
        for(int j = 0; j < 6; j++)
            temp[(i + j) % 32][j] = ((input[i] >> (5 - j)) & 1);

    for(int i = 0; i < 32; i++) {
        input[i] = 0;
        for(int j = 0; j < 6; j++) {
            input[i] <<= 1;
            input[i] ^= temp[i][j];
        }
    }
}

void Encrypt(StateUint Plaintext, StateUint Key) {
    prepare_round_cons();
    prepare_round_keys(Key);

    StateChar TempState;
    convert_stateuint_to_statechar(Plaintext, TempState);

    for(int r = 0; r < NR; r++) {
        AK(TempState, r);
        SB(TempState);
        SC(TempState);
        SB(TempState);

        if (r == (NR - 1))
            AK(TempState, NR);
        else {
            SC(TempState);
            MC(TempState);
            AC(TempState, r);
        }
    }
    //uint8_t pr[24] = {0};
    //print_state2(TempState, pr);
    //serial_out("Encryption res := ", (uint8_t*)&pr, NULL, 0);
}

void Decrypt(StateUint Ciphertext, StateUint Key) {
    prepare_round_cons();
    prepare_round_keys(Key);

    StateChar TempState;
    convert_stateuint_to_statechar(Ciphertext, TempState);

    AK(TempState, NR);
    SBI(TempState);
    SCI(TempState);
    SBI(TempState);
    AK(TempState, NR - 1);

    for(int r = NR - 2; r >= 0; r--) {
        AC(TempState, r);
        MCI(TempState);
        SCI(TempState);
        SBI(TempState);
        SCI(TempState);
        SBI(TempState);
        AK(TempState, r);
    }
    print_state(TempState);
}


void init_buffer(unsigned char *buffer, unsigned long long numbytes)
{
  for (unsigned long long i = 0; i < numbytes; i++)
    buffer[i] = (unsigned char)i;
}

void print_state2(StateChar input, uint8_t *output) {
    // i = 0
    output[0] = ((input[0] >> 2) << 4) | (((input[0] & 3) << 2) ^ (input[1] >> 4));
    output[1] = ((input[1] & 0xf) << 4) | (input[2] >> 2);
    // i = 1
    output[2] = ((((input[2] & 3) << 2) ^ (input[3] >> 4)) << 4) | (input[3] & 0xf);
    // i = 2
    output[3] = ((input[4] >> 2) << 4) | (((input[4] & 3) << 2) ^ (input[5] >> 4));
    output[4] = ((input[5] & 0xf) << 4) | (input[6] >> 2);
    // i = 3
    output[5] = ((((input[6] & 3) << 2) ^ (input[7] >> 4)) << 4) | (input[7] & 0xf) ;
    // i = 4
    output[6] = ((input[8] >> 2) << 4) | (((input[8] & 3) << 2) ^ (input[9] >> 4));
    output[7] = ((input[9] & 0xf) << 4) | (input[10] >> 2);
    // i = 5
    output[8] = ((((input[10] & 3) << 2) ^ (input[11] >> 4)) << 4) | (input[11] & 0xf);
    // i = 6
    output[9] = ((input[12] >> 2) << 4) | (((input[12] & 3) << 2) ^ (input[13] >> 4));
    output[10] = ((input[13] & 0xf) << 4) | (input[14] >> 2);
    // i = 7
    output[11] = ((((input[14] & 3) << 2) ^ (input[15] >> 4)) << 4) | (input[15] & 0xf);
    // i = 8
    output[12] = ((input[16] >> 2) << 4) | (((input[16] & 3) << 2) ^ (input[17] >> 4));
    output[13] = ((input[17] & 0xf) << 4) | (input[18] >> 2);
    // i = 9
    output[14] = ((((input[18] & 3) << 2) ^ (input[19] >> 4)) << 4) | (input[19] & 0xf);
    // i =10
    output[15] = ((input[20] >> 2) << 4) | (((input[20] & 3) << 2) ^ (input[21] >> 4));
    output[16] = ((input[21] & 0xf) << 4) | (input[22] >> 2);
    // i = 11
    output[17] = ((((input[22] & 3) << 2) ^ (input[23] >> 4)) << 4) | (input[23] & 0xf);
    // i = 12
    output[18] = ((input[24] >> 2) << 4) | (((input[24] & 3) << 2) ^ (input[25] >> 4));
    output[19] = ((input[25] & 0xf) << 4) | ((input[26] >> 2));
    // i = 13
    output[20] = ((((input[26] & 3) << 2) ^ (input[27] >> 4)) << 4) | (input[27] & 0xf);
    // i = 14
    output[21] = ((input[28] >> 2) << 4) | (((input[28] & 3) << 2) ^ (input[29] >> 4));
    output[22] = ((input[29] & 0xf) << 4) | (input[30] >> 2);
    // i = 15
    output[23] = ((((input[30] & 3) << 2) ^ (input[31] >> 4)) << 4) | (input[31] & 0xf);

}


void serial_out(char *label, uint8_t *dat, int *i, unsigned long long length){
  char buff [MAX_BUFF];
  uint16_t sz = 0;
  char m[MAX_BUFF];
  if(length == 0){
      sprintf(m,"%s", label);
  }
  if(length == 8){
    sprintf(m, "%s%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X", label, dat[7], dat[6], dat[5], dat[4], dat[3], dat[2], dat[1], dat[0]);
  }else if(length == 16){
    sprintf(m, "%s%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X , %.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X", label, dat[7], dat[6], dat[5], dat[4], dat[3], dat[2], dat[1], dat[0], dat[15], dat[14], dat[13], dat[12], dat[11], dat[10], dat[9], dat[8]);
  }else if(length == 24){
    sprintf(m, "%s%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X , %.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X , %.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X", label, dat[7], dat[6], dat[5], dat[4], dat[3], dat[2], dat[1], dat[0], dat[15], dat[14], dat[13], dat[12], dat[11], dat[10], dat[9], dat[8], dat[23], dat[22], dat[21], dat[20], dat[19], dat[18], dat[17], dat[16]);
  }

  if((label != NULL) && (dat == NULL) && (i != NULL)){    // print string and integer
    sprintf(buff, "%s%i\r\n", label, *i);
  }

  if((label != NULL) && (dat == NULL) && (i == NULL)){    // print the string label
  sprintf(buff, "%s\r\n", label);
  }


  sz = 0;
  do{
    sz++;
  }while(buff[sz]!='\0');

  HAL_UART_Transmit(&hlpuart1, (uint8_t *)buff, sz, HAL_MAX_DELAY);

}

void serial_out2(char *label, uint8_t *dat){
  char buff [MAX_BUFF];
  uint16_t sz = 0;
  char m[MAX_BUFF];

  sprintf(m, "%s%.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X , %.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X , %.2X%.2X%.2X%.2X%.2X%.2X%.2X%.2X", label, dat[0], dat[1], dat[2], dat[3], dat[4], dat[5], dat[6], dat[7], dat[8], dat[9], dat[10], dat[11], dat[12], dat[13], dat[14], dat[15], dat[16], dat[17], dat[18], dat[19], dat[20], dat[21], dat[22], dat[23]);

  sz = 0;
  do{
    sz++;
  }while(buff[sz]!='\0');

  HAL_UART_Transmit(&hlpuart1, (uint8_t *)buff, sz, HAL_MAX_DELAY);

}



/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
