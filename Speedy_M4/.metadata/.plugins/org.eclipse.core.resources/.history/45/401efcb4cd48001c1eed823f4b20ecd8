/*
 * Functions.c
 *
 *  Created on: Nov 18, 2021
 *      Author: sidbrun
 */

#include "main.h"
#include "api.h"
#include "Functions.h"

void convert_stateuint_to_statechar(StateUint input, StateChar output) {
    for(int i = 0; i < 10; i++)
        output[i] = (input[0] >> (58 - 6 * i)) & 0x3f;
    output[10] = ((input[0] & 0xf) << 2) ^ (input[1] >> 62);
    for(int i = 11; i < 21; i++)
        output[i] = (input[1] >> (122 - 6 * i)) & 0x3f;
    output[21] = ((input[1] & 0x3) << 4) ^ (input[2] >> 60);
    for(int i = 22; i < 32; i++)
        output[i] = (input[2] >> (186 - 6 * i)) & 0x3f;
}

void convert_statebool_to_statechar(StateBool input, StateChar output) {
    for(int i = 0; i < 32; i++) {
        output[i] = 0;
        for(int j = 0; j < 6; j++) {
            output[i] <<= 1;
            output[i] ^= input[6 * i + j];
        }
    }
}

void print_state(StateChar input) {
    for(int i = 0; i < 16; i++)
        printf("%X%X%X", input[2 * i] >> 2, ((input[2 * i] & 3) << 2) ^ (input[2 * i + 1] >> 4), input[2 * i + 1] & 0xf);
    printf("\n");
}

void prepare_round_cons() {
    StateUint RCuint;
    for(int r = 0; r < NR - 1; r++) {
        RCuint[0] = constants[3 * r];
        RCuint[1] = constants[3 * r + 1];
        RCuint[2] = constants[3 * r + 2];
        convert_stateuint_to_statechar(RCuint, RoundCons[r]);
    }
}

void prepare_round_keys(StateUint Key) {
    StateBool TempRoundKeyState[2];

    for(int i = 0; i < 3; i++)
        for(int j = 0; j < 64; j++)
            TempRoundKeyState[0][64 * i + j] = (Key[i] >> (63 - j)) & 1;

    convert_statebool_to_statechar(TempRoundKeyState[0], RoundKeys[0]);

    for(int r = 1; r <= NR; r++) {
        bool ind_new = (r % 2);
        bool ind_old = !ind_new;

        for(int i = 0; i < 192; i++)
            TempRoundKeyState[ind_new][i] = TempRoundKeyState[ind_old][(7 * i + 1) % 192];
        convert_statebool_to_statechar(TempRoundKeyState[ind_new], RoundKeys[r]);
    }
}

void AK(StateChar input, int r) {
    for(int i = 0; i < 32; i++)
        input[i] ^= RoundKeys[r][i];
}

void AC(StateChar input, int r) {
    for(int i = 0; i < 32; i++)
        input[i] ^= RoundCons[r][i];
}

void SB(StateChar input) {
    for(int i = 0; i < 32; i++)
        input[i] = S[(int)input[i]];
}

void SBI(StateChar input) {
    for(int i = 0; i < 32; i++)
        input[i] = SI[(int)input[i]];
}

void MC(StateChar input) {
    const int alphas[] = {1, 5, 9, 15, 21, 26};

    StateChar temp;
    for(int i = 0; i < 32; i++)
        temp[i] = input[i];

    for(int a = 0; a < (sizeof(alphas) / sizeof(alphas[0])); a++)
    {
        for(int i = 0; i < 32; i++)
            input[i] ^= temp[(i + alphas[a]) % 32];
    }
}

void MCI(StateChar input) {
    const int alphas[] = {4, 5, 6, 7, 10, 12, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28};

    StateChar temp;
    for(int i = 0; i < 32; i++)
        temp[i] = input[i];

    for(int a = 0; a < (sizeof(alphas) / sizeof(alphas[0])); a++)
    {
        for(int i = 0; i < 32; i++)
            input[i] ^= temp[(i + alphas[a]) % 32];
    }
}

void SC(StateChar input) {
    bool temp[32][6];
    for(int i = 0; i < 32; i++)
        for(int j = 0; j < 6; j++)
            temp[i][j] = ((input[(i + j) % 32] >> (5 - j)) & 1);

    for(int i = 0; i < 32; i++) {
        input[i] = 0;
        for(int j = 0; j < 6; j++) {
            input[i] <<= 1;
            input[i] ^= temp[i][j];
        }
    }
}

void SCI(StateChar input) {
    bool temp[32][6];
    for(int i = 0; i < 32; i++)
        for(int j = 0; j < 6; j++)
            temp[(i + j) % 32][j] = ((input[i] >> (5 - j)) & 1);

    for(int i = 0; i < 32; i++) {
        input[i] = 0;
        for(int j = 0; j < 6; j++) {
            input[i] <<= 1;
            input[i] ^= temp[i][j];
        }
    }
}

void Encrypt(StateUint Plaintext, StateUint Key) {
    prepare_round_cons();
    prepare_round_keys(Key);

    StateChar TempState;
    convert_stateuint_to_statechar(Plaintext, TempState);

    for(int r = 0; r < NR; r++) {
        AK(TempState, r);
        SB(TempState);
        SC(TempState);
        SB(TempState);

        if (r == (NR - 1))
            AK(TempState, NR);
        else {
            SC(TempState);
            MC(TempState);
            AC(TempState, r);
        }
    }
    //uint8_t pr[24] = {0};
    //print_state2(TempState, pr);
    //serial_out("Encryption res := ", (uint8_t*)&pr, NULL, 0);
}

void Decrypt(StateUint Ciphertext, StateUint Key) {
    prepare_round_cons();
    prepare_round_keys(Key);

    StateChar TempState;
    convert_stateuint_to_statechar(Ciphertext, TempState);

    AK(TempState, NR);
    SBI(TempState);
    SCI(TempState);
    SBI(TempState);
    AK(TempState, NR - 1);

    for(int r = NR - 2; r >= 0; r--) {
        AC(TempState, r);
        MCI(TempState);
        SCI(TempState);
        SBI(TempState);
        SCI(TempState);
        SBI(TempState);
        AK(TempState, r);
    }
    print_state(TempState);
}


void init_buffer(unsigned char *buffer, unsigned long long numbytes)
{
  for (unsigned long long i = 0; i < numbytes; i++)
    buffer[i] = (unsigned char)i;
}

void print_state2(StateChar input, uint8_t *output) {
    // i = 0
    output[0] = ((input[0] >> 2) << 4) | (((input[0] & 3) << 2) ^ (input[1] >> 4));
    output[1] = ((input[1] & 0xf) << 4) | (input[2] >> 2);
    // i = 1
    output[2] = ((((input[2] & 3) << 2) ^ (input[3] >> 4)) << 4) | (input[3] & 0xf);
    // i = 2
    output[3] = ((input[4] >> 2) << 4) | (((input[4] & 3) << 2) ^ (input[5] >> 4));
    output[4] = ((input[5] & 0xf) << 4) | (input[6] >> 2);
    // i = 3
    output[5] = ((((input[6] & 3) << 2) ^ (input[7] >> 4)) << 4) | (input[7] & 0xf) ;
    // i = 4
    output[6] = ((input[8] >> 2) << 4) | (((input[8] & 3) << 2) ^ (input[9] >> 4));
    output[7] = ((input[9] & 0xf) << 4) | (input[10] >> 2);
    // i = 5
    output[8] = ((((input[10] & 3) << 2) ^ (input[11] >> 4)) << 4) | (input[11] & 0xf);
    // i = 6
    output[9] = ((input[12] >> 2) << 4) | (((input[12] & 3) << 2) ^ (input[13] >> 4));
    output[10] = ((input[13] & 0xf) << 4) | (input[14] >> 2);
    // i = 7
    output[11] = ((((input[14] & 3) << 2) ^ (input[15] >> 4)) << 4) | (input[15] & 0xf);
    // i = 8
    output[12] = ((input[16] >> 2) << 4) | (((input[16] & 3) << 2) ^ (input[17] >> 4));
    output[13] = ((input[17] & 0xf) << 4) | (input[18] >> 2);
    // i = 9
    output[14] = ((((input[18] & 3) << 2) ^ (input[19] >> 4)) << 4) | (input[19] & 0xf);
    // i =10
    output[15] = ((input[20] >> 2) << 4) | (((input[20] & 3) << 2) ^ (input[21] >> 4));
    output[16] = ((input[21] & 0xf) << 4) | (input[22] >> 2);
    // i = 11
    output[17] = ((((input[22] & 3) << 2) ^ (input[23] >> 4)) << 4) | (input[23] & 0xf);
    // i = 12
    output[18] = ((input[24] >> 2) << 4) | (((input[24] & 3) << 2) ^ (input[25] >> 4));
    output[19] = ((input[25] & 0xf) << 4) | ((input[26] >> 2));
    // i = 13
    output[20] = ((((input[26] & 3) << 2) ^ (input[27] >> 4)) << 4) | (input[27] & 0xf);
    // i = 14
    output[21] = ((input[28] >> 2) << 4) | (((input[28] & 3) << 2) ^ (input[29] >> 4));
    output[22] = ((input[29] & 0xf) << 4) | (input[30] >> 2);
    // i = 15
    output[23] = ((((input[30] & 3) << 2) ^ (input[31] >> 4)) << 4) | (input[31] & 0xf);

}

