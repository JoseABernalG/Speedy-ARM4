
SpeedyASMFun.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043b4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  08004564  08004564  00014564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004850  08004850  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004850  08004850  00014850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004858  08004858  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004858  08004858  00014858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800485c  0800485c  0001485c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000070  080048d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  080048d0  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2a6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a83  00000000  00000000  0002d346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  0002edd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  0002f718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029577  00000000  00000000  0002ffb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1c4  00000000  00000000  0005952f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb9b9  00000000  00000000  000646f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001600ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028ac  00000000  00000000  00160100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800454c 	.word	0x0800454c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	0800454c 	.word	0x0800454c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <bslice>:

#include "Func.h"
#include <inttypes.h>


void bslice(uint32_t *in){	//load data from stack and convert it to bitslice representation, i.e. plaintext and keys
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	asm(	/*Load plaintext from stack to registers*/
 8000590:	4681      	mov	r9, r0
 8000592:	f8d9 0000 	ldr.w	r0, [r9]
 8000596:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800059a:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800059e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80005a2:	f8d9 4010 	ldr.w	r4, [r9, #16]
 80005a6:	f8d9 5014 	ldr.w	r5, [r9, #20]
 80005aa:	f04f 0c00 	mov.w	ip, #0
 80005ae:	f6cf 4c00 	movt	ip, #64512	; 0xfc00
 80005b2:	ea80 0691 	eor.w	r6, r0, r1, lsr #2
 80005b6:	ea06 169c 	and.w	r6, r6, ip, lsr #6
 80005ba:	ea80 0006 	eor.w	r0, r0, r6
 80005be:	ea81 0186 	eor.w	r1, r1, r6, lsl #2
 80005c2:	ea82 1600 	eor.w	r6, r2, r0, lsl #4
 80005c6:	ea06 261c 	and.w	r6, r6, ip, lsr #8
 80005ca:	ea82 0206 	eor.w	r2, r2, r6
 80005ce:	ea80 1016 	eor.w	r0, r0, r6, lsr #4
 80005d2:	ea83 1680 	eor.w	r6, r3, r0, lsl #6
 80005d6:	ea06 361c 	and.w	r6, r6, ip, lsr #12
 80005da:	ea83 0306 	eor.w	r3, r3, r6
 80005de:	ea80 1096 	eor.w	r0, r0, r6, lsr #6
 80005e2:	ea84 2600 	eor.w	r6, r4, r0, lsl #8
 80005e6:	ea06 461c 	and.w	r6, r6, ip, lsr #16
 80005ea:	ea84 0406 	eor.w	r4, r4, r6
 80005ee:	ea80 2016 	eor.w	r0, r0, r6, lsr #8
 80005f2:	ea4f 7131 	mov.w	r1, r1, ror #28
 80005f6:	ea4f 6232 	mov.w	r2, r2, ror #24
 80005fa:	ea4f 5333 	mov.w	r3, r3, ror #20
 80005fe:	ea4f 4434 	mov.w	r4, r4, ror #16
 8000602:	ea82 1681 	eor.w	r6, r2, r1, lsl #6
 8000606:	ea06 169c 	and.w	r6, r6, ip, lsr #6
 800060a:	ea82 0206 	eor.w	r2, r2, r6
 800060e:	ea81 1196 	eor.w	r1, r1, r6, lsr #6
 8000612:	ea83 3601 	eor.w	r6, r3, r1, lsl #12
 8000616:	ea06 169c 	and.w	r6, r6, ip, lsr #6
 800061a:	ea83 0306 	eor.w	r3, r3, r6
 800061e:	ea81 3116 	eor.w	r1, r1, r6, lsr #12
 8000622:	ea83 1682 	eor.w	r6, r3, r2, lsl #6
 8000626:	ea06 361c 	and.w	r6, r6, ip, lsr #12
 800062a:	ea83 0306 	eor.w	r3, r3, r6
 800062e:	ea82 1296 	eor.w	r2, r2, r6, lsr #6
 8000632:	ea4f 7b80 	mov.w	fp, r0, lsl #30
 8000636:	f001 0a0f 	and.w	sl, r1, #15
 800063a:	ea8b 6b8a 	eor.w	fp, fp, sl, lsl #26
 800063e:	f001 0af0 	and.w	sl, r1, #240	; 0xf0
 8000642:	ea8b 4b8a 	eor.w	fp, fp, sl, lsl #18
 8000646:	f002 0ac0 	and.w	sl, r2, #192	; 0xc0
 800064a:	ea8b 3b8a 	eor.w	fp, fp, sl, lsl #14
 800064e:	f403 5a40 	and.w	sl, r3, #12288	; 0x3000
 8000652:	ea8b 1b8a 	eor.w	fp, fp, sl, lsl #6
 8000656:	f404 4a70 	and.w	sl, r4, #61440	; 0xf000
 800065a:	ea8b 0b8a 	eor.w	fp, fp, sl, lsl #2
 800065e:	f404 2a70 	and.w	sl, r4, #983040	; 0xf0000
 8000662:	ea8b 1b9a 	eor.w	fp, fp, sl, lsr #6
 8000666:	f005 4a40 	and.w	sl, r5, #3221225472	; 0xc0000000
 800066a:	ea8b 5b9a 	eor.w	fp, fp, sl, lsr #22
 800066e:	f020 0003 	bic.w	r0, r0, #3
 8000672:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000676:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800067a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800067e:	f424 247f 	bic.w	r4, r4, #1044480	; 0xff000
 8000682:	f025 4540 	bic.w	r5, r5, #3221225472	; 0xc0000000
 8000686:	ea4f 75b5 	mov.w	r5, r5, ror #30
 800068a:	ea0c 1684 	and.w	r6, ip, r4, lsl #6
 800068e:	ea84 1496 	eor.w	r4, r4, r6, lsr #6
 8000692:	ea81 6116 	eor.w	r1, r1, r6, lsr #24
 8000696:	ea85 060b 	eor.w	r6, r5, fp
 800069a:	ea06 060c 	and.w	r6, r6, ip
 800069e:	ea85 0506 	eor.w	r5, r5, r6
 80006a2:	ea8b 0b06 	eor.w	fp, fp, r6
 80006a6:	ea84 060b 	eor.w	r6, r4, fp
 80006aa:	ea06 169c 	and.w	r6, r6, ip, lsr #6
 80006ae:	ea84 0406 	eor.w	r4, r4, r6
 80006b2:	ea8b 0b06 	eor.w	fp, fp, r6
 80006b6:	ea85 060b 	eor.w	r6, r5, fp
 80006ba:	ea06 169c 	and.w	r6, r6, ip, lsr #6
 80006be:	ea85 0506 	eor.w	r5, r5, r6
 80006c2:	ea8b 0b06 	eor.w	fp, fp, r6
 80006c6:	ea85 5602 	eor.w	r6, r5, r2, lsl #20
 80006ca:	ea06 169c 	and.w	r6, r6, ip, lsr #6
 80006ce:	ea85 0506 	eor.w	r5, r5, r6
 80006d2:	ea82 5216 	eor.w	r2, r2, r6, lsr #20
 80006d6:	ea03 561c 	and.w	r6, r3, ip, lsr #20
 80006da:	ea84 2406 	eor.w	r4, r4, r6, lsl #8
 80006de:	ea83 0306 	eor.w	r3, r3, r6
 80006e2:	ea0b 361c 	and.w	r6, fp, ip, lsr #12
 80006e6:	ea83 1396 	eor.w	r3, r3, r6, lsr #6
 80006ea:	ea8b 0b06 	eor.w	fp, fp, r6
 80006ee:	ea0b 469c 	and.w	r6, fp, ip, lsr #18
 80006f2:	ea82 1296 	eor.w	r2, r2, r6, lsr #6
 80006f6:	ea8b 0b06 	eor.w	fp, fp, r6
 80006fa:	f64f 7cfc 	movw	ip, #65532	; 0xfffc
 80006fe:	f2c0 0c0f 	movt	ip, #15
 8000702:	ea05 060c 	and.w	r6, r5, ip
 8000706:	ea85 0506 	eor.w	r5, r5, r6
 800070a:	ea8b 0b06 	eor.w	fp, fp, r6
 800070e:	f04f 0c00 	mov.w	ip, #0
 8000712:	f6cf 4c00 	movt	ip, #64512	; 0xfc00
 8000716:	ea03 669c 	and.w	r6, r3, ip, lsr #26
 800071a:	ea83 0306 	eor.w	r3, r3, r6
 800071e:	ea85 3586 	eor.w	r5, r5, r6, lsl #14
 8000722:	ea04 561c 	and.w	r6, r4, ip, lsr #20
 8000726:	ea84 0406 	eor.w	r4, r4, r6
 800072a:	ea84 0486 	eor.w	r4, r4, r6, lsl #2
 800072e:	ea04 669c 	and.w	r6, r4, ip, lsr #26
 8000732:	ea84 0406 	eor.w	r4, r4, r6
 8000736:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
 800073a:	ea0b 060c 	and.w	r6, fp, ip
 800073e:	ea8b 0b06 	eor.w	fp, fp, r6
 8000742:	ea83 6316 	eor.w	r3, r3, r6, lsr #24
 8000746:	ea0b 169c 	and.w	r6, fp, ip, lsr #6
 800074a:	ea8b 0b06 	eor.w	fp, fp, r6
 800074e:	ea84 4496 	eor.w	r4, r4, r6, lsr #18
 8000752:	ea0b 361c 	and.w	r6, fp, ip, lsr #12
 8000756:	ea8b 0b06 	eor.w	fp, fp, r6
 800075a:	ea85 3516 	eor.w	r5, r5, r6, lsr #12
 800075e:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 8000762:	ea0b 060c 	and.w	r6, fp, ip
 8000766:	ea80 3016 	eor.w	r0, r0, r6, lsr #12
 800076a:	ea0b 065c 	and.w	r6, fp, ip, lsr #1
 800076e:	ea81 21d6 	eor.w	r1, r1, r6, lsr #11
 8000772:	ea0b 069c 	and.w	r6, fp, ip, lsr #2
 8000776:	ea82 2296 	eor.w	r2, r2, r6, lsr #10
 800077a:	ea0b 06dc 	and.w	r6, fp, ip, lsr #3
 800077e:	ea83 2356 	eor.w	r3, r3, r6, lsr #9
 8000782:	ea0b 161c 	and.w	r6, fp, ip, lsr #4
 8000786:	ea84 2416 	eor.w	r4, r4, r6, lsr #8
 800078a:	ea0b 165c 	and.w	r6, fp, ip, lsr #5
 800078e:	ea85 15d6 	eor.w	r5, r5, r6, lsr #7
 8000792:	ea0b 169c 	and.w	r6, fp, ip, lsr #6
 8000796:	ea80 10d6 	eor.w	r0, r0, r6, lsr #7
 800079a:	ea0b 16dc 	and.w	r6, fp, ip, lsr #7
 800079e:	ea81 1196 	eor.w	r1, r1, r6, lsr #6
 80007a2:	ea0b 261c 	and.w	r6, fp, ip, lsr #8
 80007a6:	ea82 1256 	eor.w	r2, r2, r6, lsr #5
 80007aa:	ea0b 265c 	and.w	r6, fp, ip, lsr #9
 80007ae:	ea83 1316 	eor.w	r3, r3, r6, lsr #4
 80007b2:	ea0b 269c 	and.w	r6, fp, ip, lsr #10
 80007b6:	ea84 04d6 	eor.w	r4, r4, r6, lsr #3
 80007ba:	ea0b 26dc 	and.w	r6, fp, ip, lsr #11
 80007be:	ea85 0596 	eor.w	r5, r5, r6, lsr #2
 80007c2:	ea86 0606 	eor.w	r6, r6, r6
 80007c6:	ea8b 0b0b 	eor.w	fp, fp, fp
 80007ca:	ea8c 0c0c 	eor.w	ip, ip, ip
 80007ce:	f44f 5c02 	mov.w	ip, #8320	; 0x2080
 80007d2:	f2c8 2c08 	movt	ip, #33288	; 0x8208
 80007d6:	ea81 0640 	eor.w	r6, r1, r0, lsl #1
 80007da:	ea06 060c 	and.w	r6, r6, ip
 80007de:	ea81 0106 	eor.w	r1, r1, r6
 80007e2:	ea80 0056 	eor.w	r0, r0, r6, lsr #1
 80007e6:	ea82 0680 	eor.w	r6, r2, r0, lsl #2
 80007ea:	ea06 060c 	and.w	r6, r6, ip
 80007ee:	ea82 0206 	eor.w	r2, r2, r6
 80007f2:	ea80 0096 	eor.w	r0, r0, r6, lsr #2
 80007f6:	ea83 06c0 	eor.w	r6, r3, r0, lsl #3
 80007fa:	ea06 060c 	and.w	r6, r6, ip
 80007fe:	ea83 0306 	eor.w	r3, r3, r6
 8000802:	ea80 00d6 	eor.w	r0, r0, r6, lsr #3
 8000806:	ea84 1600 	eor.w	r6, r4, r0, lsl #4
 800080a:	ea06 060c 	and.w	r6, r6, ip
 800080e:	ea84 0406 	eor.w	r4, r4, r6
 8000812:	ea80 1016 	eor.w	r0, r0, r6, lsr #4
 8000816:	ea85 1640 	eor.w	r6, r5, r0, lsl #5
 800081a:	ea06 060c 	and.w	r6, r6, ip
 800081e:	ea85 0506 	eor.w	r5, r5, r6
 8000822:	ea80 1056 	eor.w	r0, r0, r6, lsr #5
 8000826:	ea4f 0c7c 	mov.w	ip, ip, ror #1
 800082a:	ea82 0641 	eor.w	r6, r2, r1, lsl #1
 800082e:	ea06 060c 	and.w	r6, r6, ip
 8000832:	ea82 0206 	eor.w	r2, r2, r6
 8000836:	ea81 0156 	eor.w	r1, r1, r6, lsr #1
 800083a:	ea83 0681 	eor.w	r6, r3, r1, lsl #2
 800083e:	ea06 060c 	and.w	r6, r6, ip
 8000842:	ea83 0306 	eor.w	r3, r3, r6
 8000846:	ea81 0196 	eor.w	r1, r1, r6, lsr #2
 800084a:	ea84 06c1 	eor.w	r6, r4, r1, lsl #3
 800084e:	ea06 060c 	and.w	r6, r6, ip
 8000852:	ea84 0406 	eor.w	r4, r4, r6
 8000856:	ea81 01d6 	eor.w	r1, r1, r6, lsr #3
 800085a:	ea85 1601 	eor.w	r6, r5, r1, lsl #4
 800085e:	ea06 060c 	and.w	r6, r6, ip
 8000862:	ea85 0506 	eor.w	r5, r5, r6
 8000866:	ea81 1116 	eor.w	r1, r1, r6, lsr #4
 800086a:	ea4f 0c7c 	mov.w	ip, ip, ror #1
 800086e:	ea83 0642 	eor.w	r6, r3, r2, lsl #1
 8000872:	ea06 060c 	and.w	r6, r6, ip
 8000876:	ea83 0306 	eor.w	r3, r3, r6
 800087a:	ea82 0256 	eor.w	r2, r2, r6, lsr #1
 800087e:	ea84 0682 	eor.w	r6, r4, r2, lsl #2
 8000882:	ea06 060c 	and.w	r6, r6, ip
 8000886:	ea84 0406 	eor.w	r4, r4, r6
 800088a:	ea82 0296 	eor.w	r2, r2, r6, lsr #2
 800088e:	ea85 06c2 	eor.w	r6, r5, r2, lsl #3
 8000892:	ea06 060c 	and.w	r6, r6, ip
 8000896:	ea85 0506 	eor.w	r5, r5, r6
 800089a:	ea82 02d6 	eor.w	r2, r2, r6, lsr #3
 800089e:	ea4f 0c7c 	mov.w	ip, ip, ror #1
 80008a2:	ea84 0643 	eor.w	r6, r4, r3, lsl #1
 80008a6:	ea06 060c 	and.w	r6, r6, ip
 80008aa:	ea84 0406 	eor.w	r4, r4, r6
 80008ae:	ea83 0356 	eor.w	r3, r3, r6, lsr #1
 80008b2:	ea85 0683 	eor.w	r6, r5, r3, lsl #2
 80008b6:	ea06 060c 	and.w	r6, r6, ip
 80008ba:	ea85 0506 	eor.w	r5, r5, r6
 80008be:	ea83 0396 	eor.w	r3, r3, r6, lsr #2
 80008c2:	ea4f 0c7c 	mov.w	ip, ip, ror #1
 80008c6:	ea85 0644 	eor.w	r6, r5, r4, lsl #1
 80008ca:	ea06 060c 	and.w	r6, r6, ip
 80008ce:	ea85 0506 	eor.w	r5, r5, r6
 80008d2:	ea84 0456 	eor.w	r4, r4, r6, lsr #1
 80008d6:	f8c9 0000 	str.w	r0, [r9]
 80008da:	f8c9 1004 	str.w	r1, [r9, #4]
 80008de:	f8c9 2008 	str.w	r2, [r9, #8]
 80008e2:	f8c9 300c 	str.w	r3, [r9, #12]
 80008e6:	f8c9 4010 	str.w	r4, [r9, #16]
 80008ea:	f8c9 5014 	str.w	r5, [r9, #20]
 80008ee:	4683      	mov	fp, r0
 80008f0:	469c      	mov	ip, r3
 80008f2:	468a      	mov	sl, r1
 80008f4:	4691      	mov	r9, r2
			"mov r12, r3;"				//store r3 in r12
			"mov r10, r1;"				//store r1 in r10
			"mov r9, r2;"				//store r2 in r9
			/* Bitslice conversion end*/
		);
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <sbox>:

void sbox(){				//substitution box in ASM and bitslice
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
	asm(	/*		Sbox implementation in assembly		*/
 8000906:	4667      	mov	r7, ip
 8000908:	ea8c 0c0c 	eor.w	ip, ip, ip
 800090c:	ea04 0902 	and.w	r9, r4, r2
 8000910:	ea69 0905 	orn	r9, r9, r5
 8000914:	ea09 0903 	and.w	r9, r9, r3
 8000918:	ea05 0a04 	and.w	sl, r5, r4
 800091c:	ea63 0b00 	orn	fp, r3, r0
 8000920:	ea6a 0a0b 	orn	sl, sl, fp
 8000924:	ea01 0a0a 	and.w	sl, r1, sl
 8000928:	ea4a 0609 	orr.w	r6, sl, r9
 800092c:	ea00 0902 	and.w	r9, r0, r2
 8000930:	ea62 0a03 	orn	sl, r2, r3
 8000934:	ea69 090a 	orn	r9, r9, sl
 8000938:	ea09 0905 	and.w	r9, r9, r5
 800093c:	ea45 0a04 	orr.w	sl, r5, r4
 8000940:	ea6a 0a03 	orn	sl, sl, r3
 8000944:	ea69 090a 	orn	r9, r9, sl
 8000948:	ea40 0a03 	orr.w	sl, r0, r3
 800094c:	ea6a 0a01 	orn	sl, sl, r1
 8000950:	ea69 070a 	orn	r7, r9, sl
 8000954:	ea01 0903 	and.w	r9, r1, r3
 8000958:	ea63 0a04 	orn	sl, r3, r4
 800095c:	ea69 090a 	orn	r9, r9, sl
 8000960:	ea00 0909 	and.w	r9, r0, r9
 8000964:	ea43 0a04 	orr.w	sl, r3, r4
 8000968:	ea6a 0a02 	orn	sl, sl, r2
 800096c:	ea69 090a 	orn	r9, r9, sl
 8000970:	ea40 0a02 	orr.w	sl, r0, r2
 8000974:	ea4a 0a05 	orr.w	sl, sl, r5
 8000978:	ea69 080a 	orn	r8, r9, sl
 800097c:	ea00 0904 	and.w	r9, r0, r4
 8000980:	ea40 0a03 	orr.w	sl, r0, r3
 8000984:	ea69 090a 	orn	r9, r9, sl
 8000988:	ea09 0902 	and.w	r9, r9, r2
 800098c:	ea00 0a05 	and.w	sl, r0, r5
 8000990:	ea62 0a0a 	orn	sl, r2, sl
 8000994:	ea69 090a 	orn	r9, r9, sl
 8000998:	ea01 0a03 	and.w	sl, r1, r3
 800099c:	ea60 0a0a 	orn	sl, r0, sl
 80009a0:	ea69 090a 	orn	r9, r9, sl
 80009a4:	ea8c 0c0c 	eor.w	ip, ip, ip
 80009a8:	ea44 0a02 	orr.w	sl, r4, r2
 80009ac:	ea40 0b01 	orr.w	fp, r0, r1
 80009b0:	ea6a 0a0b 	orn	sl, sl, fp
 80009b4:	ea6c 0a0a 	orn	sl, ip, sl
 80009b8:	ea63 0b00 	orn	fp, r3, r0
 80009bc:	ea6a 0a0b 	orn	sl, sl, fp
 80009c0:	ea04 0b05 	and.w	fp, r4, r5
 80009c4:	ea60 0b0b 	orn	fp, r0, fp
 80009c8:	ea6a 0a0b 	orn	sl, sl, fp
 80009cc:	ea00 0c03 	and.w	ip, r0, r3
 80009d0:	ea62 0b04 	orn	fp, r2, r4
 80009d4:	ea6c 0c0b 	orn	ip, ip, fp
 80009d8:	ea61 0c0c 	orn	ip, r1, ip
 80009dc:	ea01 0b00 	and.w	fp, r1, r0
 80009e0:	ea4b 0b05 	orr.w	fp, fp, r5
 80009e4:	ea0b 0b02 	and.w	fp, fp, r2
 80009e8:	ea6b 0b0c 	orn	fp, fp, ip
 80009ec:	46bc      	mov	ip, r7
 80009ee:	466f      	mov	r7, sp
			"orn r11, r11, r12;"				//	r11	<= not((((r1 and r0) or r5) and r2) or (not((not(((r0 and r3)) or (not(r2 or r4)))) or r1)))
			/*		Sbox implementation assembly end	*/
			"mov r12, r7;"						//save r7 value to r12
			"mov r7, sp;"						//move sp to r7
		);
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <shiftcolumns>:

void shiftcolumns(){		//Shift columns in ASM with bitslice
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
	asm(	/* shift columns */
 80009fe:	4630      	mov	r0, r6
 8000a00:	ea4f 71fc 	mov.w	r1, ip, ror #31
 8000a04:	ea4f 72b8 	mov.w	r2, r8, ror #30
 8000a08:	ea4f 7379 	mov.w	r3, r9, ror #29
 8000a0c:	ea4f 743a 	mov.w	r4, sl, ror #28
 8000a10:	ea4f 65fb 	mov.w	r5, fp, ror #27
			"mov r3, r9, ror #29;"
			"mov r4, r10, ror #28;"
			"mov r5, r11, ror #27;"
			/* shift columns end */
		);
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <mixcolumns>:

void mixcolumns(){			//Mix columns in ASM with bitslice
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
	asm(	/* mix columns*/
 8000a22:	ea80 70f6 	eor.w	r0, r0, r6, ror #31
 8000a26:	ea80 60f6 	eor.w	r0, r0, r6, ror #27
 8000a2a:	ea80 50f6 	eor.w	r0, r0, r6, ror #23
 8000a2e:	ea80 4076 	eor.w	r0, r0, r6, ror #17
 8000a32:	ea80 20f6 	eor.w	r0, r0, r6, ror #11
 8000a36:	ea80 10b6 	eor.w	r0, r0, r6, ror #6
 8000a3a:	ea81 71bc 	eor.w	r1, r1, ip, ror #30
 8000a3e:	ea81 61bc 	eor.w	r1, r1, ip, ror #26
 8000a42:	ea81 51bc 	eor.w	r1, r1, ip, ror #22
 8000a46:	ea81 413c 	eor.w	r1, r1, ip, ror #16
 8000a4a:	ea81 21bc 	eor.w	r1, r1, ip, ror #10
 8000a4e:	ea81 117c 	eor.w	r1, r1, ip, ror #5
 8000a52:	ea82 7278 	eor.w	r2, r2, r8, ror #29
 8000a56:	ea82 6278 	eor.w	r2, r2, r8, ror #25
 8000a5a:	ea82 5278 	eor.w	r2, r2, r8, ror #21
 8000a5e:	ea82 32f8 	eor.w	r2, r2, r8, ror #15
 8000a62:	ea82 2278 	eor.w	r2, r2, r8, ror #9
 8000a66:	ea82 1238 	eor.w	r2, r2, r8, ror #4
 8000a6a:	ea83 7339 	eor.w	r3, r3, r9, ror #28
 8000a6e:	ea83 6339 	eor.w	r3, r3, r9, ror #24
 8000a72:	ea83 5339 	eor.w	r3, r3, r9, ror #20
 8000a76:	ea83 33b9 	eor.w	r3, r3, r9, ror #14
 8000a7a:	ea83 2339 	eor.w	r3, r3, r9, ror #8
 8000a7e:	ea83 03f9 	eor.w	r3, r3, r9, ror #3
 8000a82:	ea84 64fa 	eor.w	r4, r4, sl, ror #27
 8000a86:	ea84 54fa 	eor.w	r4, r4, sl, ror #23
 8000a8a:	ea84 44fa 	eor.w	r4, r4, sl, ror #19
 8000a8e:	ea84 347a 	eor.w	r4, r4, sl, ror #13
 8000a92:	ea84 14fa 	eor.w	r4, r4, sl, ror #7
 8000a96:	ea84 04ba 	eor.w	r4, r4, sl, ror #2
 8000a9a:	ea85 65bb 	eor.w	r5, r5, fp, ror #26
 8000a9e:	ea85 55bb 	eor.w	r5, r5, fp, ror #22
 8000aa2:	ea85 45bb 	eor.w	r5, r5, fp, ror #18
 8000aa6:	ea85 353b 	eor.w	r5, r5, fp, ror #12
 8000aaa:	ea85 15bb 	eor.w	r5, r5, fp, ror #6
 8000aae:	ea85 057b 	eor.w	r5, r5, fp, ror #1
 8000ab2:	4683      	mov	fp, r0
 8000ab4:	469c      	mov	ip, r3
 8000ab6:	468a      	mov	sl, r1
 8000ab8:	4691      	mov	r9, r2
			"mov r11, r0;"				//store r0 in r11
			"mov r12, r3;"				//store r3 in r12
			"mov r10, r1;"				//store r1 in r10
			"mov r9, r2;"				//store r2 in r9
		);
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <ark>:

void ark(uint32_t *key){//Add round key in ASM with bitslice
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	asm(/*	ARK	 the key 0 must be in bitslice*/
 8000acc:	4651      	mov	r1, sl
 8000ace:	464a      	mov	r2, r9
 8000ad0:	4663      	mov	r3, ip
 8000ad2:	4684      	mov	ip, r0
 8000ad4:	4658      	mov	r0, fp
 8000ad6:	f8dc 6000 	ldr.w	r6, [ip]
 8000ada:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8000ade:	f8dc 8008 	ldr.w	r8, [ip, #8]
 8000ae2:	f8dc 900c 	ldr.w	r9, [ip, #12]
 8000ae6:	f8dc a010 	ldr.w	sl, [ip, #16]
 8000aea:	f8dc b014 	ldr.w	fp, [ip, #20]
 8000aee:	ea80 0006 	eor.w	r0, r0, r6
 8000af2:	ea81 0107 	eor.w	r1, r1, r7
 8000af6:	ea82 0208 	eor.w	r2, r2, r8
 8000afa:	ea83 0309 	eor.w	r3, r3, r9
 8000afe:	ea84 040a 	eor.w	r4, r4, sl
 8000b02:	ea85 050b 	eor.w	r5, r5, fp
 8000b06:	466f      	mov	r7, sp
			"eor r5, r5, r11;"
			/*END of ARK*/
			//"mov r12, r7;"			//save r7 to r12
			"mov r7, sp;"			//put stack pointer back to register 7
	);
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <lark>:

void lark(uint32_t *key, uint32_t *Ctxt){//Add round key in ASM with bitslice
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
	asm(/*	ARK	 the key 0 must be in bitslice*/
 8000b1e:	4667      	mov	r7, ip
 8000b20:	468c      	mov	ip, r1
 8000b22:	6841      	ldr	r1, [r0, #4]
 8000b24:	6882      	ldr	r2, [r0, #8]
 8000b26:	68c3      	ldr	r3, [r0, #12]
 8000b28:	6904      	ldr	r4, [r0, #16]
 8000b2a:	6945      	ldr	r5, [r0, #20]
 8000b2c:	6800      	ldr	r0, [r0, #0]
 8000b2e:	ea80 0006 	eor.w	r0, r0, r6
 8000b32:	ea81 0107 	eor.w	r1, r1, r7
 8000b36:	ea82 0208 	eor.w	r2, r2, r8
 8000b3a:	ea83 0309 	eor.w	r3, r3, r9
 8000b3e:	ea84 040a 	eor.w	r4, r4, sl
 8000b42:	ea85 050b 	eor.w	r5, r5, fp
 8000b46:	f8cc 0000 	str.w	r0, [ip]
 8000b4a:	f8cc 1004 	str.w	r1, [ip, #4]
 8000b4e:	f8cc 2008 	str.w	r2, [ip, #8]
 8000b52:	f8cc 300c 	str.w	r3, [ip, #12]
 8000b56:	f8cc 4010 	str.w	r4, [ip, #16]
 8000b5a:	f8cc 5014 	str.w	r5, [ip, #20]
 8000b5e:	466f      	mov	r7, sp
			"str r4, [r12, #16];"
			"str r5, [r12, #20];"

			"mov r7, sp;"			//put stack pointer back to register 7
	);
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <arc>:

void arc(uint32_t *rc){					//Add round constant with bitslice
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	asm(
 8000b74:	4651      	mov	r1, sl
 8000b76:	464a      	mov	r2, r9
 8000b78:	4663      	mov	r3, ip
 8000b7a:	4684      	mov	ip, r0
 8000b7c:	4658      	mov	r0, fp
 8000b7e:	f8dc 6000 	ldr.w	r6, [ip]
 8000b82:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8000b86:	f8dc 8008 	ldr.w	r8, [ip, #8]
 8000b8a:	f8dc 900c 	ldr.w	r9, [ip, #12]
 8000b8e:	f8dc a010 	ldr.w	sl, [ip, #16]
 8000b92:	f8dc b014 	ldr.w	fp, [ip, #20]
 8000b96:	ea80 0006 	eor.w	r0, r0, r6
 8000b9a:	ea81 0107 	eor.w	r1, r1, r7
 8000b9e:	ea82 0208 	eor.w	r2, r2, r8
 8000ba2:	ea83 0309 	eor.w	r3, r3, r9
 8000ba6:	ea84 040a 	eor.w	r4, r4, sl
 8000baa:	ea85 050b 	eor.w	r5, r5, fp
 8000bae:	466f      	mov	r7, sp
 8000bb0:	4683      	mov	fp, r0
 8000bb2:	469c      	mov	ip, r3
 8000bb4:	468a      	mov	sl, r1
 8000bb6:	4691      	mov	r9, r2
			"mov r11, r0;"				//store r0 in r11
			"mov r12, r3;"				//store r3 in r12
			"mov r10, r1;"				//store r1 in r10
			"mov r9, r2;"				//store r2 in r9
	);
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc4:	b5b0      	push	{r4, r5, r7, lr}
 8000bc6:	b0e6      	sub	sp, #408	; 0x198
 8000bc8:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  *ARM_CM_DEMCR     =  (*ARM_CM_DEMCR) | 0x01000000;  // Set bit 24
 8000bca:	4ba3      	ldr	r3, [pc, #652]	; (8000e58 <main+0x294>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4aa2      	ldr	r2, [pc, #648]	; (8000e58 <main+0x294>)
 8000bd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bd4:	6013      	str	r3, [r2, #0]
  *ARM_CM_DWT_CTRL = (*ARM_CM_DWT_CTRL) | 0x00000001 ;
 8000bd6:	4ba1      	ldr	r3, [pc, #644]	; (8000e5c <main+0x298>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4aa0      	ldr	r2, [pc, #640]	; (8000e5c <main+0x298>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be2:	f000 fcc8 	bl	8001576 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be6:	f000 f95b 	bl	8000ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bea:	f000 f9d9 	bl	8000fa0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000bee:	f000 f9ab 	bl	8000f48 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /*Plaintext in regular representation*/
    uint32_t Plaintext[6] = {0xA13A6324, 0x51070E43, 0x82A27F26, 0xA40682F3, 0xFE9FF680, 0x28D24FDB};
 8000bf2:	4b9b      	ldr	r3, [pc, #620]	; (8000e60 <main+0x29c>)
 8000bf4:	f507 74b6 	add.w	r4, r7, #364	; 0x16c
 8000bf8:	461d      	mov	r5, r3
 8000bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c02:	e884 0003 	stmia.w	r4, {r0, r1}

  /*All Keys are in regular representation*/
    uint32_t Keys[8][6] = {{0x764C4F62, 0x54E1BFF2, 0x08E95862, 0x428FAED0, 0x1584F420, 0x7A7E8477},//;		//k[0]	//master key
 8000c06:	4a97      	ldr	r2, [pc, #604]	; (8000e64 <main+0x2a0>)
 8000c08:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	22c0      	movs	r2, #192	; 0xc0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 f865 	bl	8003ce0 <memcpy>
  /*  uint32_t Key4[6] =*/ {0x0E7215A4, 0xFEA258FC, 0x0C7756CE, 0xEFC054C1, 0xB5702A6B, 0xD062620D},//;		//k[4]
  /*  uint32_t Key5[6] =*/ {0x0C9CE48B, 0xCEEB20AB, 0x3CE7B10A, 0xC3D5569A, 0x111BC989, 0x9E55D190},//;		//k[5]
  /*  uint32_t Key6[6] =*/ {0x4514C4EC, 0xE56EFA5D, 0x6236C89A, 0xF240F1F2, 0x260D6894, 0x27571A6A},//;		//k[6]
  /*  uint32_t Key7[6] =*/ {0x8996DF99, 0x9A40DC4E, 0x818009C0, 0x8134CF53, 0x2AADBFFC, 0x32F5D30B}};//;		//k[7]	//final key

    uint32_t Rc[6][6] = {{0X3903501C,	0X22145A05,	0XB46705B0,	0X2269408A,	0X5B9954CE, 0XE150791E},
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	4a93      	ldr	r2, [pc, #588]	; (8000e68 <main+0x2a4>)
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	4611      	mov	r1, r2
 8000c20:	2390      	movs	r3, #144	; 0x90
 8000c22:	461a      	mov	r2, r3
 8000c24:	f003 f85c 	bl	8003ce0 <memcpy>
    	  	  	  	  	   {0XBF3984A2,	0XA5B365CD,	0X5D54B65F,	0X0FF7E9EE,	0X4012012D,	0X1A5D9CD5},
    	  	  	  	  	   {0X8EB8AFF6,	0XC16D9463,	0X1DDB3CDA,	0XA19C9865,	0X535F36D7,	0X5F9F7FAC},
    	  	  	  	  	   {0XE17ADECE,	0X3CC44C83,	0X85CCD8E4,	0XC7B3B8D5,	0XE481006D,	0X4CC7691C},
    	  	  	  	  	   {0X7873963C,	0XC98A9BB3,	0X8006F8E7,	0X6F7CBBA0,	0X4DEF0A1C,	0X0785D9AE}};

    uint32_t Ciphertext[6]= {0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	6053      	str	r3, [r2, #4]
 8000c32:	6093      	str	r3, [r2, #8]
 8000c34:	60d3      	str	r3, [r2, #12]
 8000c36:	6113      	str	r3, [r2, #16]
 8000c38:	6153      	str	r3, [r2, #20]

    serial_out("Speedy encryption begin using bitslice and ASM", NULL, NULL, NULL, NULL, NULL, NULL, NULL);
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	9303      	str	r3, [sp, #12]
 8000c3e:	2300      	movs	r3, #0
 8000c40:	9302      	str	r3, [sp, #8]
 8000c42:	2300      	movs	r3, #0
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	2300      	movs	r3, #0
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4886      	ldr	r0, [pc, #536]	; (8000e6c <main+0x2a8>)
 8000c52:	f000 fa4f 	bl	80010f4 <serial_out>
    serial_out("Plaintext[0] = ", (uint8_t*)&Plaintext[0], (uint8_t*)&Plaintext[1], (uint8_t*)&Plaintext[2], (uint8_t*)&Plaintext[3], (uint8_t*)&Plaintext[4], (uint8_t*)&Plaintext[5], NULL);
 8000c56:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8000c5a:	f103 0008 	add.w	r0, r3, #8
 8000c5e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8000c62:	1d1a      	adds	r2, r3, #4
 8000c64:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8000c68:	2300      	movs	r3, #0
 8000c6a:	9303      	str	r3, [sp, #12]
 8000c6c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8000c70:	3314      	adds	r3, #20
 8000c72:	9302      	str	r3, [sp, #8]
 8000c74:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8000c78:	3310      	adds	r3, #16
 8000c7a:	9301      	str	r3, [sp, #4]
 8000c7c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8000c80:	330c      	adds	r3, #12
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	4603      	mov	r3, r0
 8000c86:	487a      	ldr	r0, [pc, #488]	; (8000e70 <main+0x2ac>)
 8000c88:	f000 fa34 	bl	80010f4 <serial_out>
    serial_out("Key = ", (uint8_t*)&Keys[0][0], (uint8_t*)&Keys[0][1], (uint8_t*)&Keys[0][2], (uint8_t*)&Keys[0][3], (uint8_t*)&Keys[0][4], (uint8_t*)&Keys[0][5], NULL);
 8000c8c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c90:	f103 0008 	add.w	r0, r3, #8
 8000c94:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c98:	1d1a      	adds	r2, r3, #4
 8000c9a:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	9303      	str	r3, [sp, #12]
 8000ca2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ca6:	3314      	adds	r3, #20
 8000ca8:	9302      	str	r3, [sp, #8]
 8000caa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cae:	3310      	adds	r3, #16
 8000cb0:	9301      	str	r3, [sp, #4]
 8000cb2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cb6:	330c      	adds	r3, #12
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	4603      	mov	r3, r0
 8000cbc:	486d      	ldr	r0, [pc, #436]	; (8000e74 <main+0x2b0>)
 8000cbe:	f000 fa19 	bl	80010f4 <serial_out>


   *ARM_CM_DWT_CYCCNT = 0;
 8000cc2:	4b6d      	ldr	r3, [pc, #436]	; (8000e78 <main+0x2b4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
   startB = *ARM_CM_DWT_CYCCNT;
 8000cc8:	4b6b      	ldr	r3, [pc, #428]	; (8000e78 <main+0x2b4>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a6b      	ldr	r2, [pc, #428]	; (8000e7c <main+0x2b8>)
 8000cce:	6013      	str	r3, [r2, #0]
    //bslice();									//convert data to bitslice representation
    bslice(Keys[0]);
 8000cd0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fc57 	bl	8000588 <bslice>
    bslice(Keys[1]);
 8000cda:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cde:	3318      	adds	r3, #24
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fc51 	bl	8000588 <bslice>
    bslice(Keys[2]);
 8000ce6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cea:	3330      	adds	r3, #48	; 0x30
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fc4b 	bl	8000588 <bslice>
    bslice(Keys[3]);
 8000cf2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cf6:	3348      	adds	r3, #72	; 0x48
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fc45 	bl	8000588 <bslice>
    bslice(Keys[4]);
 8000cfe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d02:	3360      	adds	r3, #96	; 0x60
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fc3f 	bl	8000588 <bslice>
    bslice(Keys[5]);
 8000d0a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d0e:	3378      	adds	r3, #120	; 0x78
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fc39 	bl	8000588 <bslice>
    bslice(Keys[6]);
 8000d16:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d1a:	3390      	adds	r3, #144	; 0x90
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fc33 	bl	8000588 <bslice>
    bslice(Keys[7]);
 8000d22:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d26:	33a8      	adds	r3, #168	; 0xa8
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fc2d 	bl	8000588 <bslice>
    bslice(Plaintext);
 8000d2e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fc28 	bl	8000588 <bslice>

    stopB  = *ARM_CM_DWT_CYCCNT;
 8000d38:	4b4f      	ldr	r3, [pc, #316]	; (8000e78 <main+0x2b4>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a50      	ldr	r2, [pc, #320]	; (8000e80 <main+0x2bc>)
 8000d3e:	6013      	str	r3, [r2, #0]
    deltaB = stopB - startB;
 8000d40:	4b4f      	ldr	r3, [pc, #316]	; (8000e80 <main+0x2bc>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b4d      	ldr	r3, [pc, #308]	; (8000e7c <main+0x2b8>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b4d      	ldr	r3, [pc, #308]	; (8000e84 <main+0x2c0>)
 8000d4e:	601a      	str	r2, [r3, #0]

    *ARM_CM_DWT_CYCCNT = 0;
 8000d50:	4b49      	ldr	r3, [pc, #292]	; (8000e78 <main+0x2b4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
    startE = *ARM_CM_DWT_CYCCNT;
 8000d56:	4b48      	ldr	r3, [pc, #288]	; (8000e78 <main+0x2b4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a4b      	ldr	r2, [pc, #300]	; (8000e88 <main+0x2c4>)
 8000d5c:	6013      	str	r3, [r2, #0]

    for(int i = 0; i < NR; i++){				//encryption begin
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000d64:	e03d      	b.n	8000de2 <main+0x21e>
  	  ark(Keys[i]);								// Add round key
 8000d66:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8000d6a:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8000d6e:	4613      	mov	r3, r2
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	4413      	add	r3, r2
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	440b      	add	r3, r1
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fea3 	bl	8000ac4 <ark>
  	  sbox();									// substitution box
 8000d7e:	f7ff fdc0 	bl	8000902 <sbox>
  	  shiftcolumns();							// shift columns
 8000d82:	f7ff fe3a 	bl	80009fa <shiftcolumns>
  	  sbox();									// substitution box
 8000d86:	f7ff fdbc 	bl	8000902 <sbox>
  	  if(i <= NR-2){
 8000d8a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000d8e:	2b05      	cmp	r3, #5
 8000d90:	dc0f      	bgt.n	8000db2 <main+0x1ee>
  		  shiftcolumns();						// shift columns
 8000d92:	f7ff fe32 	bl	80009fa <shiftcolumns>
  		  mixcolumns();							// mix columns
 8000d96:	f7ff fe42 	bl	8000a1e <mixcolumns>
  		  arc(Rc[i]);							// add round constant
 8000d9a:	f107 011c 	add.w	r1, r7, #28
 8000d9e:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8000da2:	4613      	mov	r3, r2
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	4413      	add	r3, r2
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	440b      	add	r3, r1
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fedd 	bl	8000b6c <arc>
  	  }
  	  if(i == (NR - 1)){
 8000db2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d10e      	bne.n	8000dd8 <main+0x214>
  		  lark(Keys[i+1], Ciphertext);			// last add round key, here the cipher text is stored in memory
 8000dba:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000dbe:	1c5a      	adds	r2, r3, #1
 8000dc0:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	4413      	add	r3, r2
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	440b      	add	r3, r1
 8000dce:	1d3a      	adds	r2, r7, #4
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fe9e 	bl	8000b14 <lark>
    for(int i = 0; i < NR; i++){				//encryption begin
 8000dd8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000ddc:	3301      	adds	r3, #1
 8000dde:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000de2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	ddbd      	ble.n	8000d66 <main+0x1a2>
  	  }
    }

    stopE  = *ARM_CM_DWT_CYCCNT;
 8000dea:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <main+0x2b4>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a27      	ldr	r2, [pc, #156]	; (8000e8c <main+0x2c8>)
 8000df0:	6013      	str	r3, [r2, #0]
   	deltaE = stopE - startE;
 8000df2:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <main+0x2c8>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <main+0x2c4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <main+0x2cc>)
 8000e00:	601a      	str	r2, [r3, #0]

   	serial_out("Done! ", NULL, NULL, NULL, NULL, NULL, NULL, NULL );
 8000e02:	2300      	movs	r3, #0
 8000e04:	9303      	str	r3, [sp, #12]
 8000e06:	2300      	movs	r3, #0
 8000e08:	9302      	str	r3, [sp, #8]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	9301      	str	r3, [sp, #4]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2300      	movs	r3, #0
 8000e14:	2200      	movs	r2, #0
 8000e16:	2100      	movs	r1, #0
 8000e18:	481e      	ldr	r0, [pc, #120]	; (8000e94 <main+0x2d0>)
 8000e1a:	f000 f96b 	bl	80010f4 <serial_out>

    serial_out("Bitslice Clock cycles = ", NULL, NULL, NULL, NULL, NULL, NULL, &deltaB);
 8000e1e:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <main+0x2c0>)
 8000e20:	9303      	str	r3, [sp, #12]
 8000e22:	2300      	movs	r3, #0
 8000e24:	9302      	str	r3, [sp, #8]
 8000e26:	2300      	movs	r3, #0
 8000e28:	9301      	str	r3, [sp, #4]
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	2200      	movs	r2, #0
 8000e32:	2100      	movs	r1, #0
 8000e34:	4818      	ldr	r0, [pc, #96]	; (8000e98 <main+0x2d4>)
 8000e36:	f000 f95d 	bl	80010f4 <serial_out>
    serial_out("Encryption Clock cycles = ", NULL, NULL, NULL, NULL, NULL, NULL, &deltaE);
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <main+0x2cc>)
 8000e3c:	9303      	str	r3, [sp, #12]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	9302      	str	r3, [sp, #8]
 8000e42:	2300      	movs	r3, #0
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	2300      	movs	r3, #0
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4812      	ldr	r0, [pc, #72]	; (8000e9c <main+0x2d8>)
 8000e52:	f000 f94f 	bl	80010f4 <serial_out>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <main+0x292>
 8000e58:	e000edfc 	.word	0xe000edfc
 8000e5c:	e0001000 	.word	0xe0001000
 8000e60:	080045ec 	.word	0x080045ec
 8000e64:	08004604 	.word	0x08004604
 8000e68:	080046c4 	.word	0x080046c4
 8000e6c:	08004564 	.word	0x08004564
 8000e70:	08004594 	.word	0x08004594
 8000e74:	080045a4 	.word	0x080045a4
 8000e78:	e0001004 	.word	0xe0001004
 8000e7c:	20000128 	.word	0x20000128
 8000e80:	20000124 	.word	0x20000124
 8000e84:	20000090 	.word	0x20000090
 8000e88:	2000012c 	.word	0x2000012c
 8000e8c:	20000130 	.word	0x20000130
 8000e90:	2000008c 	.word	0x2000008c
 8000e94:	080045ac 	.word	0x080045ac
 8000e98:	080045b4 	.word	0x080045b4
 8000e9c:	080045d0 	.word	0x080045d0

08000ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b096      	sub	sp, #88	; 0x58
 8000ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	2244      	movs	r2, #68	; 0x44
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f002 ff24 	bl	8003cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ec2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ec6:	f000 fe69 	bl	8001b9c <HAL_PWREx_ControlVoltageScaling>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ed0:	f000 fa2c 	bl	800132c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ed4:	2310      	movs	r3, #16
 8000ed6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ee0:	2360      	movs	r3, #96	; 0x60
 8000ee2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000eec:	2301      	movs	r3, #1
 8000eee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 8000ef0:	2347      	movs	r3, #71	; 0x47
 8000ef2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000efc:	2306      	movs	r3, #6
 8000efe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 feaf 	bl	8001c68 <HAL_RCC_OscConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000f10:	f000 fa0c 	bl	800132c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f14:	230f      	movs	r3, #15
 8000f16:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 fac0 	bl	80024b4 <HAL_RCC_ClockConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f3a:	f000 f9f7 	bl	800132c <Error_Handler>
  }
}
 8000f3e:	bf00      	nop
 8000f40:	3758      	adds	r7, #88	; 0x58
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_LPUART1_UART_Init+0x50>)
 8000f4e:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <MX_LPUART1_UART_Init+0x54>)
 8000f50:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_LPUART1_UART_Init+0x50>)
 8000f54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f58:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_LPUART1_UART_Init+0x50>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f60:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <MX_LPUART1_UART_Init+0x50>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_LPUART1_UART_Init+0x50>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <MX_LPUART1_UART_Init+0x50>)
 8000f6e:	220c      	movs	r2, #12
 8000f70:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_LPUART1_UART_Init+0x50>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <MX_LPUART1_UART_Init+0x50>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_LPUART1_UART_Init+0x50>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <MX_LPUART1_UART_Init+0x50>)
 8000f86:	f002 f965 	bl	8003254 <HAL_UART_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000f90:	f000 f9cc 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200000a0 	.word	0x200000a0
 8000f9c:	40008000 	.word	0x40008000

08000fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	4b4b      	ldr	r3, [pc, #300]	; (80010e4 <MX_GPIO_Init+0x144>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	4a4a      	ldr	r2, [pc, #296]	; (80010e4 <MX_GPIO_Init+0x144>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc2:	4b48      	ldr	r3, [pc, #288]	; (80010e4 <MX_GPIO_Init+0x144>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fce:	4b45      	ldr	r3, [pc, #276]	; (80010e4 <MX_GPIO_Init+0x144>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	4a44      	ldr	r2, [pc, #272]	; (80010e4 <MX_GPIO_Init+0x144>)
 8000fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fda:	4b42      	ldr	r3, [pc, #264]	; (80010e4 <MX_GPIO_Init+0x144>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	4b3f      	ldr	r3, [pc, #252]	; (80010e4 <MX_GPIO_Init+0x144>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	4a3e      	ldr	r2, [pc, #248]	; (80010e4 <MX_GPIO_Init+0x144>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff2:	4b3c      	ldr	r3, [pc, #240]	; (80010e4 <MX_GPIO_Init+0x144>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ffe:	4b39      	ldr	r3, [pc, #228]	; (80010e4 <MX_GPIO_Init+0x144>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	4a38      	ldr	r2, [pc, #224]	; (80010e4 <MX_GPIO_Init+0x144>)
 8001004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100a:	4b36      	ldr	r3, [pc, #216]	; (80010e4 <MX_GPIO_Init+0x144>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001016:	f000 fe17 	bl	8001c48 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b32      	ldr	r3, [pc, #200]	; (80010e4 <MX_GPIO_Init+0x144>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	4a31      	ldr	r2, [pc, #196]	; (80010e4 <MX_GPIO_Init+0x144>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001026:	4b2f      	ldr	r3, [pc, #188]	; (80010e4 <MX_GPIO_Init+0x144>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001038:	482b      	ldr	r0, [pc, #172]	; (80010e8 <MX_GPIO_Init+0x148>)
 800103a:	f000 fd89 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2140      	movs	r1, #64	; 0x40
 8001042:	482a      	ldr	r0, [pc, #168]	; (80010ec <MX_GPIO_Init+0x14c>)
 8001044:	f000 fd84 	bl	8001b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800104c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800104e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	4824      	ldr	r0, [pc, #144]	; (80010f0 <MX_GPIO_Init+0x150>)
 8001060:	f000 fbe4 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001064:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	481a      	ldr	r0, [pc, #104]	; (80010e8 <MX_GPIO_Init+0x148>)
 800107e:	f000 fbd5 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001082:	2320      	movs	r3, #32
 8001084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4815      	ldr	r0, [pc, #84]	; (80010ec <MX_GPIO_Init+0x14c>)
 8001096:	f000 fbc9 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800109a:	2340      	movs	r3, #64	; 0x40
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	480e      	ldr	r0, [pc, #56]	; (80010ec <MX_GPIO_Init+0x14c>)
 80010b2:	f000 fbbb 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010b6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010c8:	230a      	movs	r3, #10
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d6:	f000 fba9 	bl	800182c <HAL_GPIO_Init>

}
 80010da:	bf00      	nop
 80010dc:	3728      	adds	r7, #40	; 0x28
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000
 80010e8:	48000400 	.word	0x48000400
 80010ec:	48001800 	.word	0x48001800
 80010f0:	48000800 	.word	0x48000800

080010f4 <serial_out>:

/* USER CODE BEGIN 4 */
void serial_out(char *label, uint8_t *dat0, uint8_t *dat1, uint8_t *dat2, uint8_t *dat3, uint8_t *dat4, uint8_t *dat5, int *i){
 80010f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f6:	b0cb      	sub	sp, #300	; 0x12c
 80010f8:	af18      	add	r7, sp, #96	; 0x60
 80010fa:	6578      	str	r0, [r7, #84]	; 0x54
 80010fc:	6539      	str	r1, [r7, #80]	; 0x50
 80010fe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001100:	64bb      	str	r3, [r7, #72]	; 0x48

	uint16_t sz = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	char m[MAX_BUFF];

	if((label != NULL) && (dat0 != NULL) && (dat1 != NULL) && (dat2 != NULL) && (dat3 != NULL) && (dat4 != NULL) && (dat5 != NULL) && (i == NULL)){
 8001108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 80b4 	beq.w	8001278 <serial_out+0x184>
 8001110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 80b0 	beq.w	8001278 <serial_out+0x184>
 8001118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 80ac 	beq.w	8001278 <serial_out+0x184>
 8001120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 80a8 	beq.w	8001278 <serial_out+0x184>
 8001128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 80a3 	beq.w	8001278 <serial_out+0x184>
 8001132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 809e 	beq.w	8001278 <serial_out+0x184>
 800113c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001140:	2b00      	cmp	r3, #0
 8001142:	f000 8099 	beq.w	8001278 <serial_out+0x184>
 8001146:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800114a:	2b00      	cmp	r3, #0
 800114c:	f040 8094 	bne.w	8001278 <serial_out+0x184>
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
		label, dat0[3], dat0[2], dat0[1], dat0[0],
 8001150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001152:	3303      	adds	r3, #3
 8001154:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 8001156:	469c      	mov	ip, r3
		label, dat0[3], dat0[2], dat0[1], dat0[0],
 8001158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800115a:	3302      	adds	r3, #2
 800115c:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 800115e:	647b      	str	r3, [r7, #68]	; 0x44
		label, dat0[3], dat0[2], dat0[1], dat0[0],
 8001160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001162:	3301      	adds	r3, #1
 8001164:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 8001166:	643b      	str	r3, [r7, #64]	; 0x40
		label, dat0[3], dat0[2], dat0[1], dat0[0],
 8001168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800116a:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 800116c:	63fb      	str	r3, [r7, #60]	; 0x3c
			   dat1[3], dat1[2], dat1[1], dat1[0],
 800116e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001170:	3303      	adds	r3, #3
 8001172:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 8001174:	63bb      	str	r3, [r7, #56]	; 0x38
			   dat1[3], dat1[2], dat1[1], dat1[0],
 8001176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001178:	3302      	adds	r3, #2
 800117a:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 800117c:	637b      	str	r3, [r7, #52]	; 0x34
			   dat1[3], dat1[2], dat1[1], dat1[0],
 800117e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001180:	3301      	adds	r3, #1
 8001182:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 8001184:	633b      	str	r3, [r7, #48]	; 0x30
			   dat1[3], dat1[2], dat1[1], dat1[0],
 8001186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001188:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
			   dat2[3], dat2[2], dat2[1], dat2[0],
 800118c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800118e:	3303      	adds	r3, #3
 8001190:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
			   dat2[3], dat2[2], dat2[1], dat2[0],
 8001194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001196:	3302      	adds	r3, #2
 8001198:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
			   dat2[3], dat2[2], dat2[1], dat2[0],
 800119c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800119e:	3301      	adds	r3, #1
 80011a0:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 80011a2:	623b      	str	r3, [r7, #32]
			   dat2[3], dat2[2], dat2[1], dat2[0],
 80011a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80011a6:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 80011a8:	61fb      	str	r3, [r7, #28]
			   dat3[3], dat3[2], dat3[1], dat3[0],
 80011aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80011ae:	3303      	adds	r3, #3
 80011b0:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 80011b2:	61bb      	str	r3, [r7, #24]
			   dat3[3], dat3[2], dat3[1], dat3[0],
 80011b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80011b8:	3302      	adds	r3, #2
 80011ba:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 80011bc:	617b      	str	r3, [r7, #20]
			   dat3[3], dat3[2], dat3[1], dat3[0],
 80011be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80011c2:	3301      	adds	r3, #1
 80011c4:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 80011c6:	613b      	str	r3, [r7, #16]
			   dat3[3], dat3[2], dat3[1], dat3[0],
 80011c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80011cc:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 80011ce:	60fb      	str	r3, [r7, #12]
			   dat4[3], dat4[2], dat4[1], dat4[0],
 80011d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80011d4:	3303      	adds	r3, #3
 80011d6:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 80011d8:	60bb      	str	r3, [r7, #8]
			   dat4[3], dat4[2], dat4[1], dat4[0],
 80011da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80011de:	3302      	adds	r3, #2
 80011e0:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 80011e2:	607b      	str	r3, [r7, #4]
			   dat4[3], dat4[2], dat4[1], dat4[0],
 80011e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80011e8:	3301      	adds	r3, #1
 80011ea:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 80011ec:	461e      	mov	r6, r3
			   dat4[3], dat4[2], dat4[1], dat4[0],
 80011ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80011f2:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 80011f4:	461d      	mov	r5, r3
			   dat5[3], dat5[2], dat5[1], dat5[0] );
 80011f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80011fa:	3303      	adds	r3, #3
 80011fc:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 80011fe:	461c      	mov	r4, r3
			   dat5[3], dat5[2], dat5[1], dat5[0] );
 8001200:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001204:	3302      	adds	r3, #2
 8001206:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 8001208:	4619      	mov	r1, r3
			   dat5[3], dat5[2], dat5[1], dat5[0] );
 800120a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800120e:	3301      	adds	r3, #1
 8001210:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 8001212:	461a      	mov	r2, r3
			   dat5[3], dat5[2], dat5[1], dat5[0] );
 8001214:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001218:	781b      	ldrb	r3, [r3, #0]
		sprintf(m, "%s %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X \r\n",
 800121a:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800121e:	9316      	str	r3, [sp, #88]	; 0x58
 8001220:	9215      	str	r2, [sp, #84]	; 0x54
 8001222:	9114      	str	r1, [sp, #80]	; 0x50
 8001224:	9413      	str	r4, [sp, #76]	; 0x4c
 8001226:	9512      	str	r5, [sp, #72]	; 0x48
 8001228:	9611      	str	r6, [sp, #68]	; 0x44
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	9210      	str	r2, [sp, #64]	; 0x40
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	920f      	str	r2, [sp, #60]	; 0x3c
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	920e      	str	r2, [sp, #56]	; 0x38
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	920d      	str	r2, [sp, #52]	; 0x34
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	920c      	str	r2, [sp, #48]	; 0x30
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	920b      	str	r2, [sp, #44]	; 0x2c
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	920a      	str	r2, [sp, #40]	; 0x28
 8001246:	6a3a      	ldr	r2, [r7, #32]
 8001248:	9209      	str	r2, [sp, #36]	; 0x24
 800124a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800124c:	9208      	str	r2, [sp, #32]
 800124e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001250:	9207      	str	r2, [sp, #28]
 8001252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001254:	9206      	str	r2, [sp, #24]
 8001256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001258:	9205      	str	r2, [sp, #20]
 800125a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800125c:	9204      	str	r2, [sp, #16]
 800125e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001260:	9203      	str	r2, [sp, #12]
 8001262:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001264:	9202      	str	r2, [sp, #8]
 8001266:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001268:	9201      	str	r2, [sp, #4]
 800126a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	4663      	mov	r3, ip
 8001270:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001272:	492a      	ldr	r1, [pc, #168]	; (800131c <serial_out+0x228>)
 8001274:	f002 fd4a 	bl	8003d0c <siprintf>
	}

	if((label != NULL) && (i != NULL)){    // print string and integer //&& (dat0 = NULL) && (dat1 = NULL) && (dat2 = NULL) && (dat3 = NULL) && (dat4 = NULL) && (dat5 = NULL) && (i != NULL)){    // print string and integer
 8001278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800127a:	2b00      	cmp	r3, #0
 800127c:	d00c      	beq.n	8001298 <serial_out+0x1a4>
 800127e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001282:	2b00      	cmp	r3, #0
 8001284:	d008      	beq.n	8001298 <serial_out+0x1a4>
		sprintf(m, "%s %i \r\n", label, *i);
 8001286:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001290:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001292:	4923      	ldr	r1, [pc, #140]	; (8001320 <serial_out+0x22c>)
 8001294:	f002 fd3a 	bl	8003d0c <siprintf>
	}

	if((label != NULL) && (dat0 == NULL) && (dat1 == NULL) && (dat2 == NULL) && (dat3 == NULL) && (dat4 == NULL) && (dat5 == NULL) && (i == NULL)){    // print the string label
 8001298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800129a:	2b00      	cmp	r3, #0
 800129c:	d01f      	beq.n	80012de <serial_out+0x1ea>
 800129e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11c      	bne.n	80012de <serial_out+0x1ea>
 80012a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d119      	bne.n	80012de <serial_out+0x1ea>
 80012aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d116      	bne.n	80012de <serial_out+0x1ea>
 80012b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d112      	bne.n	80012de <serial_out+0x1ea>
 80012b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d10e      	bne.n	80012de <serial_out+0x1ea>
 80012c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d10a      	bne.n	80012de <serial_out+0x1ea>
 80012c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d106      	bne.n	80012de <serial_out+0x1ea>
		sprintf(m, "%s \r\n", label);
 80012d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80012d6:	4913      	ldr	r1, [pc, #76]	; (8001324 <serial_out+0x230>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f002 fd17 	bl	8003d0c <siprintf>
	}

	sz = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	do{
		sz++;
 80012e4:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80012e8:	3301      	adds	r3, #1
 80012ea:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	}while(m[sz]!='\0');
 80012ee:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80012f2:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80012f6:	4413      	add	r3, r2
 80012f8:	f813 3c70 	ldrb.w	r3, [r3, #-112]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f1      	bne.n	80012e4 <serial_out+0x1f0>

	HAL_UART_Transmit(&hlpuart1, (uint8_t *)m, sz, HAL_MAX_DELAY);
 8001300:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 8001304:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800130c:	4806      	ldr	r0, [pc, #24]	; (8001328 <serial_out+0x234>)
 800130e:	f001 ffef 	bl	80032f0 <HAL_UART_Transmit>
}
 8001312:	bf00      	nop
 8001314:	37cc      	adds	r7, #204	; 0xcc
 8001316:	46bd      	mov	sp, r7
 8001318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800131a:	bf00      	nop
 800131c:	08004754 	.word	0x08004754
 8001320:	080047c0 	.word	0x080047c0
 8001324:	080047cc 	.word	0x080047cc
 8001328:	200000a0 	.word	0x200000a0

0800132c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001330:	b672      	cpsid	i
}
 8001332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001334:	e7fe      	b.n	8001334 <Error_Handler+0x8>
	...

08001338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <HAL_MspInit+0x44>)
 8001340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001342:	4a0e      	ldr	r2, [pc, #56]	; (800137c <HAL_MspInit+0x44>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6613      	str	r3, [r2, #96]	; 0x60
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <HAL_MspInit+0x44>)
 800134c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_MspInit+0x44>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	4a08      	ldr	r2, [pc, #32]	; (800137c <HAL_MspInit+0x44>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001360:	6593      	str	r3, [r2, #88]	; 0x58
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_MspInit+0x44>)
 8001364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000

08001380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b0ac      	sub	sp, #176	; 0xb0
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	228c      	movs	r2, #140	; 0x8c
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f002 fcab 	bl	8003cfc <memset>
  if(huart->Instance==LPUART1)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a22      	ldr	r2, [pc, #136]	; (8001434 <HAL_UART_MspInit+0xb4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d13d      	bne.n	800142c <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80013b0:	2320      	movs	r3, #32
 80013b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	4618      	mov	r0, r3
 80013be:	f001 fa7f 	bl	80028c0 <HAL_RCCEx_PeriphCLKConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013c8:	f7ff ffb0 	bl	800132c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <HAL_UART_MspInit+0xb8>)
 80013ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d0:	4a19      	ldr	r2, [pc, #100]	; (8001438 <HAL_UART_MspInit+0xb8>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80013d8:	4b17      	ldr	r3, [pc, #92]	; (8001438 <HAL_UART_MspInit+0xb8>)
 80013da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <HAL_UART_MspInit+0xb8>)
 80013e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e8:	4a13      	ldr	r2, [pc, #76]	; (8001438 <HAL_UART_MspInit+0xb8>)
 80013ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_UART_MspInit+0xb8>)
 80013f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80013fc:	f000 fc24 	bl	8001c48 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001400:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001404:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	2302      	movs	r3, #2
 800140a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800141a:	2308      	movs	r3, #8
 800141c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001420:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001424:	4619      	mov	r1, r3
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <HAL_UART_MspInit+0xbc>)
 8001428:	f000 fa00 	bl	800182c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800142c:	bf00      	nop
 800142e:	37b0      	adds	r7, #176	; 0xb0
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40008000 	.word	0x40008000
 8001438:	40021000 	.word	0x40021000
 800143c:	48001800 	.word	0x48001800

08001440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <NMI_Handler+0x4>

08001446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <HardFault_Handler+0x4>

0800144c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <MemManage_Handler+0x4>

08001452 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <BusFault_Handler+0x4>

08001458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <UsageFault_Handler+0x4>

0800145e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148c:	f000 f8c8 	bl	8001620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}

08001494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800149c:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <_sbrk+0x5c>)
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <_sbrk+0x60>)
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <_sbrk+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d102      	bne.n	80014b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <_sbrk+0x64>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	; (80014fc <_sbrk+0x68>)
 80014b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d207      	bcs.n	80014d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c4:	f002 fbe2 	bl	8003c8c <__errno>
 80014c8:	4603      	mov	r3, r0
 80014ca:	220c      	movs	r2, #12
 80014cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014d2:	e009      	b.n	80014e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <_sbrk+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014da:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <_sbrk+0x64>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <_sbrk+0x64>)
 80014e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014e6:	68fb      	ldr	r3, [r7, #12]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20050000 	.word	0x20050000
 80014f4:	00000400 	.word	0x00000400
 80014f8:	20000094 	.word	0x20000094
 80014fc:	20000148 	.word	0x20000148

08001500 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <SystemInit+0x20>)
 8001506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800150a:	4a05      	ldr	r2, [pc, #20]	; (8001520 <SystemInit+0x20>)
 800150c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001524:	f8df d034 	ldr.w	sp, [pc, #52]	; 800155c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001528:	f7ff ffea 	bl	8001500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800152c:	480c      	ldr	r0, [pc, #48]	; (8001560 <LoopForever+0x6>)
  ldr r1, =_edata
 800152e:	490d      	ldr	r1, [pc, #52]	; (8001564 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <LoopForever+0xe>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001534:	e002      	b.n	800153c <LoopCopyDataInit>

08001536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153a:	3304      	adds	r3, #4

0800153c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800153c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001540:	d3f9      	bcc.n	8001536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001544:	4c0a      	ldr	r4, [pc, #40]	; (8001570 <LoopForever+0x16>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001548:	e001      	b.n	800154e <LoopFillZerobss>

0800154a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800154c:	3204      	adds	r2, #4

0800154e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001550:	d3fb      	bcc.n	800154a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001552:	f002 fba1 	bl	8003c98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001556:	f7ff fb35 	bl	8000bc4 <main>

0800155a <LoopForever>:

LoopForever:
    b LoopForever
 800155a:	e7fe      	b.n	800155a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800155c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001564:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001568:	08004860 	.word	0x08004860
  ldr r2, =_sbss
 800156c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001570:	20000148 	.word	0x20000148

08001574 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001574:	e7fe      	b.n	8001574 <ADC1_2_IRQHandler>

08001576 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800157c:	2300      	movs	r3, #0
 800157e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001580:	2003      	movs	r0, #3
 8001582:	f000 f91f 	bl	80017c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001586:	2000      	movs	r0, #0
 8001588:	f000 f80e 	bl	80015a8 <HAL_InitTick>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d002      	beq.n	8001598 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	71fb      	strb	r3, [r7, #7]
 8001596:	e001      	b.n	800159c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001598:	f7ff fece 	bl	8001338 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800159c:	79fb      	ldrb	r3, [r7, #7]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015b4:	4b17      	ldr	r3, [pc, #92]	; (8001614 <HAL_InitTick+0x6c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d023      	beq.n	8001604 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015bc:	4b16      	ldr	r3, [pc, #88]	; (8001618 <HAL_InitTick+0x70>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <HAL_InitTick+0x6c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f91d 	bl	8001812 <HAL_SYSTICK_Config>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10f      	bne.n	80015fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b0f      	cmp	r3, #15
 80015e2:	d809      	bhi.n	80015f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e4:	2200      	movs	r2, #0
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015ec:	f000 f8f5 	bl	80017da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015f0:	4a0a      	ldr	r2, [pc, #40]	; (800161c <HAL_InitTick+0x74>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e007      	b.n	8001608 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	e004      	b.n	8001608 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	73fb      	strb	r3, [r7, #15]
 8001602:	e001      	b.n	8001608 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000008 	.word	0x20000008
 8001618:	20000000 	.word	0x20000000
 800161c:	20000004 	.word	0x20000004

08001620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_IncTick+0x20>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_IncTick+0x24>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4413      	add	r3, r2
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <HAL_IncTick+0x24>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000008 	.word	0x20000008
 8001644:	20000134 	.word	0x20000134

08001648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return uwTick;
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <HAL_GetTick+0x14>)
 800164e:	681b      	ldr	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000134 	.word	0x20000134

08001660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800167c:	4013      	ands	r3, r2
 800167e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800168c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001692:	4a04      	ldr	r2, [pc, #16]	; (80016a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	60d3      	str	r3, [r2, #12]
}
 8001698:	bf00      	nop
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	0a1b      	lsrs	r3, r3, #8
 80016b2:	f003 0307 	and.w	r3, r3, #7
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	6039      	str	r1, [r7, #0]
 80016ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db0a      	blt.n	80016ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	490c      	ldr	r1, [pc, #48]	; (8001710 <__NVIC_SetPriority+0x4c>)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	0112      	lsls	r2, r2, #4
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	440b      	add	r3, r1
 80016e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ec:	e00a      	b.n	8001704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4908      	ldr	r1, [pc, #32]	; (8001714 <__NVIC_SetPriority+0x50>)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	3b04      	subs	r3, #4
 80016fc:	0112      	lsls	r2, r2, #4
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	440b      	add	r3, r1
 8001702:	761a      	strb	r2, [r3, #24]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000e100 	.word	0xe000e100
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	; 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f1c3 0307 	rsb	r3, r3, #7
 8001732:	2b04      	cmp	r3, #4
 8001734:	bf28      	it	cs
 8001736:	2304      	movcs	r3, #4
 8001738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3304      	adds	r3, #4
 800173e:	2b06      	cmp	r3, #6
 8001740:	d902      	bls.n	8001748 <NVIC_EncodePriority+0x30>
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3b03      	subs	r3, #3
 8001746:	e000      	b.n	800174a <NVIC_EncodePriority+0x32>
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43da      	mvns	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	401a      	ands	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001760:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	43d9      	mvns	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	4313      	orrs	r3, r2
         );
}
 8001772:	4618      	mov	r0, r3
 8001774:	3724      	adds	r7, #36	; 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001790:	d301      	bcc.n	8001796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001792:	2301      	movs	r3, #1
 8001794:	e00f      	b.n	80017b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001796:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <SysTick_Config+0x40>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179e:	210f      	movs	r1, #15
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017a4:	f7ff ff8e 	bl	80016c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <SysTick_Config+0x40>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ae:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <SysTick_Config+0x40>)
 80017b0:	2207      	movs	r2, #7
 80017b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	e000e010 	.word	0xe000e010

080017c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ff47 	bl	8001660 <__NVIC_SetPriorityGrouping>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017ec:	f7ff ff5c 	bl	80016a8 <__NVIC_GetPriorityGrouping>
 80017f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	6978      	ldr	r0, [r7, #20]
 80017f8:	f7ff ff8e 	bl	8001718 <NVIC_EncodePriority>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff5d 	bl	80016c4 <__NVIC_SetPriority>
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ffb0 	bl	8001780 <SysTick_Config>
 8001820:	4603      	mov	r3, r0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800182c:	b480      	push	{r7}
 800182e:	b087      	sub	sp, #28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800183a:	e166      	b.n	8001b0a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	2101      	movs	r1, #1
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	fa01 f303 	lsl.w	r3, r1, r3
 8001848:	4013      	ands	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 8158 	beq.w	8001b04 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b01      	cmp	r3, #1
 800185e:	d005      	beq.n	800186c <HAL_GPIO_Init+0x40>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d130      	bne.n	80018ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2203      	movs	r2, #3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018a2:	2201      	movs	r2, #1
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	091b      	lsrs	r3, r3, #4
 80018b8:	f003 0201 	and.w	r2, r3, #1
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d017      	beq.n	800190a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	2203      	movs	r2, #3
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d123      	bne.n	800195e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	08da      	lsrs	r2, r3, #3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3208      	adds	r2, #8
 800191e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	220f      	movs	r2, #15
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	691a      	ldr	r2, [r3, #16]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	08da      	lsrs	r2, r3, #3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3208      	adds	r2, #8
 8001958:	6939      	ldr	r1, [r7, #16]
 800195a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	2203      	movs	r2, #3
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 0203 	and.w	r2, r3, #3
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 80b2 	beq.w	8001b04 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a0:	4b61      	ldr	r3, [pc, #388]	; (8001b28 <HAL_GPIO_Init+0x2fc>)
 80019a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a4:	4a60      	ldr	r2, [pc, #384]	; (8001b28 <HAL_GPIO_Init+0x2fc>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6613      	str	r3, [r2, #96]	; 0x60
 80019ac:	4b5e      	ldr	r3, [pc, #376]	; (8001b28 <HAL_GPIO_Init+0x2fc>)
 80019ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019b8:	4a5c      	ldr	r2, [pc, #368]	; (8001b2c <HAL_GPIO_Init+0x300>)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	089b      	lsrs	r3, r3, #2
 80019be:	3302      	adds	r3, #2
 80019c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	220f      	movs	r2, #15
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019e2:	d02b      	beq.n	8001a3c <HAL_GPIO_Init+0x210>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a52      	ldr	r2, [pc, #328]	; (8001b30 <HAL_GPIO_Init+0x304>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d025      	beq.n	8001a38 <HAL_GPIO_Init+0x20c>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a51      	ldr	r2, [pc, #324]	; (8001b34 <HAL_GPIO_Init+0x308>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d01f      	beq.n	8001a34 <HAL_GPIO_Init+0x208>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a50      	ldr	r2, [pc, #320]	; (8001b38 <HAL_GPIO_Init+0x30c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d019      	beq.n	8001a30 <HAL_GPIO_Init+0x204>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a4f      	ldr	r2, [pc, #316]	; (8001b3c <HAL_GPIO_Init+0x310>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d013      	beq.n	8001a2c <HAL_GPIO_Init+0x200>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a4e      	ldr	r2, [pc, #312]	; (8001b40 <HAL_GPIO_Init+0x314>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d00d      	beq.n	8001a28 <HAL_GPIO_Init+0x1fc>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a4d      	ldr	r2, [pc, #308]	; (8001b44 <HAL_GPIO_Init+0x318>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d007      	beq.n	8001a24 <HAL_GPIO_Init+0x1f8>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a4c      	ldr	r2, [pc, #304]	; (8001b48 <HAL_GPIO_Init+0x31c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d101      	bne.n	8001a20 <HAL_GPIO_Init+0x1f4>
 8001a1c:	2307      	movs	r3, #7
 8001a1e:	e00e      	b.n	8001a3e <HAL_GPIO_Init+0x212>
 8001a20:	2308      	movs	r3, #8
 8001a22:	e00c      	b.n	8001a3e <HAL_GPIO_Init+0x212>
 8001a24:	2306      	movs	r3, #6
 8001a26:	e00a      	b.n	8001a3e <HAL_GPIO_Init+0x212>
 8001a28:	2305      	movs	r3, #5
 8001a2a:	e008      	b.n	8001a3e <HAL_GPIO_Init+0x212>
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	e006      	b.n	8001a3e <HAL_GPIO_Init+0x212>
 8001a30:	2303      	movs	r3, #3
 8001a32:	e004      	b.n	8001a3e <HAL_GPIO_Init+0x212>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e002      	b.n	8001a3e <HAL_GPIO_Init+0x212>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <HAL_GPIO_Init+0x212>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	f002 0203 	and.w	r2, r2, #3
 8001a44:	0092      	lsls	r2, r2, #2
 8001a46:	4093      	lsls	r3, r2
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a4e:	4937      	ldr	r1, [pc, #220]	; (8001b2c <HAL_GPIO_Init+0x300>)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3302      	adds	r3, #2
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a5c:	4b3b      	ldr	r3, [pc, #236]	; (8001b4c <HAL_GPIO_Init+0x320>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a80:	4a32      	ldr	r2, [pc, #200]	; (8001b4c <HAL_GPIO_Init+0x320>)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a86:	4b31      	ldr	r3, [pc, #196]	; (8001b4c <HAL_GPIO_Init+0x320>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aaa:	4a28      	ldr	r2, [pc, #160]	; (8001b4c <HAL_GPIO_Init+0x320>)
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ab0:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <HAL_GPIO_Init+0x320>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ad4:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <HAL_GPIO_Init+0x320>)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ada:	4b1c      	ldr	r3, [pc, #112]	; (8001b4c <HAL_GPIO_Init+0x320>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001afe:	4a13      	ldr	r2, [pc, #76]	; (8001b4c <HAL_GPIO_Init+0x320>)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f47f ae91 	bne.w	800183c <HAL_GPIO_Init+0x10>
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
 8001b1e:	371c      	adds	r7, #28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	48000400 	.word	0x48000400
 8001b34:	48000800 	.word	0x48000800
 8001b38:	48000c00 	.word	0x48000c00
 8001b3c:	48001000 	.word	0x48001000
 8001b40:	48001400 	.word	0x48001400
 8001b44:	48001800 	.word	0x48001800
 8001b48:	48001c00 	.word	0x48001c00
 8001b4c:	40010400 	.word	0x40010400

08001b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	807b      	strh	r3, [r7, #2]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b60:	787b      	ldrb	r3, [r7, #1]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b66:	887a      	ldrh	r2, [r7, #2]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b6c:	e002      	b.n	8001b74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b6e:	887a      	ldrh	r2, [r7, #2]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40007000 	.word	0x40007000

08001b9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001baa:	d130      	bne.n	8001c0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bac:	4b23      	ldr	r3, [pc, #140]	; (8001c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bb8:	d038      	beq.n	8001c2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bc2:	4a1e      	ldr	r2, [pc, #120]	; (8001c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bc8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bca:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2232      	movs	r2, #50	; 0x32
 8001bd0:	fb02 f303 	mul.w	r3, r2, r3
 8001bd4:	4a1b      	ldr	r2, [pc, #108]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bda:	0c9b      	lsrs	r3, r3, #18
 8001bdc:	3301      	adds	r3, #1
 8001bde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001be0:	e002      	b.n	8001be8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001be8:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf4:	d102      	bne.n	8001bfc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1f2      	bne.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c08:	d110      	bne.n	8001c2c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e00f      	b.n	8001c2e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c1a:	d007      	beq.n	8001c2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c1c:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c24:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40007000 	.word	0x40007000
 8001c40:	20000000 	.word	0x20000000
 8001c44:	431bde83 	.word	0x431bde83

08001c48 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c56:	6053      	str	r3, [r2, #4]
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40007000 	.word	0x40007000

08001c68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d102      	bne.n	8001c7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	f000 bc16 	b.w	80024a8 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c7c:	4ba0      	ldr	r3, [pc, #640]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c86:	4b9e      	ldr	r3, [pc, #632]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80e4 	beq.w	8001e66 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d007      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x4c>
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2b0c      	cmp	r3, #12
 8001ca8:	f040 808b 	bne.w	8001dc2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	f040 8087 	bne.w	8001dc2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cb4:	4b92      	ldr	r3, [pc, #584]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <HAL_RCC_OscConfig+0x64>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e3ed      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1a      	ldr	r2, [r3, #32]
 8001cd0:	4b8b      	ldr	r3, [pc, #556]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d004      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x7e>
 8001cdc:	4b88      	ldr	r3, [pc, #544]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ce4:	e005      	b.n	8001cf2 <HAL_RCC_OscConfig+0x8a>
 8001ce6:	4b86      	ldr	r3, [pc, #536]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d223      	bcs.n	8001d3e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 fd80 	bl	8002800 <RCC_SetFlashLatencyFromMSIRange>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e3ce      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d0a:	4b7d      	ldr	r3, [pc, #500]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a7c      	ldr	r2, [pc, #496]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001d10:	f043 0308 	orr.w	r3, r3, #8
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b7a      	ldr	r3, [pc, #488]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	4977      	ldr	r1, [pc, #476]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d28:	4b75      	ldr	r3, [pc, #468]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	021b      	lsls	r3, r3, #8
 8001d36:	4972      	ldr	r1, [pc, #456]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
 8001d3c:	e025      	b.n	8001d8a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d3e:	4b70      	ldr	r3, [pc, #448]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a6f      	ldr	r2, [pc, #444]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001d44:	f043 0308 	orr.w	r3, r3, #8
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	4b6d      	ldr	r3, [pc, #436]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	496a      	ldr	r1, [pc, #424]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d5c:	4b68      	ldr	r3, [pc, #416]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	021b      	lsls	r3, r3, #8
 8001d6a:	4965      	ldr	r1, [pc, #404]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d109      	bne.n	8001d8a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fd40 	bl	8002800 <RCC_SetFlashLatencyFromMSIRange>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e38e      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d8a:	f000 fc75 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	4b5b      	ldr	r3, [pc, #364]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	495a      	ldr	r1, [pc, #360]	; (8001f04 <HAL_RCC_OscConfig+0x29c>)
 8001d9c:	5ccb      	ldrb	r3, [r1, r3]
 8001d9e:	f003 031f 	and.w	r3, r3, #31
 8001da2:	fa22 f303 	lsr.w	r3, r2, r3
 8001da6:	4a58      	ldr	r2, [pc, #352]	; (8001f08 <HAL_RCC_OscConfig+0x2a0>)
 8001da8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001daa:	4b58      	ldr	r3, [pc, #352]	; (8001f0c <HAL_RCC_OscConfig+0x2a4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fbfa 	bl	80015a8 <HAL_InitTick>
 8001db4:	4603      	mov	r3, r0
 8001db6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d052      	beq.n	8001e64 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	e372      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d032      	beq.n	8001e30 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dca:	4b4d      	ldr	r3, [pc, #308]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a4c      	ldr	r2, [pc, #304]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dd6:	f7ff fc37 	bl	8001648 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dde:	f7ff fc33 	bl	8001648 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e35b      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001df0:	4b43      	ldr	r3, [pc, #268]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dfc:	4b40      	ldr	r3, [pc, #256]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a3f      	ldr	r2, [pc, #252]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001e02:	f043 0308 	orr.w	r3, r3, #8
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	4b3d      	ldr	r3, [pc, #244]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	493a      	ldr	r1, [pc, #232]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e1a:	4b39      	ldr	r3, [pc, #228]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	021b      	lsls	r3, r3, #8
 8001e28:	4935      	ldr	r1, [pc, #212]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	604b      	str	r3, [r1, #4]
 8001e2e:	e01a      	b.n	8001e66 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e30:	4b33      	ldr	r3, [pc, #204]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a32      	ldr	r2, [pc, #200]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fc04 	bl	8001648 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e44:	f7ff fc00 	bl	8001648 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e328      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e56:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x1dc>
 8001e62:	e000      	b.n	8001e66 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d073      	beq.n	8001f5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_OscConfig+0x21c>
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2b0c      	cmp	r3, #12
 8001e7c:	d10e      	bne.n	8001e9c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d10b      	bne.n	8001e9c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e84:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d063      	beq.n	8001f58 <HAL_RCC_OscConfig+0x2f0>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d15f      	bne.n	8001f58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e305      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea4:	d106      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x24c>
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a15      	ldr	r2, [pc, #84]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e01d      	b.n	8001ef0 <HAL_RCC_OscConfig+0x288>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x270>
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a0f      	ldr	r2, [pc, #60]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a0c      	ldr	r2, [pc, #48]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_OscConfig+0x288>
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a08      	ldr	r2, [pc, #32]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <HAL_RCC_OscConfig+0x298>)
 8001eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d01b      	beq.n	8001f30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fba6 	bl	8001648 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001efe:	e010      	b.n	8001f22 <HAL_RCC_OscConfig+0x2ba>
 8001f00:	40021000 	.word	0x40021000
 8001f04:	080047d4 	.word	0x080047d4
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f10:	f7ff fb9a 	bl	8001648 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	; 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e2c2      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f22:	4baf      	ldr	r3, [pc, #700]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x2a8>
 8001f2e:	e014      	b.n	8001f5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7ff fb8a 	bl	8001648 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f38:	f7ff fb86 	bl	8001648 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	; 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e2ae      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f4a:	4ba5      	ldr	r3, [pc, #660]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x2d0>
 8001f56:	e000      	b.n	8001f5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d060      	beq.n	8002028 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_OscConfig+0x310>
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	2b0c      	cmp	r3, #12
 8001f70:	d119      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d116      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f78:	4b99      	ldr	r3, [pc, #612]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_RCC_OscConfig+0x328>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e28b      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f90:	4b93      	ldr	r3, [pc, #588]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	061b      	lsls	r3, r3, #24
 8001f9e:	4990      	ldr	r1, [pc, #576]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fa4:	e040      	b.n	8002028 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d023      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fae:	4b8c      	ldr	r3, [pc, #560]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a8b      	ldr	r2, [pc, #556]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 8001fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fba:	f7ff fb45 	bl	8001648 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc2:	f7ff fb41 	bl	8001648 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e269      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd4:	4b82      	ldr	r3, [pc, #520]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe0:	4b7f      	ldr	r3, [pc, #508]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	061b      	lsls	r3, r3, #24
 8001fee:	497c      	ldr	r1, [pc, #496]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
 8001ff4:	e018      	b.n	8002028 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff6:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a79      	ldr	r2, [pc, #484]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 8001ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002002:	f7ff fb21 	bl	8001648 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800200a:	f7ff fb1d 	bl	8001648 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e245      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800201c:	4b70      	ldr	r3, [pc, #448]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f0      	bne.n	800200a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d03c      	beq.n	80020ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d01c      	beq.n	8002076 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800203c:	4b68      	ldr	r3, [pc, #416]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 800203e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002042:	4a67      	ldr	r2, [pc, #412]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204c:	f7ff fafc 	bl	8001648 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002054:	f7ff faf8 	bl	8001648 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e220      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002066:	4b5e      	ldr	r3, [pc, #376]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 8002068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0ef      	beq.n	8002054 <HAL_RCC_OscConfig+0x3ec>
 8002074:	e01b      	b.n	80020ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002076:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 8002078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800207c:	4a58      	ldr	r2, [pc, #352]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 800207e:	f023 0301 	bic.w	r3, r3, #1
 8002082:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002086:	f7ff fadf 	bl	8001648 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800208e:	f7ff fadb 	bl	8001648 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e203      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020a0:	4b4f      	ldr	r3, [pc, #316]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 80020a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1ef      	bne.n	800208e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 80a6 	beq.w	8002208 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020bc:	2300      	movs	r3, #0
 80020be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020c0:	4b47      	ldr	r3, [pc, #284]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 80020c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10d      	bne.n	80020e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020cc:	4b44      	ldr	r3, [pc, #272]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d0:	4a43      	ldr	r2, [pc, #268]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 80020d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d6:	6593      	str	r3, [r2, #88]	; 0x58
 80020d8:	4b41      	ldr	r3, [pc, #260]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e4:	2301      	movs	r3, #1
 80020e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e8:	4b3e      	ldr	r3, [pc, #248]	; (80021e4 <HAL_RCC_OscConfig+0x57c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d118      	bne.n	8002126 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f4:	4b3b      	ldr	r3, [pc, #236]	; (80021e4 <HAL_RCC_OscConfig+0x57c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a3a      	ldr	r2, [pc, #232]	; (80021e4 <HAL_RCC_OscConfig+0x57c>)
 80020fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002100:	f7ff faa2 	bl	8001648 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002108:	f7ff fa9e 	bl	8001648 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e1c6      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800211a:	4b32      	ldr	r3, [pc, #200]	; (80021e4 <HAL_RCC_OscConfig+0x57c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d108      	bne.n	8002140 <HAL_RCC_OscConfig+0x4d8>
 800212e:	4b2c      	ldr	r3, [pc, #176]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 8002130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002134:	4a2a      	ldr	r2, [pc, #168]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800213e:	e024      	b.n	800218a <HAL_RCC_OscConfig+0x522>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b05      	cmp	r3, #5
 8002146:	d110      	bne.n	800216a <HAL_RCC_OscConfig+0x502>
 8002148:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214e:	4a24      	ldr	r2, [pc, #144]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 8002150:	f043 0304 	orr.w	r3, r3, #4
 8002154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002158:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 800215a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215e:	4a20      	ldr	r2, [pc, #128]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002168:	e00f      	b.n	800218a <HAL_RCC_OscConfig+0x522>
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002170:	4a1b      	ldr	r2, [pc, #108]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 8002172:	f023 0301 	bic.w	r3, r3, #1
 8002176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800217a:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 800217c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002180:	4a17      	ldr	r2, [pc, #92]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 8002182:	f023 0304 	bic.w	r3, r3, #4
 8002186:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d016      	beq.n	80021c0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002192:	f7ff fa59 	bl	8001648 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002198:	e00a      	b.n	80021b0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219a:	f7ff fa55 	bl	8001648 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e17b      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_RCC_OscConfig+0x578>)
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0ed      	beq.n	800219a <HAL_RCC_OscConfig+0x532>
 80021be:	e01a      	b.n	80021f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c0:	f7ff fa42 	bl	8001648 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021c6:	e00f      	b.n	80021e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c8:	f7ff fa3e 	bl	8001648 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d906      	bls.n	80021e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e164      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021e8:	4ba8      	ldr	r3, [pc, #672]	; (800248c <HAL_RCC_OscConfig+0x824>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1e8      	bne.n	80021c8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021f6:	7ffb      	ldrb	r3, [r7, #31]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d105      	bne.n	8002208 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fc:	4ba3      	ldr	r3, [pc, #652]	; (800248c <HAL_RCC_OscConfig+0x824>)
 80021fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002200:	4aa2      	ldr	r2, [pc, #648]	; (800248c <HAL_RCC_OscConfig+0x824>)
 8002202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002206:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0320 	and.w	r3, r3, #32
 8002210:	2b00      	cmp	r3, #0
 8002212:	d03c      	beq.n	800228e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	2b00      	cmp	r3, #0
 800221a:	d01c      	beq.n	8002256 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800221c:	4b9b      	ldr	r3, [pc, #620]	; (800248c <HAL_RCC_OscConfig+0x824>)
 800221e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002222:	4a9a      	ldr	r2, [pc, #616]	; (800248c <HAL_RCC_OscConfig+0x824>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222c:	f7ff fa0c 	bl	8001648 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002234:	f7ff fa08 	bl	8001648 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e130      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002246:	4b91      	ldr	r3, [pc, #580]	; (800248c <HAL_RCC_OscConfig+0x824>)
 8002248:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0ef      	beq.n	8002234 <HAL_RCC_OscConfig+0x5cc>
 8002254:	e01b      	b.n	800228e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002256:	4b8d      	ldr	r3, [pc, #564]	; (800248c <HAL_RCC_OscConfig+0x824>)
 8002258:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800225c:	4a8b      	ldr	r2, [pc, #556]	; (800248c <HAL_RCC_OscConfig+0x824>)
 800225e:	f023 0301 	bic.w	r3, r3, #1
 8002262:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002266:	f7ff f9ef 	bl	8001648 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800226e:	f7ff f9eb 	bl	8001648 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e113      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002280:	4b82      	ldr	r3, [pc, #520]	; (800248c <HAL_RCC_OscConfig+0x824>)
 8002282:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1ef      	bne.n	800226e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 8107 	beq.w	80024a6 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	2b02      	cmp	r3, #2
 800229e:	f040 80cb 	bne.w	8002438 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022a2:	4b7a      	ldr	r3, [pc, #488]	; (800248c <HAL_RCC_OscConfig+0x824>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f003 0203 	and.w	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d12c      	bne.n	8002310 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	3b01      	subs	r3, #1
 80022c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d123      	bne.n	8002310 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d11b      	bne.n	8002310 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d113      	bne.n	8002310 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f2:	085b      	lsrs	r3, r3, #1
 80022f4:	3b01      	subs	r3, #1
 80022f6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d109      	bne.n	8002310 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	085b      	lsrs	r3, r3, #1
 8002308:	3b01      	subs	r3, #1
 800230a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800230c:	429a      	cmp	r2, r3
 800230e:	d06d      	beq.n	80023ec <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	2b0c      	cmp	r3, #12
 8002314:	d068      	beq.n	80023e8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002316:	4b5d      	ldr	r3, [pc, #372]	; (800248c <HAL_RCC_OscConfig+0x824>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d105      	bne.n	800232e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002322:	4b5a      	ldr	r3, [pc, #360]	; (800248c <HAL_RCC_OscConfig+0x824>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e0ba      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002332:	4b56      	ldr	r3, [pc, #344]	; (800248c <HAL_RCC_OscConfig+0x824>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a55      	ldr	r2, [pc, #340]	; (800248c <HAL_RCC_OscConfig+0x824>)
 8002338:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800233c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800233e:	f7ff f983 	bl	8001648 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002346:	f7ff f97f 	bl	8001648 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e0a7      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002358:	4b4c      	ldr	r3, [pc, #304]	; (800248c <HAL_RCC_OscConfig+0x824>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f0      	bne.n	8002346 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002364:	4b49      	ldr	r3, [pc, #292]	; (800248c <HAL_RCC_OscConfig+0x824>)
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	4b49      	ldr	r3, [pc, #292]	; (8002490 <HAL_RCC_OscConfig+0x828>)
 800236a:	4013      	ands	r3, r2
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002374:	3a01      	subs	r2, #1
 8002376:	0112      	lsls	r2, r2, #4
 8002378:	4311      	orrs	r1, r2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800237e:	0212      	lsls	r2, r2, #8
 8002380:	4311      	orrs	r1, r2
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002386:	0852      	lsrs	r2, r2, #1
 8002388:	3a01      	subs	r2, #1
 800238a:	0552      	lsls	r2, r2, #21
 800238c:	4311      	orrs	r1, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002392:	0852      	lsrs	r2, r2, #1
 8002394:	3a01      	subs	r2, #1
 8002396:	0652      	lsls	r2, r2, #25
 8002398:	4311      	orrs	r1, r2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800239e:	06d2      	lsls	r2, r2, #27
 80023a0:	430a      	orrs	r2, r1
 80023a2:	493a      	ldr	r1, [pc, #232]	; (800248c <HAL_RCC_OscConfig+0x824>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023a8:	4b38      	ldr	r3, [pc, #224]	; (800248c <HAL_RCC_OscConfig+0x824>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a37      	ldr	r2, [pc, #220]	; (800248c <HAL_RCC_OscConfig+0x824>)
 80023ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023b4:	4b35      	ldr	r3, [pc, #212]	; (800248c <HAL_RCC_OscConfig+0x824>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4a34      	ldr	r2, [pc, #208]	; (800248c <HAL_RCC_OscConfig+0x824>)
 80023ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023c0:	f7ff f942 	bl	8001648 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c8:	f7ff f93e 	bl	8001648 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e066      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023da:	4b2c      	ldr	r3, [pc, #176]	; (800248c <HAL_RCC_OscConfig+0x824>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023e6:	e05e      	b.n	80024a6 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e05d      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ec:	4b27      	ldr	r3, [pc, #156]	; (800248c <HAL_RCC_OscConfig+0x824>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d156      	bne.n	80024a6 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023f8:	4b24      	ldr	r3, [pc, #144]	; (800248c <HAL_RCC_OscConfig+0x824>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a23      	ldr	r2, [pc, #140]	; (800248c <HAL_RCC_OscConfig+0x824>)
 80023fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002402:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002404:	4b21      	ldr	r3, [pc, #132]	; (800248c <HAL_RCC_OscConfig+0x824>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4a20      	ldr	r2, [pc, #128]	; (800248c <HAL_RCC_OscConfig+0x824>)
 800240a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800240e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002410:	f7ff f91a 	bl	8001648 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002418:	f7ff f916 	bl	8001648 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e03e      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242a:	4b18      	ldr	r3, [pc, #96]	; (800248c <HAL_RCC_OscConfig+0x824>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0x7b0>
 8002436:	e036      	b.n	80024a6 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2b0c      	cmp	r3, #12
 800243c:	d031      	beq.n	80024a2 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243e:	4b13      	ldr	r3, [pc, #76]	; (800248c <HAL_RCC_OscConfig+0x824>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a12      	ldr	r2, [pc, #72]	; (800248c <HAL_RCC_OscConfig+0x824>)
 8002444:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002448:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <HAL_RCC_OscConfig+0x824>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d105      	bne.n	8002462 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002456:	4b0d      	ldr	r3, [pc, #52]	; (800248c <HAL_RCC_OscConfig+0x824>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	4a0c      	ldr	r2, [pc, #48]	; (800248c <HAL_RCC_OscConfig+0x824>)
 800245c:	f023 0303 	bic.w	r3, r3, #3
 8002460:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002462:	4b0a      	ldr	r3, [pc, #40]	; (800248c <HAL_RCC_OscConfig+0x824>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	4a09      	ldr	r2, [pc, #36]	; (800248c <HAL_RCC_OscConfig+0x824>)
 8002468:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800246c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002470:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002472:	f7ff f8e9 	bl	8001648 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002478:	e00c      	b.n	8002494 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247a:	f7ff f8e5 	bl	8001648 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d905      	bls.n	8002494 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e00d      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
 800248c:	40021000 	.word	0x40021000
 8002490:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_RCC_OscConfig+0x848>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1ec      	bne.n	800247a <HAL_RCC_OscConfig+0x812>
 80024a0:	e001      	b.n	80024a6 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3720      	adds	r7, #32
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40021000 	.word	0x40021000

080024b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0c8      	b.n	800265a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024c8:	4b66      	ldr	r3, [pc, #408]	; (8002664 <HAL_RCC_ClockConfig+0x1b0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d910      	bls.n	80024f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b63      	ldr	r3, [pc, #396]	; (8002664 <HAL_RCC_ClockConfig+0x1b0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 0207 	bic.w	r2, r3, #7
 80024de:	4961      	ldr	r1, [pc, #388]	; (8002664 <HAL_RCC_ClockConfig+0x1b0>)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b5f      	ldr	r3, [pc, #380]	; (8002664 <HAL_RCC_ClockConfig+0x1b0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0b0      	b.n	800265a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d04c      	beq.n	800259e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b03      	cmp	r3, #3
 800250a:	d107      	bne.n	800251c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250c:	4b56      	ldr	r3, [pc, #344]	; (8002668 <HAL_RCC_ClockConfig+0x1b4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d121      	bne.n	800255c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e09e      	b.n	800265a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d107      	bne.n	8002534 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002524:	4b50      	ldr	r3, [pc, #320]	; (8002668 <HAL_RCC_ClockConfig+0x1b4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d115      	bne.n	800255c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e092      	b.n	800265a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d107      	bne.n	800254c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800253c:	4b4a      	ldr	r3, [pc, #296]	; (8002668 <HAL_RCC_ClockConfig+0x1b4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d109      	bne.n	800255c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e086      	b.n	800265a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800254c:	4b46      	ldr	r3, [pc, #280]	; (8002668 <HAL_RCC_ClockConfig+0x1b4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e07e      	b.n	800265a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800255c:	4b42      	ldr	r3, [pc, #264]	; (8002668 <HAL_RCC_ClockConfig+0x1b4>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f023 0203 	bic.w	r2, r3, #3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	493f      	ldr	r1, [pc, #252]	; (8002668 <HAL_RCC_ClockConfig+0x1b4>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800256e:	f7ff f86b 	bl	8001648 <HAL_GetTick>
 8002572:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002574:	e00a      	b.n	800258c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002576:	f7ff f867 	bl	8001648 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	; 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e066      	b.n	800265a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258c:	4b36      	ldr	r3, [pc, #216]	; (8002668 <HAL_RCC_ClockConfig+0x1b4>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 020c 	and.w	r2, r3, #12
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	429a      	cmp	r2, r3
 800259c:	d1eb      	bne.n	8002576 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025aa:	4b2f      	ldr	r3, [pc, #188]	; (8002668 <HAL_RCC_ClockConfig+0x1b4>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	492c      	ldr	r1, [pc, #176]	; (8002668 <HAL_RCC_ClockConfig+0x1b4>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025bc:	4b29      	ldr	r3, [pc, #164]	; (8002664 <HAL_RCC_ClockConfig+0x1b0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d210      	bcs.n	80025ec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b26      	ldr	r3, [pc, #152]	; (8002664 <HAL_RCC_ClockConfig+0x1b0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 0207 	bic.w	r2, r3, #7
 80025d2:	4924      	ldr	r1, [pc, #144]	; (8002664 <HAL_RCC_ClockConfig+0x1b0>)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025da:	4b22      	ldr	r3, [pc, #136]	; (8002664 <HAL_RCC_ClockConfig+0x1b0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d001      	beq.n	80025ec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e036      	b.n	800265a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f8:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <HAL_RCC_ClockConfig+0x1b4>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4918      	ldr	r1, [pc, #96]	; (8002668 <HAL_RCC_ClockConfig+0x1b4>)
 8002606:	4313      	orrs	r3, r2
 8002608:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002616:	4b14      	ldr	r3, [pc, #80]	; (8002668 <HAL_RCC_ClockConfig+0x1b4>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4910      	ldr	r1, [pc, #64]	; (8002668 <HAL_RCC_ClockConfig+0x1b4>)
 8002626:	4313      	orrs	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800262a:	f000 f825 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 800262e:	4602      	mov	r2, r0
 8002630:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <HAL_RCC_ClockConfig+0x1b4>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	490c      	ldr	r1, [pc, #48]	; (800266c <HAL_RCC_ClockConfig+0x1b8>)
 800263c:	5ccb      	ldrb	r3, [r1, r3]
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	fa22 f303 	lsr.w	r3, r2, r3
 8002646:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800264a:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe ffaa 	bl	80015a8 <HAL_InitTick>
 8002654:	4603      	mov	r3, r0
 8002656:	72fb      	strb	r3, [r7, #11]

  return status;
 8002658:	7afb      	ldrb	r3, [r7, #11]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40022000 	.word	0x40022000
 8002668:	40021000 	.word	0x40021000
 800266c:	080047d4 	.word	0x080047d4
 8002670:	20000000 	.word	0x20000000
 8002674:	20000004 	.word	0x20000004

08002678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002678:	b480      	push	{r7}
 800267a:	b089      	sub	sp, #36	; 0x24
 800267c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	2300      	movs	r3, #0
 8002684:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002686:	4b3e      	ldr	r3, [pc, #248]	; (8002780 <HAL_RCC_GetSysClockFreq+0x108>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002690:	4b3b      	ldr	r3, [pc, #236]	; (8002780 <HAL_RCC_GetSysClockFreq+0x108>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x34>
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	2b0c      	cmp	r3, #12
 80026a4:	d121      	bne.n	80026ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d11e      	bne.n	80026ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026ac:	4b34      	ldr	r3, [pc, #208]	; (8002780 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d107      	bne.n	80026c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026b8:	4b31      	ldr	r3, [pc, #196]	; (8002780 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026be:	0a1b      	lsrs	r3, r3, #8
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	e005      	b.n	80026d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026c8:	4b2d      	ldr	r3, [pc, #180]	; (8002780 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	091b      	lsrs	r3, r3, #4
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026d4:	4a2b      	ldr	r2, [pc, #172]	; (8002784 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10d      	bne.n	8002700 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026e8:	e00a      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d102      	bne.n	80026f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026f0:	4b25      	ldr	r3, [pc, #148]	; (8002788 <HAL_RCC_GetSysClockFreq+0x110>)
 80026f2:	61bb      	str	r3, [r7, #24]
 80026f4:	e004      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d101      	bne.n	8002700 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026fc:	4b23      	ldr	r3, [pc, #140]	; (800278c <HAL_RCC_GetSysClockFreq+0x114>)
 80026fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	2b0c      	cmp	r3, #12
 8002704:	d134      	bne.n	8002770 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002706:	4b1e      	ldr	r3, [pc, #120]	; (8002780 <HAL_RCC_GetSysClockFreq+0x108>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d003      	beq.n	800271e <HAL_RCC_GetSysClockFreq+0xa6>
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2b03      	cmp	r3, #3
 800271a:	d003      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0xac>
 800271c:	e005      	b.n	800272a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800271e:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <HAL_RCC_GetSysClockFreq+0x110>)
 8002720:	617b      	str	r3, [r7, #20]
      break;
 8002722:	e005      	b.n	8002730 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002724:	4b19      	ldr	r3, [pc, #100]	; (800278c <HAL_RCC_GetSysClockFreq+0x114>)
 8002726:	617b      	str	r3, [r7, #20]
      break;
 8002728:	e002      	b.n	8002730 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	617b      	str	r3, [r7, #20]
      break;
 800272e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002730:	4b13      	ldr	r3, [pc, #76]	; (8002780 <HAL_RCC_GetSysClockFreq+0x108>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	3301      	adds	r3, #1
 800273c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <HAL_RCC_GetSysClockFreq+0x108>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	0a1b      	lsrs	r3, r3, #8
 8002744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	fb02 f203 	mul.w	r2, r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	fbb2 f3f3 	udiv	r3, r2, r3
 8002754:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002756:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <HAL_RCC_GetSysClockFreq+0x108>)
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	0e5b      	lsrs	r3, r3, #25
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	3301      	adds	r3, #1
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	fbb2 f3f3 	udiv	r3, r2, r3
 800276e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002770:	69bb      	ldr	r3, [r7, #24]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3724      	adds	r7, #36	; 0x24
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000
 8002784:	080047ec 	.word	0x080047ec
 8002788:	00f42400 	.word	0x00f42400
 800278c:	007a1200 	.word	0x007a1200

08002790 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002794:	4b03      	ldr	r3, [pc, #12]	; (80027a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002796:	681b      	ldr	r3, [r3, #0]
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	20000000 	.word	0x20000000

080027a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027ac:	f7ff fff0 	bl	8002790 <HAL_RCC_GetHCLKFreq>
 80027b0:	4602      	mov	r2, r0
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	0a1b      	lsrs	r3, r3, #8
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	4904      	ldr	r1, [pc, #16]	; (80027d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027be:	5ccb      	ldrb	r3, [r1, r3]
 80027c0:	f003 031f 	and.w	r3, r3, #31
 80027c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40021000 	.word	0x40021000
 80027d0:	080047e4 	.word	0x080047e4

080027d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027d8:	f7ff ffda 	bl	8002790 <HAL_RCC_GetHCLKFreq>
 80027dc:	4602      	mov	r2, r0
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	0adb      	lsrs	r3, r3, #11
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	4904      	ldr	r1, [pc, #16]	; (80027fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80027ea:	5ccb      	ldrb	r3, [r1, r3]
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40021000 	.word	0x40021000
 80027fc:	080047e4 	.word	0x080047e4

08002800 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002808:	2300      	movs	r3, #0
 800280a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800280c:	4b2a      	ldr	r3, [pc, #168]	; (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800280e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002818:	f7ff f9b2 	bl	8001b80 <HAL_PWREx_GetVoltageRange>
 800281c:	6178      	str	r0, [r7, #20]
 800281e:	e014      	b.n	800284a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002820:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	4a24      	ldr	r2, [pc, #144]	; (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282a:	6593      	str	r3, [r2, #88]	; 0x58
 800282c:	4b22      	ldr	r3, [pc, #136]	; (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800282e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002838:	f7ff f9a2 	bl	8001b80 <HAL_PWREx_GetVoltageRange>
 800283c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800283e:	4b1e      	ldr	r3, [pc, #120]	; (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002842:	4a1d      	ldr	r2, [pc, #116]	; (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002848:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002850:	d10b      	bne.n	800286a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b80      	cmp	r3, #128	; 0x80
 8002856:	d919      	bls.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2ba0      	cmp	r3, #160	; 0xa0
 800285c:	d902      	bls.n	8002864 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800285e:	2302      	movs	r3, #2
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	e013      	b.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002864:	2301      	movs	r3, #1
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	e010      	b.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b80      	cmp	r3, #128	; 0x80
 800286e:	d902      	bls.n	8002876 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002870:	2303      	movs	r3, #3
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	e00a      	b.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b80      	cmp	r3, #128	; 0x80
 800287a:	d102      	bne.n	8002882 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800287c:	2302      	movs	r3, #2
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	e004      	b.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b70      	cmp	r3, #112	; 0x70
 8002886:	d101      	bne.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002888:	2301      	movs	r3, #1
 800288a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f023 0207 	bic.w	r2, r3, #7
 8002894:	4909      	ldr	r1, [pc, #36]	; (80028bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800289c:	4b07      	ldr	r3, [pc, #28]	; (80028bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d001      	beq.n	80028ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40022000 	.word	0x40022000

080028c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028c8:	2300      	movs	r3, #0
 80028ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028cc:	2300      	movs	r3, #0
 80028ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d041      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028e4:	d02a      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028ea:	d824      	bhi.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028f0:	d008      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028f6:	d81e      	bhi.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00a      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80028fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002900:	d010      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002902:	e018      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002904:	4b86      	ldr	r3, [pc, #536]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4a85      	ldr	r2, [pc, #532]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002910:	e015      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3304      	adds	r3, #4
 8002916:	2100      	movs	r1, #0
 8002918:	4618      	mov	r0, r3
 800291a:	f000 facd 	bl	8002eb8 <RCCEx_PLLSAI1_Config>
 800291e:	4603      	mov	r3, r0
 8002920:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002922:	e00c      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3320      	adds	r3, #32
 8002928:	2100      	movs	r1, #0
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fbb6 	bl	800309c <RCCEx_PLLSAI2_Config>
 8002930:	4603      	mov	r3, r0
 8002932:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002934:	e003      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	74fb      	strb	r3, [r7, #19]
      break;
 800293a:	e000      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800293c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800293e:	7cfb      	ldrb	r3, [r7, #19]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10b      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002944:	4b76      	ldr	r3, [pc, #472]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002952:	4973      	ldr	r1, [pc, #460]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800295a:	e001      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800295c:	7cfb      	ldrb	r3, [r7, #19]
 800295e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d041      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002970:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002974:	d02a      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002976:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800297a:	d824      	bhi.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800297c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002980:	d008      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002982:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002986:	d81e      	bhi.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800298c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002990:	d010      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002992:	e018      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002994:	4b62      	ldr	r3, [pc, #392]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	4a61      	ldr	r2, [pc, #388]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029a0:	e015      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3304      	adds	r3, #4
 80029a6:	2100      	movs	r1, #0
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 fa85 	bl	8002eb8 <RCCEx_PLLSAI1_Config>
 80029ae:	4603      	mov	r3, r0
 80029b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029b2:	e00c      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3320      	adds	r3, #32
 80029b8:	2100      	movs	r1, #0
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 fb6e 	bl	800309c <RCCEx_PLLSAI2_Config>
 80029c0:	4603      	mov	r3, r0
 80029c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029c4:	e003      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	74fb      	strb	r3, [r7, #19]
      break;
 80029ca:	e000      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80029cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ce:	7cfb      	ldrb	r3, [r7, #19]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10b      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029d4:	4b52      	ldr	r3, [pc, #328]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e2:	494f      	ldr	r1, [pc, #316]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029ea:	e001      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ec:	7cfb      	ldrb	r3, [r7, #19]
 80029ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80a0 	beq.w	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029fe:	2300      	movs	r3, #0
 8002a00:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a02:	4b47      	ldr	r3, [pc, #284]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002a12:	2300      	movs	r3, #0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00d      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a18:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1c:	4a40      	ldr	r2, [pc, #256]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a22:	6593      	str	r3, [r2, #88]	; 0x58
 8002a24:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a30:	2301      	movs	r3, #1
 8002a32:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a34:	4b3b      	ldr	r3, [pc, #236]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a3a      	ldr	r2, [pc, #232]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a40:	f7fe fe02 	bl	8001648 <HAL_GetTick>
 8002a44:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a46:	e009      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a48:	f7fe fdfe 	bl	8001648 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d902      	bls.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	74fb      	strb	r3, [r7, #19]
        break;
 8002a5a:	e005      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a5c:	4b31      	ldr	r3, [pc, #196]	; (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0ef      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a68:	7cfb      	ldrb	r3, [r7, #19]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d15c      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a6e:	4b2c      	ldr	r3, [pc, #176]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a78:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d01f      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d019      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a8c:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a98:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9e:	4a20      	ldr	r2, [pc, #128]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aae:	4a1c      	ldr	r2, [pc, #112]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ab8:	4a19      	ldr	r2, [pc, #100]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d016      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aca:	f7fe fdbd 	bl	8001648 <HAL_GetTick>
 8002ace:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ad0:	e00b      	b.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad2:	f7fe fdb9 	bl	8001648 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d902      	bls.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	74fb      	strb	r3, [r7, #19]
            break;
 8002ae8:	e006      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aea:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0ec      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002af8:	7cfb      	ldrb	r3, [r7, #19]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002afe:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0e:	4904      	ldr	r1, [pc, #16]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b16:	e009      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b18:	7cfb      	ldrb	r3, [r7, #19]
 8002b1a:	74bb      	strb	r3, [r7, #18]
 8002b1c:	e006      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b28:	7cfb      	ldrb	r3, [r7, #19]
 8002b2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b2c:	7c7b      	ldrb	r3, [r7, #17]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d105      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b32:	4ba6      	ldr	r3, [pc, #664]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b36:	4aa5      	ldr	r2, [pc, #660]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00a      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b4a:	4ba0      	ldr	r3, [pc, #640]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b50:	f023 0203 	bic.w	r2, r3, #3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b58:	499c      	ldr	r1, [pc, #624]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00a      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b6c:	4b97      	ldr	r3, [pc, #604]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b72:	f023 020c 	bic.w	r2, r3, #12
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7a:	4994      	ldr	r1, [pc, #592]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00a      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b8e:	4b8f      	ldr	r3, [pc, #572]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	498b      	ldr	r1, [pc, #556]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00a      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bb0:	4b86      	ldr	r3, [pc, #536]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	4983      	ldr	r1, [pc, #524]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00a      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bd2:	4b7e      	ldr	r3, [pc, #504]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be0:	497a      	ldr	r1, [pc, #488]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bf4:	4b75      	ldr	r3, [pc, #468]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c02:	4972      	ldr	r1, [pc, #456]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c16:	4b6d      	ldr	r3, [pc, #436]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c24:	4969      	ldr	r1, [pc, #420]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00a      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c38:	4b64      	ldr	r3, [pc, #400]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c46:	4961      	ldr	r1, [pc, #388]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00a      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c5a:	4b5c      	ldr	r3, [pc, #368]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c68:	4958      	ldr	r1, [pc, #352]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c7c:	4b53      	ldr	r3, [pc, #332]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	4950      	ldr	r1, [pc, #320]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c9e:	4b4b      	ldr	r3, [pc, #300]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cac:	4947      	ldr	r1, [pc, #284]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00a      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cc0:	4b42      	ldr	r3, [pc, #264]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cc6:	f023 0203 	bic.w	r2, r3, #3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cce:	493f      	ldr	r1, [pc, #252]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d028      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ce2:	4b3a      	ldr	r3, [pc, #232]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf0:	4936      	ldr	r1, [pc, #216]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d00:	d106      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d02:	4b32      	ldr	r3, [pc, #200]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	4a31      	ldr	r2, [pc, #196]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d0c:	60d3      	str	r3, [r2, #12]
 8002d0e:	e011      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	2101      	movs	r1, #1
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 f8c9 	bl	8002eb8 <RCCEx_PLLSAI1_Config>
 8002d26:	4603      	mov	r3, r0
 8002d28:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d2a:	7cfb      	ldrb	r3, [r7, #19]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002d30:	7cfb      	ldrb	r3, [r7, #19]
 8002d32:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d028      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d40:	4b22      	ldr	r3, [pc, #136]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4e:	491f      	ldr	r1, [pc, #124]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d5e:	d106      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d60:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4a19      	ldr	r2, [pc, #100]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d6a:	60d3      	str	r3, [r2, #12]
 8002d6c:	e011      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d76:	d10c      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 f89a 	bl	8002eb8 <RCCEx_PLLSAI1_Config>
 8002d84:	4603      	mov	r3, r0
 8002d86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d88:	7cfb      	ldrb	r3, [r7, #19]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002d8e:	7cfb      	ldrb	r3, [r7, #19]
 8002d90:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d02a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d9e:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dac:	4907      	ldr	r1, [pc, #28]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002db8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dbc:	d108      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dbe:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	4a02      	ldr	r2, [pc, #8]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002dc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dc8:	60d3      	str	r3, [r2, #12]
 8002dca:	e013      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002dcc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	2101      	movs	r1, #1
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 f869 	bl	8002eb8 <RCCEx_PLLSAI1_Config>
 8002de6:	4603      	mov	r3, r0
 8002de8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dea:	7cfb      	ldrb	r3, [r7, #19]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d02f      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e00:	4b2c      	ldr	r3, [pc, #176]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e0e:	4929      	ldr	r1, [pc, #164]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e1e:	d10d      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3304      	adds	r3, #4
 8002e24:	2102      	movs	r1, #2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 f846 	bl	8002eb8 <RCCEx_PLLSAI1_Config>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e30:	7cfb      	ldrb	r3, [r7, #19]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d014      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002e36:	7cfb      	ldrb	r3, [r7, #19]
 8002e38:	74bb      	strb	r3, [r7, #18]
 8002e3a:	e011      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e44:	d10c      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3320      	adds	r3, #32
 8002e4a:	2102      	movs	r1, #2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 f925 	bl	800309c <RCCEx_PLLSAI2_Config>
 8002e52:	4603      	mov	r3, r0
 8002e54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e56:	7cfb      	ldrb	r3, [r7, #19]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002e5c:	7cfb      	ldrb	r3, [r7, #19]
 8002e5e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00b      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e6c:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e72:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e7c:	490d      	ldr	r1, [pc, #52]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00b      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e90:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ea0:	4904      	ldr	r1, [pc, #16]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ea8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000

08002eb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ec6:	4b74      	ldr	r3, [pc, #464]	; (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d018      	beq.n	8002f04 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ed2:	4b71      	ldr	r3, [pc, #452]	; (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f003 0203 	and.w	r2, r3, #3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d10d      	bne.n	8002efe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d009      	beq.n	8002efe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002eea:	4b6b      	ldr	r3, [pc, #428]	; (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
       ||
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d047      	beq.n	8002f8e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
 8002f02:	e044      	b.n	8002f8e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d018      	beq.n	8002f3e <RCCEx_PLLSAI1_Config+0x86>
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d825      	bhi.n	8002f5c <RCCEx_PLLSAI1_Config+0xa4>
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d002      	beq.n	8002f1a <RCCEx_PLLSAI1_Config+0x62>
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d009      	beq.n	8002f2c <RCCEx_PLLSAI1_Config+0x74>
 8002f18:	e020      	b.n	8002f5c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f1a:	4b5f      	ldr	r3, [pc, #380]	; (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d11d      	bne.n	8002f62 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f2a:	e01a      	b.n	8002f62 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f2c:	4b5a      	ldr	r3, [pc, #360]	; (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d116      	bne.n	8002f66 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f3c:	e013      	b.n	8002f66 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f3e:	4b56      	ldr	r3, [pc, #344]	; (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10f      	bne.n	8002f6a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f4a:	4b53      	ldr	r3, [pc, #332]	; (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f5a:	e006      	b.n	8002f6a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f60:	e004      	b.n	8002f6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f62:	bf00      	nop
 8002f64:	e002      	b.n	8002f6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f66:	bf00      	nop
 8002f68:	e000      	b.n	8002f6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10d      	bne.n	8002f8e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f72:	4b49      	ldr	r3, [pc, #292]	; (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6819      	ldr	r1, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	430b      	orrs	r3, r1
 8002f88:	4943      	ldr	r1, [pc, #268]	; (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d17c      	bne.n	800308e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f94:	4b40      	ldr	r3, [pc, #256]	; (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a3f      	ldr	r2, [pc, #252]	; (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa0:	f7fe fb52 	bl	8001648 <HAL_GetTick>
 8002fa4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fa6:	e009      	b.n	8002fbc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fa8:	f7fe fb4e 	bl	8001648 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d902      	bls.n	8002fbc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	73fb      	strb	r3, [r7, #15]
        break;
 8002fba:	e005      	b.n	8002fc8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fbc:	4b36      	ldr	r3, [pc, #216]	; (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1ef      	bne.n	8002fa8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d15f      	bne.n	800308e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d110      	bne.n	8002ff6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fd4:	4b30      	ldr	r3, [pc, #192]	; (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002fdc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6892      	ldr	r2, [r2, #8]
 8002fe4:	0211      	lsls	r1, r2, #8
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68d2      	ldr	r2, [r2, #12]
 8002fea:	06d2      	lsls	r2, r2, #27
 8002fec:	430a      	orrs	r2, r1
 8002fee:	492a      	ldr	r1, [pc, #168]	; (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	610b      	str	r3, [r1, #16]
 8002ff4:	e027      	b.n	8003046 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d112      	bne.n	8003022 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ffc:	4b26      	ldr	r3, [pc, #152]	; (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003004:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6892      	ldr	r2, [r2, #8]
 800300c:	0211      	lsls	r1, r2, #8
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6912      	ldr	r2, [r2, #16]
 8003012:	0852      	lsrs	r2, r2, #1
 8003014:	3a01      	subs	r2, #1
 8003016:	0552      	lsls	r2, r2, #21
 8003018:	430a      	orrs	r2, r1
 800301a:	491f      	ldr	r1, [pc, #124]	; (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 800301c:	4313      	orrs	r3, r2
 800301e:	610b      	str	r3, [r1, #16]
 8003020:	e011      	b.n	8003046 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003022:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800302a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6892      	ldr	r2, [r2, #8]
 8003032:	0211      	lsls	r1, r2, #8
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6952      	ldr	r2, [r2, #20]
 8003038:	0852      	lsrs	r2, r2, #1
 800303a:	3a01      	subs	r2, #1
 800303c:	0652      	lsls	r2, r2, #25
 800303e:	430a      	orrs	r2, r1
 8003040:	4915      	ldr	r1, [pc, #84]	; (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003042:	4313      	orrs	r3, r2
 8003044:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003046:	4b14      	ldr	r3, [pc, #80]	; (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a13      	ldr	r2, [pc, #76]	; (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 800304c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003050:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003052:	f7fe faf9 	bl	8001648 <HAL_GetTick>
 8003056:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003058:	e009      	b.n	800306e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800305a:	f7fe faf5 	bl	8001648 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d902      	bls.n	800306e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	73fb      	strb	r3, [r7, #15]
          break;
 800306c:	e005      	b.n	800307a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0ef      	beq.n	800305a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d106      	bne.n	800308e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003080:	4b05      	ldr	r3, [pc, #20]	; (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	4903      	ldr	r1, [pc, #12]	; (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 800308a:	4313      	orrs	r3, r2
 800308c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800308e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000

0800309c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030aa:	4b69      	ldr	r3, [pc, #420]	; (8003250 <RCCEx_PLLSAI2_Config+0x1b4>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d018      	beq.n	80030e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80030b6:	4b66      	ldr	r3, [pc, #408]	; (8003250 <RCCEx_PLLSAI2_Config+0x1b4>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f003 0203 	and.w	r2, r3, #3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d10d      	bne.n	80030e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
       ||
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d009      	beq.n	80030e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80030ce:	4b60      	ldr	r3, [pc, #384]	; (8003250 <RCCEx_PLLSAI2_Config+0x1b4>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	091b      	lsrs	r3, r3, #4
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
       ||
 80030de:	429a      	cmp	r2, r3
 80030e0:	d047      	beq.n	8003172 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
 80030e6:	e044      	b.n	8003172 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d018      	beq.n	8003122 <RCCEx_PLLSAI2_Config+0x86>
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d825      	bhi.n	8003140 <RCCEx_PLLSAI2_Config+0xa4>
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d002      	beq.n	80030fe <RCCEx_PLLSAI2_Config+0x62>
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d009      	beq.n	8003110 <RCCEx_PLLSAI2_Config+0x74>
 80030fc:	e020      	b.n	8003140 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030fe:	4b54      	ldr	r3, [pc, #336]	; (8003250 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d11d      	bne.n	8003146 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800310e:	e01a      	b.n	8003146 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003110:	4b4f      	ldr	r3, [pc, #316]	; (8003250 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003118:	2b00      	cmp	r3, #0
 800311a:	d116      	bne.n	800314a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003120:	e013      	b.n	800314a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003122:	4b4b      	ldr	r3, [pc, #300]	; (8003250 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10f      	bne.n	800314e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800312e:	4b48      	ldr	r3, [pc, #288]	; (8003250 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800313e:	e006      	b.n	800314e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	73fb      	strb	r3, [r7, #15]
      break;
 8003144:	e004      	b.n	8003150 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003146:	bf00      	nop
 8003148:	e002      	b.n	8003150 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800314a:	bf00      	nop
 800314c:	e000      	b.n	8003150 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800314e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10d      	bne.n	8003172 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003156:	4b3e      	ldr	r3, [pc, #248]	; (8003250 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6819      	ldr	r1, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	430b      	orrs	r3, r1
 800316c:	4938      	ldr	r1, [pc, #224]	; (8003250 <RCCEx_PLLSAI2_Config+0x1b4>)
 800316e:	4313      	orrs	r3, r2
 8003170:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d166      	bne.n	8003246 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003178:	4b35      	ldr	r3, [pc, #212]	; (8003250 <RCCEx_PLLSAI2_Config+0x1b4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a34      	ldr	r2, [pc, #208]	; (8003250 <RCCEx_PLLSAI2_Config+0x1b4>)
 800317e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003182:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003184:	f7fe fa60 	bl	8001648 <HAL_GetTick>
 8003188:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800318a:	e009      	b.n	80031a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800318c:	f7fe fa5c 	bl	8001648 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d902      	bls.n	80031a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	73fb      	strb	r3, [r7, #15]
        break;
 800319e:	e005      	b.n	80031ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031a0:	4b2b      	ldr	r3, [pc, #172]	; (8003250 <RCCEx_PLLSAI2_Config+0x1b4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1ef      	bne.n	800318c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d149      	bne.n	8003246 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d110      	bne.n	80031da <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031b8:	4b25      	ldr	r3, [pc, #148]	; (8003250 <RCCEx_PLLSAI2_Config+0x1b4>)
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80031c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6892      	ldr	r2, [r2, #8]
 80031c8:	0211      	lsls	r1, r2, #8
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	68d2      	ldr	r2, [r2, #12]
 80031ce:	06d2      	lsls	r2, r2, #27
 80031d0:	430a      	orrs	r2, r1
 80031d2:	491f      	ldr	r1, [pc, #124]	; (8003250 <RCCEx_PLLSAI2_Config+0x1b4>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	614b      	str	r3, [r1, #20]
 80031d8:	e011      	b.n	80031fe <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031da:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <RCCEx_PLLSAI2_Config+0x1b4>)
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6892      	ldr	r2, [r2, #8]
 80031ea:	0211      	lsls	r1, r2, #8
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6912      	ldr	r2, [r2, #16]
 80031f0:	0852      	lsrs	r2, r2, #1
 80031f2:	3a01      	subs	r2, #1
 80031f4:	0652      	lsls	r2, r2, #25
 80031f6:	430a      	orrs	r2, r1
 80031f8:	4915      	ldr	r1, [pc, #84]	; (8003250 <RCCEx_PLLSAI2_Config+0x1b4>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031fe:	4b14      	ldr	r3, [pc, #80]	; (8003250 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a13      	ldr	r2, [pc, #76]	; (8003250 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003208:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320a:	f7fe fa1d 	bl	8001648 <HAL_GetTick>
 800320e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003210:	e009      	b.n	8003226 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003212:	f7fe fa19 	bl	8001648 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d902      	bls.n	8003226 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	73fb      	strb	r3, [r7, #15]
          break;
 8003224:	e005      	b.n	8003232 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003226:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0ef      	beq.n	8003212 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d106      	bne.n	8003246 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <RCCEx_PLLSAI2_Config+0x1b4>)
 800323a:	695a      	ldr	r2, [r3, #20]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	4903      	ldr	r1, [pc, #12]	; (8003250 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003246:	7bfb      	ldrb	r3, [r7, #15]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000

08003254 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e040      	b.n	80032e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800326a:	2b00      	cmp	r3, #0
 800326c:	d106      	bne.n	800327c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fe f882 	bl	8001380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2224      	movs	r2, #36	; 0x24
 8003280:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0201 	bic.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f8c0 	bl	8003418 <UART_SetConfig>
 8003298:	4603      	mov	r3, r0
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e022      	b.n	80032e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fb3e 	bl	800392c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 fbc5 	bl	8003a70 <UART_CheckIdleState>
 80032e6:	4603      	mov	r3, r0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	; 0x28
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	4613      	mov	r3, r2
 80032fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003304:	2b20      	cmp	r3, #32
 8003306:	f040 8082 	bne.w	800340e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <HAL_UART_Transmit+0x26>
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e07a      	b.n	8003410 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_UART_Transmit+0x38>
 8003324:	2302      	movs	r3, #2
 8003326:	e073      	b.n	8003410 <HAL_UART_Transmit+0x120>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2221      	movs	r2, #33	; 0x21
 800333c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800333e:	f7fe f983 	bl	8001648 <HAL_GetTick>
 8003342:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	88fa      	ldrh	r2, [r7, #6]
 8003348:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	88fa      	ldrh	r2, [r7, #6]
 8003350:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335c:	d108      	bne.n	8003370 <HAL_UART_Transmit+0x80>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d104      	bne.n	8003370 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003366:	2300      	movs	r3, #0
 8003368:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	e003      	b.n	8003378 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003374:	2300      	movs	r3, #0
 8003376:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003380:	e02d      	b.n	80033de <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2200      	movs	r2, #0
 800338a:	2180      	movs	r1, #128	; 0x80
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 fbb8 	bl	8003b02 <UART_WaitOnFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e039      	b.n	8003410 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10b      	bne.n	80033ba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	881a      	ldrh	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033ae:	b292      	uxth	r2, r2
 80033b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	3302      	adds	r3, #2
 80033b6:	61bb      	str	r3, [r7, #24]
 80033b8:	e008      	b.n	80033cc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	781a      	ldrb	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	b292      	uxth	r2, r2
 80033c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3301      	adds	r3, #1
 80033ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1cb      	bne.n	8003382 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2200      	movs	r2, #0
 80033f2:	2140      	movs	r1, #64	; 0x40
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 fb84 	bl	8003b02 <UART_WaitOnFlagUntilTimeout>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e005      	b.n	8003410 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	e000      	b.n	8003410 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800340e:	2302      	movs	r3, #2
  }
}
 8003410:	4618      	mov	r0, r3
 8003412:	3720      	adds	r7, #32
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003418:	b5b0      	push	{r4, r5, r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	4313      	orrs	r3, r2
 800343a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	4bad      	ldr	r3, [pc, #692]	; (80036f8 <UART_SetConfig+0x2e0>)
 8003444:	4013      	ands	r3, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	69f9      	ldr	r1, [r7, #28]
 800344c:	430b      	orrs	r3, r1
 800344e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4aa2      	ldr	r2, [pc, #648]	; (80036fc <UART_SetConfig+0x2e4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d004      	beq.n	8003480 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	4313      	orrs	r3, r2
 800347e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69fa      	ldr	r2, [r7, #28]
 8003490:	430a      	orrs	r2, r1
 8003492:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a99      	ldr	r2, [pc, #612]	; (8003700 <UART_SetConfig+0x2e8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d121      	bne.n	80034e2 <UART_SetConfig+0xca>
 800349e:	4b99      	ldr	r3, [pc, #612]	; (8003704 <UART_SetConfig+0x2ec>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d817      	bhi.n	80034dc <UART_SetConfig+0xc4>
 80034ac:	a201      	add	r2, pc, #4	; (adr r2, 80034b4 <UART_SetConfig+0x9c>)
 80034ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b2:	bf00      	nop
 80034b4:	080034c5 	.word	0x080034c5
 80034b8:	080034d1 	.word	0x080034d1
 80034bc:	080034cb 	.word	0x080034cb
 80034c0:	080034d7 	.word	0x080034d7
 80034c4:	2301      	movs	r3, #1
 80034c6:	76fb      	strb	r3, [r7, #27]
 80034c8:	e0e7      	b.n	800369a <UART_SetConfig+0x282>
 80034ca:	2302      	movs	r3, #2
 80034cc:	76fb      	strb	r3, [r7, #27]
 80034ce:	e0e4      	b.n	800369a <UART_SetConfig+0x282>
 80034d0:	2304      	movs	r3, #4
 80034d2:	76fb      	strb	r3, [r7, #27]
 80034d4:	e0e1      	b.n	800369a <UART_SetConfig+0x282>
 80034d6:	2308      	movs	r3, #8
 80034d8:	76fb      	strb	r3, [r7, #27]
 80034da:	e0de      	b.n	800369a <UART_SetConfig+0x282>
 80034dc:	2310      	movs	r3, #16
 80034de:	76fb      	strb	r3, [r7, #27]
 80034e0:	e0db      	b.n	800369a <UART_SetConfig+0x282>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a88      	ldr	r2, [pc, #544]	; (8003708 <UART_SetConfig+0x2f0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d132      	bne.n	8003552 <UART_SetConfig+0x13a>
 80034ec:	4b85      	ldr	r3, [pc, #532]	; (8003704 <UART_SetConfig+0x2ec>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b0c      	cmp	r3, #12
 80034f8:	d828      	bhi.n	800354c <UART_SetConfig+0x134>
 80034fa:	a201      	add	r2, pc, #4	; (adr r2, 8003500 <UART_SetConfig+0xe8>)
 80034fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003500:	08003535 	.word	0x08003535
 8003504:	0800354d 	.word	0x0800354d
 8003508:	0800354d 	.word	0x0800354d
 800350c:	0800354d 	.word	0x0800354d
 8003510:	08003541 	.word	0x08003541
 8003514:	0800354d 	.word	0x0800354d
 8003518:	0800354d 	.word	0x0800354d
 800351c:	0800354d 	.word	0x0800354d
 8003520:	0800353b 	.word	0x0800353b
 8003524:	0800354d 	.word	0x0800354d
 8003528:	0800354d 	.word	0x0800354d
 800352c:	0800354d 	.word	0x0800354d
 8003530:	08003547 	.word	0x08003547
 8003534:	2300      	movs	r3, #0
 8003536:	76fb      	strb	r3, [r7, #27]
 8003538:	e0af      	b.n	800369a <UART_SetConfig+0x282>
 800353a:	2302      	movs	r3, #2
 800353c:	76fb      	strb	r3, [r7, #27]
 800353e:	e0ac      	b.n	800369a <UART_SetConfig+0x282>
 8003540:	2304      	movs	r3, #4
 8003542:	76fb      	strb	r3, [r7, #27]
 8003544:	e0a9      	b.n	800369a <UART_SetConfig+0x282>
 8003546:	2308      	movs	r3, #8
 8003548:	76fb      	strb	r3, [r7, #27]
 800354a:	e0a6      	b.n	800369a <UART_SetConfig+0x282>
 800354c:	2310      	movs	r3, #16
 800354e:	76fb      	strb	r3, [r7, #27]
 8003550:	e0a3      	b.n	800369a <UART_SetConfig+0x282>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a6d      	ldr	r2, [pc, #436]	; (800370c <UART_SetConfig+0x2f4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d120      	bne.n	800359e <UART_SetConfig+0x186>
 800355c:	4b69      	ldr	r3, [pc, #420]	; (8003704 <UART_SetConfig+0x2ec>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003562:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003566:	2b30      	cmp	r3, #48	; 0x30
 8003568:	d013      	beq.n	8003592 <UART_SetConfig+0x17a>
 800356a:	2b30      	cmp	r3, #48	; 0x30
 800356c:	d814      	bhi.n	8003598 <UART_SetConfig+0x180>
 800356e:	2b20      	cmp	r3, #32
 8003570:	d009      	beq.n	8003586 <UART_SetConfig+0x16e>
 8003572:	2b20      	cmp	r3, #32
 8003574:	d810      	bhi.n	8003598 <UART_SetConfig+0x180>
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <UART_SetConfig+0x168>
 800357a:	2b10      	cmp	r3, #16
 800357c:	d006      	beq.n	800358c <UART_SetConfig+0x174>
 800357e:	e00b      	b.n	8003598 <UART_SetConfig+0x180>
 8003580:	2300      	movs	r3, #0
 8003582:	76fb      	strb	r3, [r7, #27]
 8003584:	e089      	b.n	800369a <UART_SetConfig+0x282>
 8003586:	2302      	movs	r3, #2
 8003588:	76fb      	strb	r3, [r7, #27]
 800358a:	e086      	b.n	800369a <UART_SetConfig+0x282>
 800358c:	2304      	movs	r3, #4
 800358e:	76fb      	strb	r3, [r7, #27]
 8003590:	e083      	b.n	800369a <UART_SetConfig+0x282>
 8003592:	2308      	movs	r3, #8
 8003594:	76fb      	strb	r3, [r7, #27]
 8003596:	e080      	b.n	800369a <UART_SetConfig+0x282>
 8003598:	2310      	movs	r3, #16
 800359a:	76fb      	strb	r3, [r7, #27]
 800359c:	e07d      	b.n	800369a <UART_SetConfig+0x282>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a5b      	ldr	r2, [pc, #364]	; (8003710 <UART_SetConfig+0x2f8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d120      	bne.n	80035ea <UART_SetConfig+0x1d2>
 80035a8:	4b56      	ldr	r3, [pc, #344]	; (8003704 <UART_SetConfig+0x2ec>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035b2:	2bc0      	cmp	r3, #192	; 0xc0
 80035b4:	d013      	beq.n	80035de <UART_SetConfig+0x1c6>
 80035b6:	2bc0      	cmp	r3, #192	; 0xc0
 80035b8:	d814      	bhi.n	80035e4 <UART_SetConfig+0x1cc>
 80035ba:	2b80      	cmp	r3, #128	; 0x80
 80035bc:	d009      	beq.n	80035d2 <UART_SetConfig+0x1ba>
 80035be:	2b80      	cmp	r3, #128	; 0x80
 80035c0:	d810      	bhi.n	80035e4 <UART_SetConfig+0x1cc>
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <UART_SetConfig+0x1b4>
 80035c6:	2b40      	cmp	r3, #64	; 0x40
 80035c8:	d006      	beq.n	80035d8 <UART_SetConfig+0x1c0>
 80035ca:	e00b      	b.n	80035e4 <UART_SetConfig+0x1cc>
 80035cc:	2300      	movs	r3, #0
 80035ce:	76fb      	strb	r3, [r7, #27]
 80035d0:	e063      	b.n	800369a <UART_SetConfig+0x282>
 80035d2:	2302      	movs	r3, #2
 80035d4:	76fb      	strb	r3, [r7, #27]
 80035d6:	e060      	b.n	800369a <UART_SetConfig+0x282>
 80035d8:	2304      	movs	r3, #4
 80035da:	76fb      	strb	r3, [r7, #27]
 80035dc:	e05d      	b.n	800369a <UART_SetConfig+0x282>
 80035de:	2308      	movs	r3, #8
 80035e0:	76fb      	strb	r3, [r7, #27]
 80035e2:	e05a      	b.n	800369a <UART_SetConfig+0x282>
 80035e4:	2310      	movs	r3, #16
 80035e6:	76fb      	strb	r3, [r7, #27]
 80035e8:	e057      	b.n	800369a <UART_SetConfig+0x282>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a49      	ldr	r2, [pc, #292]	; (8003714 <UART_SetConfig+0x2fc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d125      	bne.n	8003640 <UART_SetConfig+0x228>
 80035f4:	4b43      	ldr	r3, [pc, #268]	; (8003704 <UART_SetConfig+0x2ec>)
 80035f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003602:	d017      	beq.n	8003634 <UART_SetConfig+0x21c>
 8003604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003608:	d817      	bhi.n	800363a <UART_SetConfig+0x222>
 800360a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800360e:	d00b      	beq.n	8003628 <UART_SetConfig+0x210>
 8003610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003614:	d811      	bhi.n	800363a <UART_SetConfig+0x222>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <UART_SetConfig+0x20a>
 800361a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800361e:	d006      	beq.n	800362e <UART_SetConfig+0x216>
 8003620:	e00b      	b.n	800363a <UART_SetConfig+0x222>
 8003622:	2300      	movs	r3, #0
 8003624:	76fb      	strb	r3, [r7, #27]
 8003626:	e038      	b.n	800369a <UART_SetConfig+0x282>
 8003628:	2302      	movs	r3, #2
 800362a:	76fb      	strb	r3, [r7, #27]
 800362c:	e035      	b.n	800369a <UART_SetConfig+0x282>
 800362e:	2304      	movs	r3, #4
 8003630:	76fb      	strb	r3, [r7, #27]
 8003632:	e032      	b.n	800369a <UART_SetConfig+0x282>
 8003634:	2308      	movs	r3, #8
 8003636:	76fb      	strb	r3, [r7, #27]
 8003638:	e02f      	b.n	800369a <UART_SetConfig+0x282>
 800363a:	2310      	movs	r3, #16
 800363c:	76fb      	strb	r3, [r7, #27]
 800363e:	e02c      	b.n	800369a <UART_SetConfig+0x282>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a2d      	ldr	r2, [pc, #180]	; (80036fc <UART_SetConfig+0x2e4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d125      	bne.n	8003696 <UART_SetConfig+0x27e>
 800364a:	4b2e      	ldr	r3, [pc, #184]	; (8003704 <UART_SetConfig+0x2ec>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003650:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003654:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003658:	d017      	beq.n	800368a <UART_SetConfig+0x272>
 800365a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800365e:	d817      	bhi.n	8003690 <UART_SetConfig+0x278>
 8003660:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003664:	d00b      	beq.n	800367e <UART_SetConfig+0x266>
 8003666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800366a:	d811      	bhi.n	8003690 <UART_SetConfig+0x278>
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <UART_SetConfig+0x260>
 8003670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003674:	d006      	beq.n	8003684 <UART_SetConfig+0x26c>
 8003676:	e00b      	b.n	8003690 <UART_SetConfig+0x278>
 8003678:	2300      	movs	r3, #0
 800367a:	76fb      	strb	r3, [r7, #27]
 800367c:	e00d      	b.n	800369a <UART_SetConfig+0x282>
 800367e:	2302      	movs	r3, #2
 8003680:	76fb      	strb	r3, [r7, #27]
 8003682:	e00a      	b.n	800369a <UART_SetConfig+0x282>
 8003684:	2304      	movs	r3, #4
 8003686:	76fb      	strb	r3, [r7, #27]
 8003688:	e007      	b.n	800369a <UART_SetConfig+0x282>
 800368a:	2308      	movs	r3, #8
 800368c:	76fb      	strb	r3, [r7, #27]
 800368e:	e004      	b.n	800369a <UART_SetConfig+0x282>
 8003690:	2310      	movs	r3, #16
 8003692:	76fb      	strb	r3, [r7, #27]
 8003694:	e001      	b.n	800369a <UART_SetConfig+0x282>
 8003696:	2310      	movs	r3, #16
 8003698:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a17      	ldr	r2, [pc, #92]	; (80036fc <UART_SetConfig+0x2e4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	f040 8087 	bne.w	80037b4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036a6:	7efb      	ldrb	r3, [r7, #27]
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d837      	bhi.n	800371c <UART_SetConfig+0x304>
 80036ac:	a201      	add	r2, pc, #4	; (adr r2, 80036b4 <UART_SetConfig+0x29c>)
 80036ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b2:	bf00      	nop
 80036b4:	080036d9 	.word	0x080036d9
 80036b8:	0800371d 	.word	0x0800371d
 80036bc:	080036e1 	.word	0x080036e1
 80036c0:	0800371d 	.word	0x0800371d
 80036c4:	080036e7 	.word	0x080036e7
 80036c8:	0800371d 	.word	0x0800371d
 80036cc:	0800371d 	.word	0x0800371d
 80036d0:	0800371d 	.word	0x0800371d
 80036d4:	080036ef 	.word	0x080036ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036d8:	f7ff f866 	bl	80027a8 <HAL_RCC_GetPCLK1Freq>
 80036dc:	6178      	str	r0, [r7, #20]
        break;
 80036de:	e022      	b.n	8003726 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036e0:	4b0d      	ldr	r3, [pc, #52]	; (8003718 <UART_SetConfig+0x300>)
 80036e2:	617b      	str	r3, [r7, #20]
        break;
 80036e4:	e01f      	b.n	8003726 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036e6:	f7fe ffc7 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 80036ea:	6178      	str	r0, [r7, #20]
        break;
 80036ec:	e01b      	b.n	8003726 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036f2:	617b      	str	r3, [r7, #20]
        break;
 80036f4:	e017      	b.n	8003726 <UART_SetConfig+0x30e>
 80036f6:	bf00      	nop
 80036f8:	efff69f3 	.word	0xefff69f3
 80036fc:	40008000 	.word	0x40008000
 8003700:	40013800 	.word	0x40013800
 8003704:	40021000 	.word	0x40021000
 8003708:	40004400 	.word	0x40004400
 800370c:	40004800 	.word	0x40004800
 8003710:	40004c00 	.word	0x40004c00
 8003714:	40005000 	.word	0x40005000
 8003718:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	76bb      	strb	r3, [r7, #26]
        break;
 8003724:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 80f1 	beq.w	8003910 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	4413      	add	r3, r2
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	429a      	cmp	r2, r3
 800373c:	d305      	bcc.n	800374a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	429a      	cmp	r2, r3
 8003748:	d902      	bls.n	8003750 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	76bb      	strb	r3, [r7, #26]
 800374e:	e0df      	b.n	8003910 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	4618      	mov	r0, r3
 8003754:	f04f 0100 	mov.w	r1, #0
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	020b      	lsls	r3, r1, #8
 8003762:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003766:	0202      	lsls	r2, r0, #8
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	6849      	ldr	r1, [r1, #4]
 800376c:	0849      	lsrs	r1, r1, #1
 800376e:	4608      	mov	r0, r1
 8003770:	f04f 0100 	mov.w	r1, #0
 8003774:	1814      	adds	r4, r2, r0
 8003776:	eb43 0501 	adc.w	r5, r3, r1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	461a      	mov	r2, r3
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	4620      	mov	r0, r4
 8003786:	4629      	mov	r1, r5
 8003788:	f7fc fd82 	bl	8000290 <__aeabi_uldivmod>
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	4613      	mov	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800379a:	d308      	bcc.n	80037ae <UART_SetConfig+0x396>
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037a2:	d204      	bcs.n	80037ae <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	60da      	str	r2, [r3, #12]
 80037ac:	e0b0      	b.n	8003910 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	76bb      	strb	r3, [r7, #26]
 80037b2:	e0ad      	b.n	8003910 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037bc:	d15b      	bne.n	8003876 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80037be:	7efb      	ldrb	r3, [r7, #27]
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d828      	bhi.n	8003816 <UART_SetConfig+0x3fe>
 80037c4:	a201      	add	r2, pc, #4	; (adr r2, 80037cc <UART_SetConfig+0x3b4>)
 80037c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ca:	bf00      	nop
 80037cc:	080037f1 	.word	0x080037f1
 80037d0:	080037f9 	.word	0x080037f9
 80037d4:	08003801 	.word	0x08003801
 80037d8:	08003817 	.word	0x08003817
 80037dc:	08003807 	.word	0x08003807
 80037e0:	08003817 	.word	0x08003817
 80037e4:	08003817 	.word	0x08003817
 80037e8:	08003817 	.word	0x08003817
 80037ec:	0800380f 	.word	0x0800380f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f0:	f7fe ffda 	bl	80027a8 <HAL_RCC_GetPCLK1Freq>
 80037f4:	6178      	str	r0, [r7, #20]
        break;
 80037f6:	e013      	b.n	8003820 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037f8:	f7fe ffec 	bl	80027d4 <HAL_RCC_GetPCLK2Freq>
 80037fc:	6178      	str	r0, [r7, #20]
        break;
 80037fe:	e00f      	b.n	8003820 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003800:	4b49      	ldr	r3, [pc, #292]	; (8003928 <UART_SetConfig+0x510>)
 8003802:	617b      	str	r3, [r7, #20]
        break;
 8003804:	e00c      	b.n	8003820 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003806:	f7fe ff37 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 800380a:	6178      	str	r0, [r7, #20]
        break;
 800380c:	e008      	b.n	8003820 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800380e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003812:	617b      	str	r3, [r7, #20]
        break;
 8003814:	e004      	b.n	8003820 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	76bb      	strb	r3, [r7, #26]
        break;
 800381e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d074      	beq.n	8003910 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	005a      	lsls	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	085b      	lsrs	r3, r3, #1
 8003830:	441a      	add	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	fbb2 f3f3 	udiv	r3, r2, r3
 800383a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	2b0f      	cmp	r3, #15
 8003840:	d916      	bls.n	8003870 <UART_SetConfig+0x458>
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003848:	d212      	bcs.n	8003870 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	b29b      	uxth	r3, r3
 800384e:	f023 030f 	bic.w	r3, r3, #15
 8003852:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	085b      	lsrs	r3, r3, #1
 8003858:	b29b      	uxth	r3, r3
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	b29a      	uxth	r2, r3
 8003860:	89fb      	ldrh	r3, [r7, #14]
 8003862:	4313      	orrs	r3, r2
 8003864:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	89fa      	ldrh	r2, [r7, #14]
 800386c:	60da      	str	r2, [r3, #12]
 800386e:	e04f      	b.n	8003910 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	76bb      	strb	r3, [r7, #26]
 8003874:	e04c      	b.n	8003910 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003876:	7efb      	ldrb	r3, [r7, #27]
 8003878:	2b08      	cmp	r3, #8
 800387a:	d828      	bhi.n	80038ce <UART_SetConfig+0x4b6>
 800387c:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <UART_SetConfig+0x46c>)
 800387e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003882:	bf00      	nop
 8003884:	080038a9 	.word	0x080038a9
 8003888:	080038b1 	.word	0x080038b1
 800388c:	080038b9 	.word	0x080038b9
 8003890:	080038cf 	.word	0x080038cf
 8003894:	080038bf 	.word	0x080038bf
 8003898:	080038cf 	.word	0x080038cf
 800389c:	080038cf 	.word	0x080038cf
 80038a0:	080038cf 	.word	0x080038cf
 80038a4:	080038c7 	.word	0x080038c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038a8:	f7fe ff7e 	bl	80027a8 <HAL_RCC_GetPCLK1Freq>
 80038ac:	6178      	str	r0, [r7, #20]
        break;
 80038ae:	e013      	b.n	80038d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b0:	f7fe ff90 	bl	80027d4 <HAL_RCC_GetPCLK2Freq>
 80038b4:	6178      	str	r0, [r7, #20]
        break;
 80038b6:	e00f      	b.n	80038d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038b8:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <UART_SetConfig+0x510>)
 80038ba:	617b      	str	r3, [r7, #20]
        break;
 80038bc:	e00c      	b.n	80038d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038be:	f7fe fedb 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 80038c2:	6178      	str	r0, [r7, #20]
        break;
 80038c4:	e008      	b.n	80038d8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ca:	617b      	str	r3, [r7, #20]
        break;
 80038cc:	e004      	b.n	80038d8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	76bb      	strb	r3, [r7, #26]
        break;
 80038d6:	bf00      	nop
    }

    if (pclk != 0U)
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d018      	beq.n	8003910 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	085a      	lsrs	r2, r3, #1
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	441a      	add	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	2b0f      	cmp	r3, #15
 80038f6:	d909      	bls.n	800390c <UART_SetConfig+0x4f4>
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fe:	d205      	bcs.n	800390c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	b29a      	uxth	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	60da      	str	r2, [r3, #12]
 800390a:	e001      	b.n	8003910 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800391c:	7ebb      	ldrb	r3, [r7, #26]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3720      	adds	r7, #32
 8003922:	46bd      	mov	sp, r7
 8003924:	bdb0      	pop	{r4, r5, r7, pc}
 8003926:	bf00      	nop
 8003928:	00f42400 	.word	0x00f42400

0800392c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00a      	beq.n	800399a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01a      	beq.n	8003a42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a2a:	d10a      	bne.n	8003a42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	605a      	str	r2, [r3, #4]
  }
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af02      	add	r7, sp, #8
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a80:	f7fd fde2 	bl	8001648 <HAL_GetTick>
 8003a84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d10e      	bne.n	8003ab2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f82d 	bl	8003b02 <UART_WaitOnFlagUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e023      	b.n	8003afa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d10e      	bne.n	8003ade <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ac0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f817 	bl	8003b02 <UART_WaitOnFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e00d      	b.n	8003afa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b09c      	sub	sp, #112	; 0x70
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b12:	e0a5      	b.n	8003c60 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b1a:	f000 80a1 	beq.w	8003c60 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b1e:	f7fd fd93 	bl	8001648 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d302      	bcc.n	8003b34 <UART_WaitOnFlagUntilTimeout+0x32>
 8003b2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d13e      	bne.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b48:	667b      	str	r3, [r7, #100]	; 0x64
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b54:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b5a:	e841 2300 	strex	r3, r2, [r1]
 8003b5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e6      	bne.n	8003b34 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	3308      	adds	r3, #8
 8003b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b70:	e853 3f00 	ldrex	r3, [r3]
 8003b74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b78:	f023 0301 	bic.w	r3, r3, #1
 8003b7c:	663b      	str	r3, [r7, #96]	; 0x60
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3308      	adds	r3, #8
 8003b84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b86:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b8e:	e841 2300 	strex	r3, r2, [r1]
 8003b92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1e5      	bne.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e067      	b.n	8003c82 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d04f      	beq.n	8003c60 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bce:	d147      	bne.n	8003c60 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bd8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be2:	e853 3f00 	ldrex	r3, [r3]
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8003bfa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c00:	e841 2300 	strex	r3, r2, [r1]
 8003c04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e6      	bne.n	8003bda <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3308      	adds	r3, #8
 8003c12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	e853 3f00 	ldrex	r3, [r3]
 8003c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f023 0301 	bic.w	r3, r3, #1
 8003c22:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3308      	adds	r3, #8
 8003c2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c2c:	623a      	str	r2, [r7, #32]
 8003c2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c30:	69f9      	ldr	r1, [r7, #28]
 8003c32:	6a3a      	ldr	r2, [r7, #32]
 8003c34:	e841 2300 	strex	r3, r2, [r1]
 8003c38:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1e5      	bne.n	8003c0c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2220      	movs	r2, #32
 8003c44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e010      	b.n	8003c82 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	69da      	ldr	r2, [r3, #28]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	bf0c      	ite	eq
 8003c70:	2301      	moveq	r3, #1
 8003c72:	2300      	movne	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	461a      	mov	r2, r3
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	f43f af4a 	beq.w	8003b14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3770      	adds	r7, #112	; 0x70
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <__errno>:
 8003c8c:	4b01      	ldr	r3, [pc, #4]	; (8003c94 <__errno+0x8>)
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	2000000c 	.word	0x2000000c

08003c98 <__libc_init_array>:
 8003c98:	b570      	push	{r4, r5, r6, lr}
 8003c9a:	4d0d      	ldr	r5, [pc, #52]	; (8003cd0 <__libc_init_array+0x38>)
 8003c9c:	4c0d      	ldr	r4, [pc, #52]	; (8003cd4 <__libc_init_array+0x3c>)
 8003c9e:	1b64      	subs	r4, r4, r5
 8003ca0:	10a4      	asrs	r4, r4, #2
 8003ca2:	2600      	movs	r6, #0
 8003ca4:	42a6      	cmp	r6, r4
 8003ca6:	d109      	bne.n	8003cbc <__libc_init_array+0x24>
 8003ca8:	4d0b      	ldr	r5, [pc, #44]	; (8003cd8 <__libc_init_array+0x40>)
 8003caa:	4c0c      	ldr	r4, [pc, #48]	; (8003cdc <__libc_init_array+0x44>)
 8003cac:	f000 fc4e 	bl	800454c <_init>
 8003cb0:	1b64      	subs	r4, r4, r5
 8003cb2:	10a4      	asrs	r4, r4, #2
 8003cb4:	2600      	movs	r6, #0
 8003cb6:	42a6      	cmp	r6, r4
 8003cb8:	d105      	bne.n	8003cc6 <__libc_init_array+0x2e>
 8003cba:	bd70      	pop	{r4, r5, r6, pc}
 8003cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc0:	4798      	blx	r3
 8003cc2:	3601      	adds	r6, #1
 8003cc4:	e7ee      	b.n	8003ca4 <__libc_init_array+0xc>
 8003cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cca:	4798      	blx	r3
 8003ccc:	3601      	adds	r6, #1
 8003cce:	e7f2      	b.n	8003cb6 <__libc_init_array+0x1e>
 8003cd0:	08004858 	.word	0x08004858
 8003cd4:	08004858 	.word	0x08004858
 8003cd8:	08004858 	.word	0x08004858
 8003cdc:	0800485c 	.word	0x0800485c

08003ce0 <memcpy>:
 8003ce0:	440a      	add	r2, r1
 8003ce2:	4291      	cmp	r1, r2
 8003ce4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003ce8:	d100      	bne.n	8003cec <memcpy+0xc>
 8003cea:	4770      	bx	lr
 8003cec:	b510      	push	{r4, lr}
 8003cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cf6:	4291      	cmp	r1, r2
 8003cf8:	d1f9      	bne.n	8003cee <memcpy+0xe>
 8003cfa:	bd10      	pop	{r4, pc}

08003cfc <memset>:
 8003cfc:	4402      	add	r2, r0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d100      	bne.n	8003d06 <memset+0xa>
 8003d04:	4770      	bx	lr
 8003d06:	f803 1b01 	strb.w	r1, [r3], #1
 8003d0a:	e7f9      	b.n	8003d00 <memset+0x4>

08003d0c <siprintf>:
 8003d0c:	b40e      	push	{r1, r2, r3}
 8003d0e:	b500      	push	{lr}
 8003d10:	b09c      	sub	sp, #112	; 0x70
 8003d12:	ab1d      	add	r3, sp, #116	; 0x74
 8003d14:	9002      	str	r0, [sp, #8]
 8003d16:	9006      	str	r0, [sp, #24]
 8003d18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d1c:	4809      	ldr	r0, [pc, #36]	; (8003d44 <siprintf+0x38>)
 8003d1e:	9107      	str	r1, [sp, #28]
 8003d20:	9104      	str	r1, [sp, #16]
 8003d22:	4909      	ldr	r1, [pc, #36]	; (8003d48 <siprintf+0x3c>)
 8003d24:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d28:	9105      	str	r1, [sp, #20]
 8003d2a:	6800      	ldr	r0, [r0, #0]
 8003d2c:	9301      	str	r3, [sp, #4]
 8003d2e:	a902      	add	r1, sp, #8
 8003d30:	f000 f868 	bl	8003e04 <_svfiprintf_r>
 8003d34:	9b02      	ldr	r3, [sp, #8]
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]
 8003d3a:	b01c      	add	sp, #112	; 0x70
 8003d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d40:	b003      	add	sp, #12
 8003d42:	4770      	bx	lr
 8003d44:	2000000c 	.word	0x2000000c
 8003d48:	ffff0208 	.word	0xffff0208

08003d4c <__ssputs_r>:
 8003d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d50:	688e      	ldr	r6, [r1, #8]
 8003d52:	429e      	cmp	r6, r3
 8003d54:	4682      	mov	sl, r0
 8003d56:	460c      	mov	r4, r1
 8003d58:	4690      	mov	r8, r2
 8003d5a:	461f      	mov	r7, r3
 8003d5c:	d838      	bhi.n	8003dd0 <__ssputs_r+0x84>
 8003d5e:	898a      	ldrh	r2, [r1, #12]
 8003d60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d64:	d032      	beq.n	8003dcc <__ssputs_r+0x80>
 8003d66:	6825      	ldr	r5, [r4, #0]
 8003d68:	6909      	ldr	r1, [r1, #16]
 8003d6a:	eba5 0901 	sub.w	r9, r5, r1
 8003d6e:	6965      	ldr	r5, [r4, #20]
 8003d70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d78:	3301      	adds	r3, #1
 8003d7a:	444b      	add	r3, r9
 8003d7c:	106d      	asrs	r5, r5, #1
 8003d7e:	429d      	cmp	r5, r3
 8003d80:	bf38      	it	cc
 8003d82:	461d      	movcc	r5, r3
 8003d84:	0553      	lsls	r3, r2, #21
 8003d86:	d531      	bpl.n	8003dec <__ssputs_r+0xa0>
 8003d88:	4629      	mov	r1, r5
 8003d8a:	f000 fb39 	bl	8004400 <_malloc_r>
 8003d8e:	4606      	mov	r6, r0
 8003d90:	b950      	cbnz	r0, 8003da8 <__ssputs_r+0x5c>
 8003d92:	230c      	movs	r3, #12
 8003d94:	f8ca 3000 	str.w	r3, [sl]
 8003d98:	89a3      	ldrh	r3, [r4, #12]
 8003d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d9e:	81a3      	strh	r3, [r4, #12]
 8003da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003da8:	6921      	ldr	r1, [r4, #16]
 8003daa:	464a      	mov	r2, r9
 8003dac:	f7ff ff98 	bl	8003ce0 <memcpy>
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dba:	81a3      	strh	r3, [r4, #12]
 8003dbc:	6126      	str	r6, [r4, #16]
 8003dbe:	6165      	str	r5, [r4, #20]
 8003dc0:	444e      	add	r6, r9
 8003dc2:	eba5 0509 	sub.w	r5, r5, r9
 8003dc6:	6026      	str	r6, [r4, #0]
 8003dc8:	60a5      	str	r5, [r4, #8]
 8003dca:	463e      	mov	r6, r7
 8003dcc:	42be      	cmp	r6, r7
 8003dce:	d900      	bls.n	8003dd2 <__ssputs_r+0x86>
 8003dd0:	463e      	mov	r6, r7
 8003dd2:	4632      	mov	r2, r6
 8003dd4:	6820      	ldr	r0, [r4, #0]
 8003dd6:	4641      	mov	r1, r8
 8003dd8:	f000 faa8 	bl	800432c <memmove>
 8003ddc:	68a3      	ldr	r3, [r4, #8]
 8003dde:	6822      	ldr	r2, [r4, #0]
 8003de0:	1b9b      	subs	r3, r3, r6
 8003de2:	4432      	add	r2, r6
 8003de4:	60a3      	str	r3, [r4, #8]
 8003de6:	6022      	str	r2, [r4, #0]
 8003de8:	2000      	movs	r0, #0
 8003dea:	e7db      	b.n	8003da4 <__ssputs_r+0x58>
 8003dec:	462a      	mov	r2, r5
 8003dee:	f000 fb61 	bl	80044b4 <_realloc_r>
 8003df2:	4606      	mov	r6, r0
 8003df4:	2800      	cmp	r0, #0
 8003df6:	d1e1      	bne.n	8003dbc <__ssputs_r+0x70>
 8003df8:	6921      	ldr	r1, [r4, #16]
 8003dfa:	4650      	mov	r0, sl
 8003dfc:	f000 fab0 	bl	8004360 <_free_r>
 8003e00:	e7c7      	b.n	8003d92 <__ssputs_r+0x46>
	...

08003e04 <_svfiprintf_r>:
 8003e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e08:	4698      	mov	r8, r3
 8003e0a:	898b      	ldrh	r3, [r1, #12]
 8003e0c:	061b      	lsls	r3, r3, #24
 8003e0e:	b09d      	sub	sp, #116	; 0x74
 8003e10:	4607      	mov	r7, r0
 8003e12:	460d      	mov	r5, r1
 8003e14:	4614      	mov	r4, r2
 8003e16:	d50e      	bpl.n	8003e36 <_svfiprintf_r+0x32>
 8003e18:	690b      	ldr	r3, [r1, #16]
 8003e1a:	b963      	cbnz	r3, 8003e36 <_svfiprintf_r+0x32>
 8003e1c:	2140      	movs	r1, #64	; 0x40
 8003e1e:	f000 faef 	bl	8004400 <_malloc_r>
 8003e22:	6028      	str	r0, [r5, #0]
 8003e24:	6128      	str	r0, [r5, #16]
 8003e26:	b920      	cbnz	r0, 8003e32 <_svfiprintf_r+0x2e>
 8003e28:	230c      	movs	r3, #12
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e30:	e0d1      	b.n	8003fd6 <_svfiprintf_r+0x1d2>
 8003e32:	2340      	movs	r3, #64	; 0x40
 8003e34:	616b      	str	r3, [r5, #20]
 8003e36:	2300      	movs	r3, #0
 8003e38:	9309      	str	r3, [sp, #36]	; 0x24
 8003e3a:	2320      	movs	r3, #32
 8003e3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e40:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e44:	2330      	movs	r3, #48	; 0x30
 8003e46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003ff0 <_svfiprintf_r+0x1ec>
 8003e4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e4e:	f04f 0901 	mov.w	r9, #1
 8003e52:	4623      	mov	r3, r4
 8003e54:	469a      	mov	sl, r3
 8003e56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e5a:	b10a      	cbz	r2, 8003e60 <_svfiprintf_r+0x5c>
 8003e5c:	2a25      	cmp	r2, #37	; 0x25
 8003e5e:	d1f9      	bne.n	8003e54 <_svfiprintf_r+0x50>
 8003e60:	ebba 0b04 	subs.w	fp, sl, r4
 8003e64:	d00b      	beq.n	8003e7e <_svfiprintf_r+0x7a>
 8003e66:	465b      	mov	r3, fp
 8003e68:	4622      	mov	r2, r4
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	4638      	mov	r0, r7
 8003e6e:	f7ff ff6d 	bl	8003d4c <__ssputs_r>
 8003e72:	3001      	adds	r0, #1
 8003e74:	f000 80aa 	beq.w	8003fcc <_svfiprintf_r+0x1c8>
 8003e78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e7a:	445a      	add	r2, fp
 8003e7c:	9209      	str	r2, [sp, #36]	; 0x24
 8003e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 80a2 	beq.w	8003fcc <_svfiprintf_r+0x1c8>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e92:	f10a 0a01 	add.w	sl, sl, #1
 8003e96:	9304      	str	r3, [sp, #16]
 8003e98:	9307      	str	r3, [sp, #28]
 8003e9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e9e:	931a      	str	r3, [sp, #104]	; 0x68
 8003ea0:	4654      	mov	r4, sl
 8003ea2:	2205      	movs	r2, #5
 8003ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ea8:	4851      	ldr	r0, [pc, #324]	; (8003ff0 <_svfiprintf_r+0x1ec>)
 8003eaa:	f7fc f9a1 	bl	80001f0 <memchr>
 8003eae:	9a04      	ldr	r2, [sp, #16]
 8003eb0:	b9d8      	cbnz	r0, 8003eea <_svfiprintf_r+0xe6>
 8003eb2:	06d0      	lsls	r0, r2, #27
 8003eb4:	bf44      	itt	mi
 8003eb6:	2320      	movmi	r3, #32
 8003eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ebc:	0711      	lsls	r1, r2, #28
 8003ebe:	bf44      	itt	mi
 8003ec0:	232b      	movmi	r3, #43	; 0x2b
 8003ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ec6:	f89a 3000 	ldrb.w	r3, [sl]
 8003eca:	2b2a      	cmp	r3, #42	; 0x2a
 8003ecc:	d015      	beq.n	8003efa <_svfiprintf_r+0xf6>
 8003ece:	9a07      	ldr	r2, [sp, #28]
 8003ed0:	4654      	mov	r4, sl
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	f04f 0c0a 	mov.w	ip, #10
 8003ed8:	4621      	mov	r1, r4
 8003eda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ede:	3b30      	subs	r3, #48	; 0x30
 8003ee0:	2b09      	cmp	r3, #9
 8003ee2:	d94e      	bls.n	8003f82 <_svfiprintf_r+0x17e>
 8003ee4:	b1b0      	cbz	r0, 8003f14 <_svfiprintf_r+0x110>
 8003ee6:	9207      	str	r2, [sp, #28]
 8003ee8:	e014      	b.n	8003f14 <_svfiprintf_r+0x110>
 8003eea:	eba0 0308 	sub.w	r3, r0, r8
 8003eee:	fa09 f303 	lsl.w	r3, r9, r3
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	9304      	str	r3, [sp, #16]
 8003ef6:	46a2      	mov	sl, r4
 8003ef8:	e7d2      	b.n	8003ea0 <_svfiprintf_r+0x9c>
 8003efa:	9b03      	ldr	r3, [sp, #12]
 8003efc:	1d19      	adds	r1, r3, #4
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	9103      	str	r1, [sp, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	bfbb      	ittet	lt
 8003f06:	425b      	neglt	r3, r3
 8003f08:	f042 0202 	orrlt.w	r2, r2, #2
 8003f0c:	9307      	strge	r3, [sp, #28]
 8003f0e:	9307      	strlt	r3, [sp, #28]
 8003f10:	bfb8      	it	lt
 8003f12:	9204      	strlt	r2, [sp, #16]
 8003f14:	7823      	ldrb	r3, [r4, #0]
 8003f16:	2b2e      	cmp	r3, #46	; 0x2e
 8003f18:	d10c      	bne.n	8003f34 <_svfiprintf_r+0x130>
 8003f1a:	7863      	ldrb	r3, [r4, #1]
 8003f1c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f1e:	d135      	bne.n	8003f8c <_svfiprintf_r+0x188>
 8003f20:	9b03      	ldr	r3, [sp, #12]
 8003f22:	1d1a      	adds	r2, r3, #4
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	9203      	str	r2, [sp, #12]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	bfb8      	it	lt
 8003f2c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003f30:	3402      	adds	r4, #2
 8003f32:	9305      	str	r3, [sp, #20]
 8003f34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004000 <_svfiprintf_r+0x1fc>
 8003f38:	7821      	ldrb	r1, [r4, #0]
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	4650      	mov	r0, sl
 8003f3e:	f7fc f957 	bl	80001f0 <memchr>
 8003f42:	b140      	cbz	r0, 8003f56 <_svfiprintf_r+0x152>
 8003f44:	2340      	movs	r3, #64	; 0x40
 8003f46:	eba0 000a 	sub.w	r0, r0, sl
 8003f4a:	fa03 f000 	lsl.w	r0, r3, r0
 8003f4e:	9b04      	ldr	r3, [sp, #16]
 8003f50:	4303      	orrs	r3, r0
 8003f52:	3401      	adds	r4, #1
 8003f54:	9304      	str	r3, [sp, #16]
 8003f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f5a:	4826      	ldr	r0, [pc, #152]	; (8003ff4 <_svfiprintf_r+0x1f0>)
 8003f5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f60:	2206      	movs	r2, #6
 8003f62:	f7fc f945 	bl	80001f0 <memchr>
 8003f66:	2800      	cmp	r0, #0
 8003f68:	d038      	beq.n	8003fdc <_svfiprintf_r+0x1d8>
 8003f6a:	4b23      	ldr	r3, [pc, #140]	; (8003ff8 <_svfiprintf_r+0x1f4>)
 8003f6c:	bb1b      	cbnz	r3, 8003fb6 <_svfiprintf_r+0x1b2>
 8003f6e:	9b03      	ldr	r3, [sp, #12]
 8003f70:	3307      	adds	r3, #7
 8003f72:	f023 0307 	bic.w	r3, r3, #7
 8003f76:	3308      	adds	r3, #8
 8003f78:	9303      	str	r3, [sp, #12]
 8003f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f7c:	4433      	add	r3, r6
 8003f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f80:	e767      	b.n	8003e52 <_svfiprintf_r+0x4e>
 8003f82:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f86:	460c      	mov	r4, r1
 8003f88:	2001      	movs	r0, #1
 8003f8a:	e7a5      	b.n	8003ed8 <_svfiprintf_r+0xd4>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	3401      	adds	r4, #1
 8003f90:	9305      	str	r3, [sp, #20]
 8003f92:	4619      	mov	r1, r3
 8003f94:	f04f 0c0a 	mov.w	ip, #10
 8003f98:	4620      	mov	r0, r4
 8003f9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f9e:	3a30      	subs	r2, #48	; 0x30
 8003fa0:	2a09      	cmp	r2, #9
 8003fa2:	d903      	bls.n	8003fac <_svfiprintf_r+0x1a8>
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0c5      	beq.n	8003f34 <_svfiprintf_r+0x130>
 8003fa8:	9105      	str	r1, [sp, #20]
 8003faa:	e7c3      	b.n	8003f34 <_svfiprintf_r+0x130>
 8003fac:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fb0:	4604      	mov	r4, r0
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e7f0      	b.n	8003f98 <_svfiprintf_r+0x194>
 8003fb6:	ab03      	add	r3, sp, #12
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	462a      	mov	r2, r5
 8003fbc:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <_svfiprintf_r+0x1f8>)
 8003fbe:	a904      	add	r1, sp, #16
 8003fc0:	4638      	mov	r0, r7
 8003fc2:	f3af 8000 	nop.w
 8003fc6:	1c42      	adds	r2, r0, #1
 8003fc8:	4606      	mov	r6, r0
 8003fca:	d1d6      	bne.n	8003f7a <_svfiprintf_r+0x176>
 8003fcc:	89ab      	ldrh	r3, [r5, #12]
 8003fce:	065b      	lsls	r3, r3, #25
 8003fd0:	f53f af2c 	bmi.w	8003e2c <_svfiprintf_r+0x28>
 8003fd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fd6:	b01d      	add	sp, #116	; 0x74
 8003fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fdc:	ab03      	add	r3, sp, #12
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	462a      	mov	r2, r5
 8003fe2:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <_svfiprintf_r+0x1f8>)
 8003fe4:	a904      	add	r1, sp, #16
 8003fe6:	4638      	mov	r0, r7
 8003fe8:	f000 f87a 	bl	80040e0 <_printf_i>
 8003fec:	e7eb      	b.n	8003fc6 <_svfiprintf_r+0x1c2>
 8003fee:	bf00      	nop
 8003ff0:	0800481c 	.word	0x0800481c
 8003ff4:	08004826 	.word	0x08004826
 8003ff8:	00000000 	.word	0x00000000
 8003ffc:	08003d4d 	.word	0x08003d4d
 8004000:	08004822 	.word	0x08004822

08004004 <_printf_common>:
 8004004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004008:	4616      	mov	r6, r2
 800400a:	4699      	mov	r9, r3
 800400c:	688a      	ldr	r2, [r1, #8]
 800400e:	690b      	ldr	r3, [r1, #16]
 8004010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004014:	4293      	cmp	r3, r2
 8004016:	bfb8      	it	lt
 8004018:	4613      	movlt	r3, r2
 800401a:	6033      	str	r3, [r6, #0]
 800401c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004020:	4607      	mov	r7, r0
 8004022:	460c      	mov	r4, r1
 8004024:	b10a      	cbz	r2, 800402a <_printf_common+0x26>
 8004026:	3301      	adds	r3, #1
 8004028:	6033      	str	r3, [r6, #0]
 800402a:	6823      	ldr	r3, [r4, #0]
 800402c:	0699      	lsls	r1, r3, #26
 800402e:	bf42      	ittt	mi
 8004030:	6833      	ldrmi	r3, [r6, #0]
 8004032:	3302      	addmi	r3, #2
 8004034:	6033      	strmi	r3, [r6, #0]
 8004036:	6825      	ldr	r5, [r4, #0]
 8004038:	f015 0506 	ands.w	r5, r5, #6
 800403c:	d106      	bne.n	800404c <_printf_common+0x48>
 800403e:	f104 0a19 	add.w	sl, r4, #25
 8004042:	68e3      	ldr	r3, [r4, #12]
 8004044:	6832      	ldr	r2, [r6, #0]
 8004046:	1a9b      	subs	r3, r3, r2
 8004048:	42ab      	cmp	r3, r5
 800404a:	dc26      	bgt.n	800409a <_printf_common+0x96>
 800404c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004050:	1e13      	subs	r3, r2, #0
 8004052:	6822      	ldr	r2, [r4, #0]
 8004054:	bf18      	it	ne
 8004056:	2301      	movne	r3, #1
 8004058:	0692      	lsls	r2, r2, #26
 800405a:	d42b      	bmi.n	80040b4 <_printf_common+0xb0>
 800405c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004060:	4649      	mov	r1, r9
 8004062:	4638      	mov	r0, r7
 8004064:	47c0      	blx	r8
 8004066:	3001      	adds	r0, #1
 8004068:	d01e      	beq.n	80040a8 <_printf_common+0xa4>
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	68e5      	ldr	r5, [r4, #12]
 800406e:	6832      	ldr	r2, [r6, #0]
 8004070:	f003 0306 	and.w	r3, r3, #6
 8004074:	2b04      	cmp	r3, #4
 8004076:	bf08      	it	eq
 8004078:	1aad      	subeq	r5, r5, r2
 800407a:	68a3      	ldr	r3, [r4, #8]
 800407c:	6922      	ldr	r2, [r4, #16]
 800407e:	bf0c      	ite	eq
 8004080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004084:	2500      	movne	r5, #0
 8004086:	4293      	cmp	r3, r2
 8004088:	bfc4      	itt	gt
 800408a:	1a9b      	subgt	r3, r3, r2
 800408c:	18ed      	addgt	r5, r5, r3
 800408e:	2600      	movs	r6, #0
 8004090:	341a      	adds	r4, #26
 8004092:	42b5      	cmp	r5, r6
 8004094:	d11a      	bne.n	80040cc <_printf_common+0xc8>
 8004096:	2000      	movs	r0, #0
 8004098:	e008      	b.n	80040ac <_printf_common+0xa8>
 800409a:	2301      	movs	r3, #1
 800409c:	4652      	mov	r2, sl
 800409e:	4649      	mov	r1, r9
 80040a0:	4638      	mov	r0, r7
 80040a2:	47c0      	blx	r8
 80040a4:	3001      	adds	r0, #1
 80040a6:	d103      	bne.n	80040b0 <_printf_common+0xac>
 80040a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b0:	3501      	adds	r5, #1
 80040b2:	e7c6      	b.n	8004042 <_printf_common+0x3e>
 80040b4:	18e1      	adds	r1, r4, r3
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	2030      	movs	r0, #48	; 0x30
 80040ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040be:	4422      	add	r2, r4
 80040c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040c8:	3302      	adds	r3, #2
 80040ca:	e7c7      	b.n	800405c <_printf_common+0x58>
 80040cc:	2301      	movs	r3, #1
 80040ce:	4622      	mov	r2, r4
 80040d0:	4649      	mov	r1, r9
 80040d2:	4638      	mov	r0, r7
 80040d4:	47c0      	blx	r8
 80040d6:	3001      	adds	r0, #1
 80040d8:	d0e6      	beq.n	80040a8 <_printf_common+0xa4>
 80040da:	3601      	adds	r6, #1
 80040dc:	e7d9      	b.n	8004092 <_printf_common+0x8e>
	...

080040e0 <_printf_i>:
 80040e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040e4:	460c      	mov	r4, r1
 80040e6:	4691      	mov	r9, r2
 80040e8:	7e27      	ldrb	r7, [r4, #24]
 80040ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80040ec:	2f78      	cmp	r7, #120	; 0x78
 80040ee:	4680      	mov	r8, r0
 80040f0:	469a      	mov	sl, r3
 80040f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040f6:	d807      	bhi.n	8004108 <_printf_i+0x28>
 80040f8:	2f62      	cmp	r7, #98	; 0x62
 80040fa:	d80a      	bhi.n	8004112 <_printf_i+0x32>
 80040fc:	2f00      	cmp	r7, #0
 80040fe:	f000 80d8 	beq.w	80042b2 <_printf_i+0x1d2>
 8004102:	2f58      	cmp	r7, #88	; 0x58
 8004104:	f000 80a3 	beq.w	800424e <_printf_i+0x16e>
 8004108:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800410c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004110:	e03a      	b.n	8004188 <_printf_i+0xa8>
 8004112:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004116:	2b15      	cmp	r3, #21
 8004118:	d8f6      	bhi.n	8004108 <_printf_i+0x28>
 800411a:	a001      	add	r0, pc, #4	; (adr r0, 8004120 <_printf_i+0x40>)
 800411c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004120:	08004179 	.word	0x08004179
 8004124:	0800418d 	.word	0x0800418d
 8004128:	08004109 	.word	0x08004109
 800412c:	08004109 	.word	0x08004109
 8004130:	08004109 	.word	0x08004109
 8004134:	08004109 	.word	0x08004109
 8004138:	0800418d 	.word	0x0800418d
 800413c:	08004109 	.word	0x08004109
 8004140:	08004109 	.word	0x08004109
 8004144:	08004109 	.word	0x08004109
 8004148:	08004109 	.word	0x08004109
 800414c:	08004299 	.word	0x08004299
 8004150:	080041bd 	.word	0x080041bd
 8004154:	0800427b 	.word	0x0800427b
 8004158:	08004109 	.word	0x08004109
 800415c:	08004109 	.word	0x08004109
 8004160:	080042bb 	.word	0x080042bb
 8004164:	08004109 	.word	0x08004109
 8004168:	080041bd 	.word	0x080041bd
 800416c:	08004109 	.word	0x08004109
 8004170:	08004109 	.word	0x08004109
 8004174:	08004283 	.word	0x08004283
 8004178:	680b      	ldr	r3, [r1, #0]
 800417a:	1d1a      	adds	r2, r3, #4
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	600a      	str	r2, [r1, #0]
 8004180:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004188:	2301      	movs	r3, #1
 800418a:	e0a3      	b.n	80042d4 <_printf_i+0x1f4>
 800418c:	6825      	ldr	r5, [r4, #0]
 800418e:	6808      	ldr	r0, [r1, #0]
 8004190:	062e      	lsls	r6, r5, #24
 8004192:	f100 0304 	add.w	r3, r0, #4
 8004196:	d50a      	bpl.n	80041ae <_printf_i+0xce>
 8004198:	6805      	ldr	r5, [r0, #0]
 800419a:	600b      	str	r3, [r1, #0]
 800419c:	2d00      	cmp	r5, #0
 800419e:	da03      	bge.n	80041a8 <_printf_i+0xc8>
 80041a0:	232d      	movs	r3, #45	; 0x2d
 80041a2:	426d      	negs	r5, r5
 80041a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041a8:	485e      	ldr	r0, [pc, #376]	; (8004324 <_printf_i+0x244>)
 80041aa:	230a      	movs	r3, #10
 80041ac:	e019      	b.n	80041e2 <_printf_i+0x102>
 80041ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80041b2:	6805      	ldr	r5, [r0, #0]
 80041b4:	600b      	str	r3, [r1, #0]
 80041b6:	bf18      	it	ne
 80041b8:	b22d      	sxthne	r5, r5
 80041ba:	e7ef      	b.n	800419c <_printf_i+0xbc>
 80041bc:	680b      	ldr	r3, [r1, #0]
 80041be:	6825      	ldr	r5, [r4, #0]
 80041c0:	1d18      	adds	r0, r3, #4
 80041c2:	6008      	str	r0, [r1, #0]
 80041c4:	0628      	lsls	r0, r5, #24
 80041c6:	d501      	bpl.n	80041cc <_printf_i+0xec>
 80041c8:	681d      	ldr	r5, [r3, #0]
 80041ca:	e002      	b.n	80041d2 <_printf_i+0xf2>
 80041cc:	0669      	lsls	r1, r5, #25
 80041ce:	d5fb      	bpl.n	80041c8 <_printf_i+0xe8>
 80041d0:	881d      	ldrh	r5, [r3, #0]
 80041d2:	4854      	ldr	r0, [pc, #336]	; (8004324 <_printf_i+0x244>)
 80041d4:	2f6f      	cmp	r7, #111	; 0x6f
 80041d6:	bf0c      	ite	eq
 80041d8:	2308      	moveq	r3, #8
 80041da:	230a      	movne	r3, #10
 80041dc:	2100      	movs	r1, #0
 80041de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041e2:	6866      	ldr	r6, [r4, #4]
 80041e4:	60a6      	str	r6, [r4, #8]
 80041e6:	2e00      	cmp	r6, #0
 80041e8:	bfa2      	ittt	ge
 80041ea:	6821      	ldrge	r1, [r4, #0]
 80041ec:	f021 0104 	bicge.w	r1, r1, #4
 80041f0:	6021      	strge	r1, [r4, #0]
 80041f2:	b90d      	cbnz	r5, 80041f8 <_printf_i+0x118>
 80041f4:	2e00      	cmp	r6, #0
 80041f6:	d04d      	beq.n	8004294 <_printf_i+0x1b4>
 80041f8:	4616      	mov	r6, r2
 80041fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80041fe:	fb03 5711 	mls	r7, r3, r1, r5
 8004202:	5dc7      	ldrb	r7, [r0, r7]
 8004204:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004208:	462f      	mov	r7, r5
 800420a:	42bb      	cmp	r3, r7
 800420c:	460d      	mov	r5, r1
 800420e:	d9f4      	bls.n	80041fa <_printf_i+0x11a>
 8004210:	2b08      	cmp	r3, #8
 8004212:	d10b      	bne.n	800422c <_printf_i+0x14c>
 8004214:	6823      	ldr	r3, [r4, #0]
 8004216:	07df      	lsls	r7, r3, #31
 8004218:	d508      	bpl.n	800422c <_printf_i+0x14c>
 800421a:	6923      	ldr	r3, [r4, #16]
 800421c:	6861      	ldr	r1, [r4, #4]
 800421e:	4299      	cmp	r1, r3
 8004220:	bfde      	ittt	le
 8004222:	2330      	movle	r3, #48	; 0x30
 8004224:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004228:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800422c:	1b92      	subs	r2, r2, r6
 800422e:	6122      	str	r2, [r4, #16]
 8004230:	f8cd a000 	str.w	sl, [sp]
 8004234:	464b      	mov	r3, r9
 8004236:	aa03      	add	r2, sp, #12
 8004238:	4621      	mov	r1, r4
 800423a:	4640      	mov	r0, r8
 800423c:	f7ff fee2 	bl	8004004 <_printf_common>
 8004240:	3001      	adds	r0, #1
 8004242:	d14c      	bne.n	80042de <_printf_i+0x1fe>
 8004244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004248:	b004      	add	sp, #16
 800424a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800424e:	4835      	ldr	r0, [pc, #212]	; (8004324 <_printf_i+0x244>)
 8004250:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	680e      	ldr	r6, [r1, #0]
 8004258:	061f      	lsls	r7, r3, #24
 800425a:	f856 5b04 	ldr.w	r5, [r6], #4
 800425e:	600e      	str	r6, [r1, #0]
 8004260:	d514      	bpl.n	800428c <_printf_i+0x1ac>
 8004262:	07d9      	lsls	r1, r3, #31
 8004264:	bf44      	itt	mi
 8004266:	f043 0320 	orrmi.w	r3, r3, #32
 800426a:	6023      	strmi	r3, [r4, #0]
 800426c:	b91d      	cbnz	r5, 8004276 <_printf_i+0x196>
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	f023 0320 	bic.w	r3, r3, #32
 8004274:	6023      	str	r3, [r4, #0]
 8004276:	2310      	movs	r3, #16
 8004278:	e7b0      	b.n	80041dc <_printf_i+0xfc>
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	f043 0320 	orr.w	r3, r3, #32
 8004280:	6023      	str	r3, [r4, #0]
 8004282:	2378      	movs	r3, #120	; 0x78
 8004284:	4828      	ldr	r0, [pc, #160]	; (8004328 <_printf_i+0x248>)
 8004286:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800428a:	e7e3      	b.n	8004254 <_printf_i+0x174>
 800428c:	065e      	lsls	r6, r3, #25
 800428e:	bf48      	it	mi
 8004290:	b2ad      	uxthmi	r5, r5
 8004292:	e7e6      	b.n	8004262 <_printf_i+0x182>
 8004294:	4616      	mov	r6, r2
 8004296:	e7bb      	b.n	8004210 <_printf_i+0x130>
 8004298:	680b      	ldr	r3, [r1, #0]
 800429a:	6826      	ldr	r6, [r4, #0]
 800429c:	6960      	ldr	r0, [r4, #20]
 800429e:	1d1d      	adds	r5, r3, #4
 80042a0:	600d      	str	r5, [r1, #0]
 80042a2:	0635      	lsls	r5, r6, #24
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	d501      	bpl.n	80042ac <_printf_i+0x1cc>
 80042a8:	6018      	str	r0, [r3, #0]
 80042aa:	e002      	b.n	80042b2 <_printf_i+0x1d2>
 80042ac:	0671      	lsls	r1, r6, #25
 80042ae:	d5fb      	bpl.n	80042a8 <_printf_i+0x1c8>
 80042b0:	8018      	strh	r0, [r3, #0]
 80042b2:	2300      	movs	r3, #0
 80042b4:	6123      	str	r3, [r4, #16]
 80042b6:	4616      	mov	r6, r2
 80042b8:	e7ba      	b.n	8004230 <_printf_i+0x150>
 80042ba:	680b      	ldr	r3, [r1, #0]
 80042bc:	1d1a      	adds	r2, r3, #4
 80042be:	600a      	str	r2, [r1, #0]
 80042c0:	681e      	ldr	r6, [r3, #0]
 80042c2:	6862      	ldr	r2, [r4, #4]
 80042c4:	2100      	movs	r1, #0
 80042c6:	4630      	mov	r0, r6
 80042c8:	f7fb ff92 	bl	80001f0 <memchr>
 80042cc:	b108      	cbz	r0, 80042d2 <_printf_i+0x1f2>
 80042ce:	1b80      	subs	r0, r0, r6
 80042d0:	6060      	str	r0, [r4, #4]
 80042d2:	6863      	ldr	r3, [r4, #4]
 80042d4:	6123      	str	r3, [r4, #16]
 80042d6:	2300      	movs	r3, #0
 80042d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042dc:	e7a8      	b.n	8004230 <_printf_i+0x150>
 80042de:	6923      	ldr	r3, [r4, #16]
 80042e0:	4632      	mov	r2, r6
 80042e2:	4649      	mov	r1, r9
 80042e4:	4640      	mov	r0, r8
 80042e6:	47d0      	blx	sl
 80042e8:	3001      	adds	r0, #1
 80042ea:	d0ab      	beq.n	8004244 <_printf_i+0x164>
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	079b      	lsls	r3, r3, #30
 80042f0:	d413      	bmi.n	800431a <_printf_i+0x23a>
 80042f2:	68e0      	ldr	r0, [r4, #12]
 80042f4:	9b03      	ldr	r3, [sp, #12]
 80042f6:	4298      	cmp	r0, r3
 80042f8:	bfb8      	it	lt
 80042fa:	4618      	movlt	r0, r3
 80042fc:	e7a4      	b.n	8004248 <_printf_i+0x168>
 80042fe:	2301      	movs	r3, #1
 8004300:	4632      	mov	r2, r6
 8004302:	4649      	mov	r1, r9
 8004304:	4640      	mov	r0, r8
 8004306:	47d0      	blx	sl
 8004308:	3001      	adds	r0, #1
 800430a:	d09b      	beq.n	8004244 <_printf_i+0x164>
 800430c:	3501      	adds	r5, #1
 800430e:	68e3      	ldr	r3, [r4, #12]
 8004310:	9903      	ldr	r1, [sp, #12]
 8004312:	1a5b      	subs	r3, r3, r1
 8004314:	42ab      	cmp	r3, r5
 8004316:	dcf2      	bgt.n	80042fe <_printf_i+0x21e>
 8004318:	e7eb      	b.n	80042f2 <_printf_i+0x212>
 800431a:	2500      	movs	r5, #0
 800431c:	f104 0619 	add.w	r6, r4, #25
 8004320:	e7f5      	b.n	800430e <_printf_i+0x22e>
 8004322:	bf00      	nop
 8004324:	0800482d 	.word	0x0800482d
 8004328:	0800483e 	.word	0x0800483e

0800432c <memmove>:
 800432c:	4288      	cmp	r0, r1
 800432e:	b510      	push	{r4, lr}
 8004330:	eb01 0402 	add.w	r4, r1, r2
 8004334:	d902      	bls.n	800433c <memmove+0x10>
 8004336:	4284      	cmp	r4, r0
 8004338:	4623      	mov	r3, r4
 800433a:	d807      	bhi.n	800434c <memmove+0x20>
 800433c:	1e43      	subs	r3, r0, #1
 800433e:	42a1      	cmp	r1, r4
 8004340:	d008      	beq.n	8004354 <memmove+0x28>
 8004342:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004346:	f803 2f01 	strb.w	r2, [r3, #1]!
 800434a:	e7f8      	b.n	800433e <memmove+0x12>
 800434c:	4402      	add	r2, r0
 800434e:	4601      	mov	r1, r0
 8004350:	428a      	cmp	r2, r1
 8004352:	d100      	bne.n	8004356 <memmove+0x2a>
 8004354:	bd10      	pop	{r4, pc}
 8004356:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800435a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800435e:	e7f7      	b.n	8004350 <memmove+0x24>

08004360 <_free_r>:
 8004360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004362:	2900      	cmp	r1, #0
 8004364:	d048      	beq.n	80043f8 <_free_r+0x98>
 8004366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800436a:	9001      	str	r0, [sp, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	f1a1 0404 	sub.w	r4, r1, #4
 8004372:	bfb8      	it	lt
 8004374:	18e4      	addlt	r4, r4, r3
 8004376:	f000 f8d3 	bl	8004520 <__malloc_lock>
 800437a:	4a20      	ldr	r2, [pc, #128]	; (80043fc <_free_r+0x9c>)
 800437c:	9801      	ldr	r0, [sp, #4]
 800437e:	6813      	ldr	r3, [r2, #0]
 8004380:	4615      	mov	r5, r2
 8004382:	b933      	cbnz	r3, 8004392 <_free_r+0x32>
 8004384:	6063      	str	r3, [r4, #4]
 8004386:	6014      	str	r4, [r2, #0]
 8004388:	b003      	add	sp, #12
 800438a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800438e:	f000 b8cd 	b.w	800452c <__malloc_unlock>
 8004392:	42a3      	cmp	r3, r4
 8004394:	d90b      	bls.n	80043ae <_free_r+0x4e>
 8004396:	6821      	ldr	r1, [r4, #0]
 8004398:	1862      	adds	r2, r4, r1
 800439a:	4293      	cmp	r3, r2
 800439c:	bf04      	itt	eq
 800439e:	681a      	ldreq	r2, [r3, #0]
 80043a0:	685b      	ldreq	r3, [r3, #4]
 80043a2:	6063      	str	r3, [r4, #4]
 80043a4:	bf04      	itt	eq
 80043a6:	1852      	addeq	r2, r2, r1
 80043a8:	6022      	streq	r2, [r4, #0]
 80043aa:	602c      	str	r4, [r5, #0]
 80043ac:	e7ec      	b.n	8004388 <_free_r+0x28>
 80043ae:	461a      	mov	r2, r3
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	b10b      	cbz	r3, 80043b8 <_free_r+0x58>
 80043b4:	42a3      	cmp	r3, r4
 80043b6:	d9fa      	bls.n	80043ae <_free_r+0x4e>
 80043b8:	6811      	ldr	r1, [r2, #0]
 80043ba:	1855      	adds	r5, r2, r1
 80043bc:	42a5      	cmp	r5, r4
 80043be:	d10b      	bne.n	80043d8 <_free_r+0x78>
 80043c0:	6824      	ldr	r4, [r4, #0]
 80043c2:	4421      	add	r1, r4
 80043c4:	1854      	adds	r4, r2, r1
 80043c6:	42a3      	cmp	r3, r4
 80043c8:	6011      	str	r1, [r2, #0]
 80043ca:	d1dd      	bne.n	8004388 <_free_r+0x28>
 80043cc:	681c      	ldr	r4, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	6053      	str	r3, [r2, #4]
 80043d2:	4421      	add	r1, r4
 80043d4:	6011      	str	r1, [r2, #0]
 80043d6:	e7d7      	b.n	8004388 <_free_r+0x28>
 80043d8:	d902      	bls.n	80043e0 <_free_r+0x80>
 80043da:	230c      	movs	r3, #12
 80043dc:	6003      	str	r3, [r0, #0]
 80043de:	e7d3      	b.n	8004388 <_free_r+0x28>
 80043e0:	6825      	ldr	r5, [r4, #0]
 80043e2:	1961      	adds	r1, r4, r5
 80043e4:	428b      	cmp	r3, r1
 80043e6:	bf04      	itt	eq
 80043e8:	6819      	ldreq	r1, [r3, #0]
 80043ea:	685b      	ldreq	r3, [r3, #4]
 80043ec:	6063      	str	r3, [r4, #4]
 80043ee:	bf04      	itt	eq
 80043f0:	1949      	addeq	r1, r1, r5
 80043f2:	6021      	streq	r1, [r4, #0]
 80043f4:	6054      	str	r4, [r2, #4]
 80043f6:	e7c7      	b.n	8004388 <_free_r+0x28>
 80043f8:	b003      	add	sp, #12
 80043fa:	bd30      	pop	{r4, r5, pc}
 80043fc:	20000098 	.word	0x20000098

08004400 <_malloc_r>:
 8004400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004402:	1ccd      	adds	r5, r1, #3
 8004404:	f025 0503 	bic.w	r5, r5, #3
 8004408:	3508      	adds	r5, #8
 800440a:	2d0c      	cmp	r5, #12
 800440c:	bf38      	it	cc
 800440e:	250c      	movcc	r5, #12
 8004410:	2d00      	cmp	r5, #0
 8004412:	4606      	mov	r6, r0
 8004414:	db01      	blt.n	800441a <_malloc_r+0x1a>
 8004416:	42a9      	cmp	r1, r5
 8004418:	d903      	bls.n	8004422 <_malloc_r+0x22>
 800441a:	230c      	movs	r3, #12
 800441c:	6033      	str	r3, [r6, #0]
 800441e:	2000      	movs	r0, #0
 8004420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004422:	f000 f87d 	bl	8004520 <__malloc_lock>
 8004426:	4921      	ldr	r1, [pc, #132]	; (80044ac <_malloc_r+0xac>)
 8004428:	680a      	ldr	r2, [r1, #0]
 800442a:	4614      	mov	r4, r2
 800442c:	b99c      	cbnz	r4, 8004456 <_malloc_r+0x56>
 800442e:	4f20      	ldr	r7, [pc, #128]	; (80044b0 <_malloc_r+0xb0>)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	b923      	cbnz	r3, 800443e <_malloc_r+0x3e>
 8004434:	4621      	mov	r1, r4
 8004436:	4630      	mov	r0, r6
 8004438:	f000 f862 	bl	8004500 <_sbrk_r>
 800443c:	6038      	str	r0, [r7, #0]
 800443e:	4629      	mov	r1, r5
 8004440:	4630      	mov	r0, r6
 8004442:	f000 f85d 	bl	8004500 <_sbrk_r>
 8004446:	1c43      	adds	r3, r0, #1
 8004448:	d123      	bne.n	8004492 <_malloc_r+0x92>
 800444a:	230c      	movs	r3, #12
 800444c:	6033      	str	r3, [r6, #0]
 800444e:	4630      	mov	r0, r6
 8004450:	f000 f86c 	bl	800452c <__malloc_unlock>
 8004454:	e7e3      	b.n	800441e <_malloc_r+0x1e>
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	1b5b      	subs	r3, r3, r5
 800445a:	d417      	bmi.n	800448c <_malloc_r+0x8c>
 800445c:	2b0b      	cmp	r3, #11
 800445e:	d903      	bls.n	8004468 <_malloc_r+0x68>
 8004460:	6023      	str	r3, [r4, #0]
 8004462:	441c      	add	r4, r3
 8004464:	6025      	str	r5, [r4, #0]
 8004466:	e004      	b.n	8004472 <_malloc_r+0x72>
 8004468:	6863      	ldr	r3, [r4, #4]
 800446a:	42a2      	cmp	r2, r4
 800446c:	bf0c      	ite	eq
 800446e:	600b      	streq	r3, [r1, #0]
 8004470:	6053      	strne	r3, [r2, #4]
 8004472:	4630      	mov	r0, r6
 8004474:	f000 f85a 	bl	800452c <__malloc_unlock>
 8004478:	f104 000b 	add.w	r0, r4, #11
 800447c:	1d23      	adds	r3, r4, #4
 800447e:	f020 0007 	bic.w	r0, r0, #7
 8004482:	1ac2      	subs	r2, r0, r3
 8004484:	d0cc      	beq.n	8004420 <_malloc_r+0x20>
 8004486:	1a1b      	subs	r3, r3, r0
 8004488:	50a3      	str	r3, [r4, r2]
 800448a:	e7c9      	b.n	8004420 <_malloc_r+0x20>
 800448c:	4622      	mov	r2, r4
 800448e:	6864      	ldr	r4, [r4, #4]
 8004490:	e7cc      	b.n	800442c <_malloc_r+0x2c>
 8004492:	1cc4      	adds	r4, r0, #3
 8004494:	f024 0403 	bic.w	r4, r4, #3
 8004498:	42a0      	cmp	r0, r4
 800449a:	d0e3      	beq.n	8004464 <_malloc_r+0x64>
 800449c:	1a21      	subs	r1, r4, r0
 800449e:	4630      	mov	r0, r6
 80044a0:	f000 f82e 	bl	8004500 <_sbrk_r>
 80044a4:	3001      	adds	r0, #1
 80044a6:	d1dd      	bne.n	8004464 <_malloc_r+0x64>
 80044a8:	e7cf      	b.n	800444a <_malloc_r+0x4a>
 80044aa:	bf00      	nop
 80044ac:	20000098 	.word	0x20000098
 80044b0:	2000009c 	.word	0x2000009c

080044b4 <_realloc_r>:
 80044b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b6:	4607      	mov	r7, r0
 80044b8:	4614      	mov	r4, r2
 80044ba:	460e      	mov	r6, r1
 80044bc:	b921      	cbnz	r1, 80044c8 <_realloc_r+0x14>
 80044be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044c2:	4611      	mov	r1, r2
 80044c4:	f7ff bf9c 	b.w	8004400 <_malloc_r>
 80044c8:	b922      	cbnz	r2, 80044d4 <_realloc_r+0x20>
 80044ca:	f7ff ff49 	bl	8004360 <_free_r>
 80044ce:	4625      	mov	r5, r4
 80044d0:	4628      	mov	r0, r5
 80044d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044d4:	f000 f830 	bl	8004538 <_malloc_usable_size_r>
 80044d8:	42a0      	cmp	r0, r4
 80044da:	d20f      	bcs.n	80044fc <_realloc_r+0x48>
 80044dc:	4621      	mov	r1, r4
 80044de:	4638      	mov	r0, r7
 80044e0:	f7ff ff8e 	bl	8004400 <_malloc_r>
 80044e4:	4605      	mov	r5, r0
 80044e6:	2800      	cmp	r0, #0
 80044e8:	d0f2      	beq.n	80044d0 <_realloc_r+0x1c>
 80044ea:	4631      	mov	r1, r6
 80044ec:	4622      	mov	r2, r4
 80044ee:	f7ff fbf7 	bl	8003ce0 <memcpy>
 80044f2:	4631      	mov	r1, r6
 80044f4:	4638      	mov	r0, r7
 80044f6:	f7ff ff33 	bl	8004360 <_free_r>
 80044fa:	e7e9      	b.n	80044d0 <_realloc_r+0x1c>
 80044fc:	4635      	mov	r5, r6
 80044fe:	e7e7      	b.n	80044d0 <_realloc_r+0x1c>

08004500 <_sbrk_r>:
 8004500:	b538      	push	{r3, r4, r5, lr}
 8004502:	4d06      	ldr	r5, [pc, #24]	; (800451c <_sbrk_r+0x1c>)
 8004504:	2300      	movs	r3, #0
 8004506:	4604      	mov	r4, r0
 8004508:	4608      	mov	r0, r1
 800450a:	602b      	str	r3, [r5, #0]
 800450c:	f7fc ffc2 	bl	8001494 <_sbrk>
 8004510:	1c43      	adds	r3, r0, #1
 8004512:	d102      	bne.n	800451a <_sbrk_r+0x1a>
 8004514:	682b      	ldr	r3, [r5, #0]
 8004516:	b103      	cbz	r3, 800451a <_sbrk_r+0x1a>
 8004518:	6023      	str	r3, [r4, #0]
 800451a:	bd38      	pop	{r3, r4, r5, pc}
 800451c:	20000138 	.word	0x20000138

08004520 <__malloc_lock>:
 8004520:	4801      	ldr	r0, [pc, #4]	; (8004528 <__malloc_lock+0x8>)
 8004522:	f000 b811 	b.w	8004548 <__retarget_lock_acquire_recursive>
 8004526:	bf00      	nop
 8004528:	20000140 	.word	0x20000140

0800452c <__malloc_unlock>:
 800452c:	4801      	ldr	r0, [pc, #4]	; (8004534 <__malloc_unlock+0x8>)
 800452e:	f000 b80c 	b.w	800454a <__retarget_lock_release_recursive>
 8004532:	bf00      	nop
 8004534:	20000140 	.word	0x20000140

08004538 <_malloc_usable_size_r>:
 8004538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800453c:	1f18      	subs	r0, r3, #4
 800453e:	2b00      	cmp	r3, #0
 8004540:	bfbc      	itt	lt
 8004542:	580b      	ldrlt	r3, [r1, r0]
 8004544:	18c0      	addlt	r0, r0, r3
 8004546:	4770      	bx	lr

08004548 <__retarget_lock_acquire_recursive>:
 8004548:	4770      	bx	lr

0800454a <__retarget_lock_release_recursive>:
 800454a:	4770      	bx	lr

0800454c <_init>:
 800454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454e:	bf00      	nop
 8004550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004552:	bc08      	pop	{r3}
 8004554:	469e      	mov	lr, r3
 8004556:	4770      	bx	lr

08004558 <_fini>:
 8004558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455a:	bf00      	nop
 800455c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455e:	bc08      	pop	{r3}
 8004560:	469e      	mov	lr, r3
 8004562:	4770      	bx	lr
